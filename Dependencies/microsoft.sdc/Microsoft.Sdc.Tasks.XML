<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Sdc.Tasks</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Sdc.Tasks.Xml.GetValue">
            <summary>
            Allows an XPath query to be executed on a set of specified XML documents.  Returns the selected values as a semicolon delimted string.
            If a single MatchValue is provided, each XPath query is matched against the same value.
            If a list of MatchValues are provided, the value in the list is matched against the Xml document with the corresponding index.  If a MatchValue list is provided with more than one item, the list must have the same number of items as there are in the Path parameter.
            </summary>
            <remarks>
            <code><![CDATA[
            <Xml.GetValue Path="path" XPath="xpath">
                <Output TaskParameter="Results" ItemName="ResultsItem" />
            </Xml.GetValue>]]></code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path to the Xml document to apply the XPath query against.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath query to be executed against the given Xml document.</para>
            <para><i>Results (Output)</i></para>
            <para>Stores the results of the query as a semicolon delimited string.</para>
            <para><i>MatchValue (Optional)</i></para>
            <para>The value to match against the XPath query result(s).  If one item is provided, the query for all specified Xml documents are matched against this single value.
            If a list of items is provided, the list must first have the same number of items as are in the Path parameter.  The respective value in the list is then used when matching against query results.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Xml.GetValue
                        Path="c:\tempXml.xml"
                        XPath="//books[@Value]" >
                        <Output TaskParameter="Results" ItemName="ResultsItem" />
                    </Xml.GetValue>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.TaskBase">
            <summary>
            Provides a common task for all the SDC Build Tasks.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskBase.#ctor">
            <summary>
            Initializes a new instance of the TaskBase class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskBase.Execute">
            <summary>
            Main execute method. Handles bubbled up exceptions and will log the errors along
            with all the public properties of the task.
            </summary>
            <remarks>
            This class is sealed to prevent accidental implementations based on the previous pattern.
            Instead subclasses should implement the InternalExecute method.
            </remarks>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskBase.InternalExecute">
            <summary>
            This is the main execute method that all tasks should implement
            </summary>
            <remarks>
            TaskException should be thrown in the event of errors
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.TaskBase.Utilities">
            <summary>
            A helper Utilities class.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.GetValue.#ctor">
            <summary>
            Initializes a new instance of the GetValue class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.GetValue.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.GetValue.NameSpaces">
            <summary>
            Used to pass in namespaces and prefixes. These prefixes can then be used in the XPath expression
            use the a semicolon separated list of the form prefix=namespace
            eg.
            "xsd=http://www.w3.org/2001/XMLSchema;xsi=http://www.w3.org/2001/XMLSchema-instance"
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory">
            <summary>
            Create a new virtual directory
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.CreateVirtualDriectory
                VirtualDirectoryName="virtualDirectoryName" 
                Path="path" 
                MachineName="machineName"
                AppPoolID="appPoolID" 
                AppCreate="appCreate" 
                WebSiteName="webSiteName"
                AnonymousUserName="anonymousUserName"
                AnonymousUserPassword="anonymousUserPassword"
                UncUserName="uncUserName"
                   UncPassword="uncPassword"
                AuthFlags="authenticationFlags"
                AccessFlags="accessFlags"
            />]]></code>
            <para>where:</para>
            <para><i>virtualDirectoryName (Required)</i></para>
            <para>name of the virtual driectory to create</para>
            <para><i>path (Required)</i></para>
            <para>Path to map the virtual directory to.</para>
            <para><i>machineName</i></para>
            <para>Machine to add the virtual directory on.</para>
            <para><i>appPoolID</i></para>
            <para>Application pool to run the virtual directory under (IIS6 only).</para>
            <para><i>appCreate</i></para>
            <para>Set to "true" to create an application for this virtual directory.</para>
            <para><i>webSiteName</i></para>
            <para>Web site to attach the virtual directory onto.</para>
            <para><i>anonymousUserName</i></para>
            <para>Account to run anonymous users under.</para>
            <para><i>anonymousUserPassword</i></para>
            <para>Password for the anonymous users account.</para>
            <para><i>uncUserName</i></para>
            <para>Account to connect to a UNC share under when the Path property is a UNC path.</para>
            <para><i>uncPassword</i></para>
            <para>Password for the connection to a UNC share.</para>
            <para><i>authFlags</i></para>
            <para>Authentication flags to apply to the directory.</para>    
            <para><i>accessFlags</i></para>
            <para>Access flags to apply to the directory.</para>    /// </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.CreateVirtualDirectory
                            VirtualDirectoryName="vdirName" 
                            Path="c:\temp" 
                            MachineName="remotemachine"
                            AppPoolID="IIS6AppPool" 
                            AppCreate="1|0" 
                            WebSiteName="MySite"
                            AnonymousUserName="anonaccount"
                            AnonymousUserPassword="anonpassword"
                            UncUserName="domain\user"
                               UncPassword="uncpassword"
                            AuthFlags="authenticationFlags" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.VirtualDirectoryName">
            <summary>
            Name of the virtual driectory to be created
            </summary>
            <value>any valid directory name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.Path">
            <summary>
            Root path for the virtual directory
            </summary>
            <value>Existing directory path</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.MachineName">
            <summary>
            Name of the machine to create the new virtual directory on
            </summary>
            <value>A valid machine name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.WebSiteName">
            <summary>
            Site name to create new virtual directory on
            </summary>
            <value>A valid site name</value>
            <remarks>If this is not specified the virtual directory will be created 
            on "Default Web Site"</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.WebAppName">
            <summary>
            The name of the Web Application to create
            <value>A valid Web Application name</value>
            <remarks>If this is not supplied or empty, the folder will remain a virtual directory</remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.AppPoolId">
            <summary>
            Application Pool ID to run virtual directory under
            </summary>
            <value>A valid application pool ID</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.AppCreate">
            <summary>
            Create a specific application for this virtual director
            </summary>
            <value>True or False</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.AnonymousUserName">
            <summary>
            Account to run anonymous users under in this directory
            </summary>
            <value>A valid user account</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.AnonymousUserPassword">
            <summary>
            Password for the anonymous user process
            </summary>
            <value>A valid password for the specified user name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.UncUserName">
            <summary>
            Account to connect to a UNC share under when the Path property contains a UNC share
            </summary>
            <value>A valid user account</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.UncPassword">
            <summary>
            Password for the user used to connect to a UNC share
            </summary>
            <value>A valid password for the specified UncUserName</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.AuthFlags">
            <summary>
            Authentication methods for the site
            </summary>
            <value>A combination of </value>
            <value>NTLM </value>
            <value>Anonymous </value>
            <value>Basic </value>
            <value>Digest</value>
            <remarks>If unspecified the site will default to anonymous and NTLM</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory.AccessFlags">
            <summary>
            Access methods for the directory
            </summary>
            <value>  AccessNoAccess</value> 
            <value>  AccessRead</value>
            <value>  AccessWrite</value>
            <value>  AccessExecute</value>
            <value>  AccessSource</value>
            <value>  AccessScript</value>
            <value>  AccessNoRemoteWrite</value>
            <value>  AccessNoRemoteRead</value>
            <value>  AccessNoRemoteExecute</value>
            <value>  AccessNoRemoteScript</value>
            <remarks>If unspecified the site will default to scripts and executables</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting">
            <summary>
            Allows update access to the URI and type for a Custom Error page
            </summary>
            <remarks>
            A complete sample will be made available shortly
            </remarks>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.ErrorCode">
            <summary>
            Number of HTTP error code that you want to update the custom error page for
            </summary>
            <value>A valid http error code that IIS allows custom error page setting for</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.SubErrorCode">
            <summary>
            Number of the sub error code that you want to update the custom error page for.
            e.g. HTTP 403.2 error code will be 403 and the sub error code "3"
            </summary>
            <value>A valid machine name. If this value is not set the delete will 
            target on the local machine.</value>
            <remarks>This value allows string because "*" is a valid value and used when using the top
            level error code e.g. </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.Uri">
            <summary>
            The location of the custom error page
            </summary>
            <value>A file location or a URL depending on
            whether the Type is "File" or "URL"</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.Type">
            <summary>
            The type of the custom error page
            </summary>
            <value>The type of custom error page value can be either "File" or "URL"</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.DirectoryType">
            <summary>
            The type of the folder that the Custom Errors settings hang off
            </summary>
            <value>Value can be either "</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.MachineName">
            <summary>
            Machine to perform the action on
            </summary>
            <value>A valid machine name. If this value is not set the delete will 
            target on the local machine.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.WebSiteName">
            <summary>
            Web site to unload the virtual directory's application from
            </summary>
            <value>A value web site name. If this value is not set the delete will
            target against "Default Web Site"</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.Path">
            <summary>
            Path to the directory that the Custom Errors settings in question hang off
            </summary>
            <value>A path to the directory in the format "Path1\Path2\Path3\Path4", or "." to specify the entire web-site</value>
            <remarks>Use of this property, when the DirectoryType is VirtualWebDir, is invalid</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.DirectoryName">
            <summary>
            Gets or sets the name of the directory.
            </summary>
            <value>The name of the directory.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.IisDirectoryType">
            <summary>
            IisDirectoryType
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.IisDirectoryType.VirtualWebDir">
            <summary>
            VirtualWebDir
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.UpdateHttpErrorSetting.IisDirectoryType.WebDir">
            <summary>
            WebDir
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteVirtualDirectory">
            <summary>
            Deletes an ftp virtual directory 
            </summary>
            <remarks>
            <code><![CDATA[<Web.FtpSite.DeleteVirtualDirectory 
                VirtualDirectoryName="virtualDirectoryName" 
                FtpSiteName="ftpSiteName"
                MachineName="machineName">]]></code>
            <para>where:</para>
            <para><i>virtualDirectoryName (Required)</i></para>
            <para>A valid virtual directory name</para>
            <para><i>machineName</i></para>
            <para>Machine to delete the virtual directory from. If unspecified the action will execute against the local machine.</para>
            <para><i>ftpSiteName</i></para>
            <para>The FTP site to delete the virtual directory from</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.FtpSite.DeleteVirtualDirectory VirtualDirectoryName="/virtual" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteVirtualDirectory.#ctor">
            <summary>
            Initializes a new instance of the DeleteFtpVirtualDirectory class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteVirtualDirectory.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteVirtualDirectory.VirtualDirectoryName">
            <summary>
            Name of the virtual directory to delete
            </summary>
            <value>any valid directory name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteVirtualDirectory.MachineName">
            <summary>
            Machine name to delete the virtual directory from
            </summary>
            <value>A valid machine name. 
            If unspecified the action will execute against the local machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteVirtualDirectory.FtpSiteName">
            <summary>
            FTP site to delete the virtual directory from
            </summary>
            <value>A valid, existing FTP site name</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.AppPool.Exists">
            <summary>
            Checks whether an Applcation Pool exists (IIS6 or later).
            </summary>
            <remarks>
            <code><![CDATA[<Web.AppPool.Delete AppPoolName="appPoolName"/>]]></code>
            <para>where:</para>
            <para><i>appPoolName (Required)</i></para>
            <para>A valid, existing IIS pool name</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.AppPool.Exists
                        AppPoolName="TestApplicationPool">
                        <Output TaskParameter="DoesExist" PropertyName="AppPoolExists"/>
                    </Web.AppPool.Exists>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.AppPool.Exists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Exists.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Exists.AppPoolName">
            <summary>
            Name of the application pool to check for.
            </summary>
            <value>Any valid IIS application pool name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Exists.DoesExist">
            <summary>
            Gets whether the app pool does exist.
            </summary>
            <value>true if the app pool exists, or false otherwise.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown">
            <summary>
            Shutsdown a virtual machine
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.OS.Shutdown
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout"
                        Retries="retries" >
                           <Output TaskParameter="IsAlive" ItemName="aliveItem"></Output>
            </VirtualServer.VirtualMachine.OS.Shutdown>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to check.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the task to wait for a response, in milliseconds. Defaults to 10.</para>
            <para><i>aliveItem</i></para>
            <para>Returns false if the virtual machine was successfully shutdown within the period of time specified by <i>timeout</i> period and within
            the number of retries specified by <i>retries</i>. Otherwise, returns true.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.OS.Shutdown
                        MachineName="myMachine"
                        Timeout="20"
                           <Output TaskParameter="IsAlive" ItemName="AliveItem"></Output>
                    </VirtualServer.VirtualMachine.OS.Shutdown> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualServerBase">
            <summary>
            InitVS handles the special COM/DCOM startup code required by the Virtual
            Server security model.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualServerBase.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.#ctor">
            <summary>
            Initializes a new instance of the Shutdown class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.IsAlive">
            <summary>
            Returns true if the task receives a response from the virtual server within the specified <i>timeout</i> period and within
            the number of retries specified by <i>retries</i>. Otherwise, returns false.
            </summary>
            <value>Returns true if the task receives a response from the virtual server within the specified <i>timeout</i> period and within
            the number of retries specified by <i>retries</i>. Otherwise, returns false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.Retries">
            <summary>
            The number of subsequent attempts the task should make to obtain a response from the virtual machine, if no response was obtained within the time specified by the <i>timeout</i>
            property.
            </summary>
            <value>The number of subsequent attempts the task should make to obtain a response from the virtual machine, if no response was obtained within the time specified by the <i>timeout</i>
            property. Defaults to 1.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.Timeout">
            <summary>
            Length of time to wait for the a response from the virtual machine, in seconds.
            </summary>
            <value>Length of time to wait for the a response from the virtual machine, in seconds. Defaults to 10.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.Shutdown.MachineName">
            <summary>
            The name of the virtual machine to shutdown.
            </summary>
            <value>The name of the virtual machine to shutdown.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.Update">
            <summary>
            Updates a versionnumber.exe.config file to the correct number
            </summary>
            <remarks>
            Note. This checks out the file in question from Source Control, updates the number and then checks the updated file back in.
            It only works with Source Depot currently.
            <code><![CDATA[
            <VersionNumber.Update
                        VersionNumberConfigFileLocation="versionNumberConfigFileLocation"
                        OnlyIncrementRevision="onlyIncrementRevision"
                        <Output TaskParameter="VersionNumber" ItemName="versionNumberItem"></Output>
            </VersionNumber.Update>
            ]]></code>
            <para>where:</para>
            <para><i>versionNumberConfigFileLocation (Required)</i></para>
            <para>Fully qualified file name to the xml config file. The file contains, in Xml format, the major, minor, build and revision number.</para>
            <para>
            For example:
            
            <example>
            <code><![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
                <configuration>
                    <appSettings>
                        <add key="major" value="1" />
                        <add key="minor" value="2" />
                        <add key="build" value="1354" />
                        <add key="revision" value="155" />
                    </appSettings>
                </configuration>
            ]]></code>    
            </example>
            </para>
            <para><i>onlyIncremementRevision</i></para>
            <para>Force Revision only change. So 2.0.1188.14 would be 2.0.1188.15 on the next automatic label from the source control system.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VersionNumber.Update VersionNumberConfigFileLocation="@(VersionXmlFile)">
                        <Output TaskParameter="VersionNumber" ItemName="VersionNumber" />
                    </VersionNumber.Update>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Update.#ctor">
            <summary>
            Initializes a new instance of the UpdateVersionNumber class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Update.InternalExecute">
            <summary>
            TODO
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Update.IncrementVersionNumbers">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Update.LoadVersionNumber">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Update.SaveVersionNumber">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Update.VersionNumber">
            <summary>
            TODO
            </summary>
            <value>TODO</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Update.SkipSourceControl">
            <summary>
            If TRUE doesn't checkout or submit to source control
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Update.OnlyIncrementRevision">
            <summary>
            If TRUE only the revision part of the build number will be incremented
            </summary>
            <value>Force Revision only change. So 2.0.1188.14 would be 2.0.1188.15 on the next automatic label from the source control system.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Update.VersionNumberFormat">
            <summary>
            If specified then this values indicates how the build number is calculated. i.e. a format of yyMMdd on July 15th ,2004 would give 040715. Note, this must only contain valid date formatting characters.
            If not specified the the build number format is the number of days since startDate from the xmlFile. If startDate is not specified then it defaults to Jan 1st, 2000.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles">
             <summary>
             Creates the VersionNumber.cs and VersionNumber.h files from the config file provided.
             Typically these files are then linked in to each of your projects
             If you provide BuildNumber and RevisionNumber then your provided values are used and not the values
             from the config file
             </summary>
             <remarks>
             <code><![CDATA[
             <VersionNumber.CreateSourceFiles
                         OutputPath="outputPath"
                         ConfigFileLocation="configFileLocation"
                         Filename="filename"
                         BuildNumber="buildNumber"
                         RevisionNumber="revisionNumber"
             </VersionNumber.CreateSourceFiles>
             ]]></code>
             <para>where:</para>
             <para><i>outputPath</i></para>
             <para>The path to the folder where VersionNumber.cs and VersionNumber.h will be written.</para>
             <para><i>filename</i></para>
             <para>The filename to use as the root for the generated files. Defaults to VersionNumber</para>
             <para><i>configFileLocation</i></para>
             <para>Fully qualified file name to the xml config file. The file contains, in Xml format, the major, minor, build and revision number.</para>
             <para><i>buildNumber</i></para>
             <para>If you set this value then the value from the config file is ignored.</para>
             <para><i>revisionNumber</i></para>
             <para>If you set this value then the value from the config file is ignored.</para>
            
             For example:
             
             <example>
             <code><![CDATA[
             <?xml version="1.0" encoding="utf-8"?>
                 <configuration>
                     <appSettings>
                         <add key="language" value="C++;C#" />    
                         <add key="major" value="2" />
                         <add key="minor" value="0" />
                         <add key="build" value="050304" />
                         <add key="revision" value="001" />
                     </appSettings>
                 </configuration>
             ]]></code>    
             </example>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <VersionNumber.CreateSourceFiles
                           ConfigFileLocation="@(VersionXmlFile)" 
                           BuildNumber="051203"
                           RevisionNumber="00002"
                           OutputPath="$(MSBuildBinPath)\..\Common" >
                     </VersionNumber.CreateSourceFiles> 
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.#ctor">
            <summary>
            Initializes a new instance of the CreateSourceFiles class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.ConfigFileLocation">
            <summary>
            The full path to the xml config file containing the version numbers
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.OutputPath">
            <summary>
            The path to write the VersionNumber.cs file to
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.Filename">
            <summary>
            Defaults to VersionNumber if not specified
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.RevisionNumber">
            <summary>
            If this value is provided then the value from the config file is ignored
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.BuildNumber">
            <summary>
            If this value is provided then the value from the config file is ignored
            </summary>       
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.CreateSourceFiles.VersionNumber">
            <summary>
            Returns the full build number i.e. 2.0.050518.00002
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.AddAcl">
            <summary>
            Adds an Access Control List Entry to a file or folder.
            </summary>
            <remarks>
            <code><![CDATA[<Security.AddAcl Path="path" ApplyTo="applyTo" UserOrGroup="userOrGroup" AccessType="accessType" />]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The path to the file or folder.</para>
            <para><i>applyTo</i></para>
            <para>Either ThisFolder, SubFolders or Files.</para>
            <para><i>userOrGroup (Required)</i></para>
            <para>A domain user or group i.e. mydomain\user1.</para>
            <para><i>accessType (Required)</i></para>
            <para>The permissions required i.e. Read Write.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Security.AddAcl
                        Path="c:\temp"
                        ApplyTo="ThisFolder SubFolders Files"
                        UserOrGroup="mydomain\user1"
                        AccessType="Read Write" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.AddAcl.#ctor">
            <summary>
            Initializes a new instance of the AddAcl class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.AddAcl.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.AddAcl.Path">
            <summary>Specifies the path to the file or folder that this ACL will be applied to.</summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.AddAcl.ApplyTo">
            <summary>Specifies how this ACE is applied i.e. ThisFolder</summary>
            <remarks>
            <para>What to apply this ACL to i.e. ThisFolder, SubFolders, or Files. Separate multiple values with a space.</para>
            <para>Defaults to all.</para>
            <para>Possible values are:</para>
            <para>ThisFolder</para>
            <para>SubFolder</para>
            <para>Files</para>
            </remarks>
            <value>This is how the ACE is applied</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.AddAcl.UserOrGroup">
            <summary>Specifies the user or group that this ACL will be applied for.</summary>
            <example>domain\user1</example>
            <value>The name of the user or group.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.AddAcl.AccessType">
            <summary>
            Specifies the type of Access to grant.
            </summary>
            <remarks>
            <para>The type of access i.e. Read or Delete etc. Separate multiple values with a space.</para>
            <para>Possible values are:</para>
            <para>FullControl</para>
            <para>TraverseFolderExecuteFile</para>
            <para>ListFolderReadData</para>
            <para>ReadAttributes</para>
            <para>ReadExtendedAttributes</para>
            <para>CreateFilesWriteData</para>
            <para>CreateFoldersAppendData</para>
            <para>WriteAttributes</para>
            <para>WriteExtendedAttributes</para>
            <para>DeleteSubfoldersAndFiles</para>
            <para>Delete</para>
            <para>ReadPermissions</para>
            <para>ChangePermissions</para>
            <para>TakeOwnership</para>
            <para>Modify</para>
            <para>ReadAndExecute</para>
            <para>ListFolderContents</para>
            <para>Read</para>
            <para>Write</para>
            </remarks>
            <value>The type of access.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Ping">
            <summary>
            Pings a computer with a buffer of data to ensure it is visible and the data does not get
            corrupted.
            </summary>
            <remarks>
            <code><![CDATA[<Ping Machine="machine" Count="count" Interval="interval" Timeout="timeout" BufferSize="bufferSize" AllowFragmentation="allowFragmentation" TimeToLive="timeToLive" LogSuccess="logSuccess"/>]]></code>
            <para>where:</para>
            <para><i>machine (Required)</i></para>
            <para>
            The name or IP address of the machine to ping.
            </para>
            <para><i>count</i></para>
            <para>
            The number of ping requests to send. The default is four.
            </para>
            <para><i>interval</i></para>
            <para>
            The interval in milliseconds between ping requests. The default is no interval.
            </para>
            <para><i>timeout</i></para>
            <para>
            The maximum time in milliseconds to wait for a response. The default is five seconds.
            </para>
            <para><i>bufferSize</i></para>
            <para>
            The size of the data buffer to send in bytes, which must be between 1 and 65,500 bytes inclusive.
            Note that unless fragmentation is allowed then large buffers may fail. The default size is 32 bytes.
            </para>
            <para><i>allowFragmentation</i></para>
            <para>
            Whether the packet is allowed to be fragmented. The default is false.
            </para>
            <para><i>timeToLive</i></para>
            <para>
            The time-to-live for the packet, that is the number of times it can be forwarded by gateways and 
            routers before the packet is deemed undeliverable and discarded. The default is 128.
            </para>
            <para><i>logsuccess</i></para>
            <para>
            Indicates whether to log successful pings to the console. The default is false.
            </para>
            <para><i>failureCount (Output)</i></para>
            <para>
            The number of ping requests that failed.
            </para>
            <para><i>roundTripTime (Output)</i></para>
            <para>
            The average round trip time for the ping requests.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Ping 
                           Machine="mymachine" 
                           Count="2"
                           Interval="1000"
                           Timeout="3000" 
                           BufferSize="1024" 
                           AllowFragmentation="false" 
                           TimeToLive="128"
                           StopOnSuccess="true"
                           LogSuccess="true">
                    <Output TaskParameter="FailureCount" PropertyName="FailedPingCount" />
                    <Output TaskParameter="RoundTripTime" PropertyName="RoundTripDuration" />
                    </Ping>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Ping.InternalExecute">
            <summary>
            Executes the task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Ping.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            Compares the contents of two byte arrays to see if they are the same.
            </summary>
            <param name="expected">
            The expected array.
            </param>
            <param name="actual">
            The actual array.
            </param>
            <returns>
            <b>true</b> if the contants of the arrays are the same, or <b>false</b> otherwise
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Ping.CreatePingBuffer">
            <summary>
            Creates a buffer of data to send with the ping request.
            </summary>
            <returns>
            An array of bytes.
            </returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.StopOnSuccess">
            <summary>
            If TRUE the pings stop as soon as a good one returns.
            </summary>
            <value>Defaults to FALSE.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.LogSuccess">
            <summary>
            Gets or sets a value indicating whether to log successful pings to the console
            </summary>
            <value><c>true</c> if [log success]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.AllowFragmentation">
            <summary>
            Gets or sets whether the ping request is allowed to fragment the packet. The default is <b>false</b>.
            </summary>
            <value>
            <b>true</b> if the packet can be fragmented, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.BufferSize">
            <summary>
            Gets or sets the size of the data buffer in bytes sent with the ping request. The default is 32.
            </summary>
            <value>
            An integer between 1 and 65,500.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.Count">
            <summary>
            Gets or sets the number of ping requests that are sent. The default is four.
            </summary>
            <value>
            A positive integer.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.FailureCount">
            <summary>
            Gets the number of pings that failed.
            </summary>
            <value>
            Zero if all pings were successful, or the number of pings that failed otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.Interval">
            <summary>
            Gets or sets the interval in milliseconds between ping requests.
            </summary>
            <value>
            The interval in milliseconds between ping requests.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.Machine">
            <summary>
            Gets or sets the name or IP address of the machine to ping.
            </summary>
            <value>
            The name or IP address of the machine to ping.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.RoundTripTime">
            <summary>
            Gets the average round trip time in milliseconds for all successful pings. If no pings were
            successful then this returns zero.
            </summary>
            <value>
            The average round trip time in milliseconds.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.Timeout">
            <summary>
            Gets or sets the maximum time in milliseconds to wait for a response.
            </summary>
            <value>
            The maximum time in milliseconds to wait for a response.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Ping.TimeToLive">
            <summary>
            Gets or sets the time-to-live for the packet, that is the number of times it can be forwarded
            by gateways and routers before the packet is deemed undeliverable and discarded.
            </summary>
            <value>
            The maximum number of times the packet can be forwarded.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper">
            <summary>
            Provides an interface to the global assembly cache via the
            IAssemblyCache COM interface.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.#ctor">
            <summary>
            Private constructor as this class only contains statics.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.Contains(System.String)">
            <summary>
            Returns true if the global assembly cache contains the named
            assembly, or false otherwise.
            </summary>
            <param name="name">
            The name of the assembly to check for.
            </param>
            <returns>
            True if the assembly exists in the global assembly cache, or false
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.Contains(System.Reflection.AssemblyName)">
            <summary>
            Returns true if the global assembly cache contains the named
            assembly, or false otherwise.
            </summary>
            <param name="assemblyName">
            The AssemblyName to look for.
            </param>
            <returns>
            True if the assembly exists in the global assembly cache, or false
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.Install(System.String,System.Boolean)">
            <summary>
            Installs an assembly in the global assembly cache.
            </summary>
            <param name="path">
            The path to the assembly to install.
            </param>
            <param name="force">
            Normally if the assembly is already installed in the GAC and the
            file version numbers of the assembly being installed are the same
            or later, the files are replaced. If force is true the files of an
            existing assembly are overwritten regardless of their version
            number.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.Install(System.String)">
            <summary>
            Installs an assembly in the global assembly cache.
            </summary>
            <param name="path">
            The path to the assembly to install.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.Uninstall(System.String)">
            <summary>
            Uninstalls an assembly from the global assembly cache.
            </summary>
            <param name="name">
            The name of the assembly to uninstall.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.Uninstall(System.Reflection.AssemblyName)">
            <summary>
            Uninstalls an assembly from the global assembly cache.
            </summary>
            <param name="assemblyName">
            The AssemblyName to uninstall.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.GacHelper.GetIAssemblyCache">
            <summary>
            Gets the IAssemblyCache interface.
            </summary>
            <returns>
            An IAssemblyCache interface.
            </returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.Create">
            <summary>
            Creates a share on either the local or a remote machine.
            </summary>
            <remarks>
            <code><![CDATA[<Share.Create ShareName="shareName" Path="path" Type="type" Description="description" AllowedUsers="allowedUsers" DeniedUsers="deniedUsers" MaximumAllowed="maximumAllowed" Machine="machine" UserName="userName" Password="password" />]]></code>
            <para>where:</para>
            <para><i>shareName (Required)</i></para>
            <para>
            The name of the share to create.
            </para>
            <para><i>path</i></para>
            <para>
            The full physical path to create the share at.
            </para>
            <para><i>type</i></para>
            <para>
            The type of share to create. This can be one of the following values: DiskDrive, PrintQueue, Device,
            Ipc, DiskDriveAdmin, PrintQueueAdmin, DeviceAdmin, IpcAdmin. The default is DiskDrive.
            </para>
            <para><i>description</i></para>
            <para>
            A description of the share that users can see when they connect to it.
            </para>
            <para><i>allowedUsers</i></para>
            <para>
            A delimited list of the users or security groups who are allowed to access the share, in the format
            DOMAIN\Username. If none are supplied and nobody is in the <i>deniedUsers</i> then everybody is
            given full access to the share. If none are supplied there are accounts in <i>deniedUsers</i>
            then nobody is given access to the share.
            </para>
            <para><i>deniedUsers</i></para>
            <para>
            A delimited list of the users or security groups who are explicitly denied to access the share, in the 
            format DOMAIN\Username. If none are supplied then nobody is explicitly denied access to the share.
            </para>
            <para><i>maximumAllowed</i></para>
            <para>
            The maximum number of users who are allowed to simultaneously connect to the share. Use zero for
            no limit. The default is no limit.
            </para>
            <para><i>machine</i></para>
            <para>
            The name or IP address of the machine to create the share on. The default is the local machine.
            </para>
            <para><i>userName</i></para>
            <para>
            If different credentials are needed to connect to a remote machine, this is the user name in the form 
            DOMAIN\Username. This must not be supplied for the local machine. The default is to use the same
            credentials as the user the task is running as.
            </para>
            <para><i>password</i></para>
            <para>
            The password for the user account specified by <i>userName</i>. The default is no password.
            </para>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Connect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Disconnect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Exists"/>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Share.Create
                        ShareName="Software" 
                        Path="C:\Software\" 
                        Type="DiskDrive" 
                        Description="Software library" 
                        AllowedUsers="domain\username;domain\domain admins;MyMachine\Administrator"
                        DeniedUsers="domain\guests;MyMachine\Guest"
                        MaximumAllowed="10" 
                        Machine="MyMachine" 
                        UserName="domain\username" 
                        Password="password1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase">
            <summary>
            Base class for tasks that deal with shares.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.#ctor">
            <summary>
            Creates a new share task base.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.GetUseInfoInvalidParameterFriendlyName(System.UInt32)">
            <summary>
            Gets the name of the invalid parameter in the USE_INFO_2 structure if the ERROR_INVALID_PARAMETER
            error is returned by one of the Net* functions.
            </summary>
            <param name="parameterIndex">
            The index of the invalid parameter that is filled in by the Net* function.
            </param>
            <returns>
            The friendly name of the invalid parameter.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.GetUseInfoInvalidParameterValue(Microsoft.Sdc.Tasks.NativeMethods.USE_INFO_2,System.UInt32)">
            <summary>
            Gets the value of the invalid parameter in the USE_INFO_2 structure if the ERROR_INVALID_PARAMETER
            error is returned by one of the Net* functions.
            </summary>
            <param name="useInfo">
            The USE_INFO_2 structure that was passed to the Net* function.
            </param>
            <param name="parameterIndex">
            The index of the invalid parameter that is filled in by the Net* function.
            </param>
            <returns>
            The value of the invalid parameter.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.GetManagementScope">
            <summary>
            Gets a connected management scope for the machine to create the share on.
            </summary>
            <returns>
            A connected management scope.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.GetSharePath">
            <summary>
            Gets the share path in the form \\machine\share.
            </summary>
            <returns>
            The share path in the form \\machine\share.
            </returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.Machine">
            <summary>
            Gets or sets the name of the machine. The default is the local machine.
            </summary>
            <value>
            The name of the machine.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.Password">
            <summary>
            Gets or sets the password used to connect to the machine.
            </summary>
            <value>
            The password used to connect to the machine.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareName">
            <summary>
            Gets or sets the name of the share.
            </summary>
            <value>
            The name of the share.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.UserName">
            <summary>
            Gets or sets the user name used to connect to the machine. This should be in the format DOMAIN\Username.
            </summary>
            <value>
            The user name used to connect to the machine.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType">
            <summary>
            The type of share. The value of the enumeration can be used in WMI Win32_Share methods.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.DiskDrive">
            <summary>
            Disk drive.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.PrintQueue">
            <summary>
            Print queue.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.Device">
            <summary>
            Device.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.Ipc">
            <summary>
            IPC.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.DiskDriveAdmin">
            <summary>
            Disk drive admin.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.PrintQueueAdmin">
            <summary>
            Print queue admin.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.DeviceAdmin">
            <summary>
            Device admin.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.ShareType.IpcAdmin">
            <summary>
            IPC admin.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.DeviceType">
            <summary>
            The type of a shared device. The value of the enumeration can be used in the Win32 Net* functions.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.DeviceType.Any">
            <summary>
            Any device type.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.DeviceType.Disk">
            <summary>
            A disk drive share.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.DeviceType.Printer">
            <summary>
            A shared printer.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.Share.ShareTaskBase.DeviceType.Ipc">
            <summary>
            An IPC share.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.#ctor">
            <summary>
            Creates a new task to create a share.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.InternalExecute">
            <summary>
            Executes the task
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.BuildSecurityDescriptor(System.Management.ManagementScope)">
            <summary>
            Builds a Win32_SecurityDescriptor <see cref="T:System.Management.ManagementObject"/> representing
            the users allowed and denied access to the share.
            </summary>
            <param name="scope">
            The <see cref="T:System.Management.ManagementScope"/> to build the security descriptor in.
            </param>
            <returns>
            A Win32_SecurityDescriptor <see cref="T:System.Management.ManagementObject"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.BuildAccessControlList(System.Management.ManagementScope)">
            <summary>
            Builds an array of Win32_ACE <see cref="T:System.Management.ManagementObject"/>s that can be
            used as an access control list for the users specified in this class.
            </summary>
            <param name="scope">
            The <see cref="T:System.Management.ManagementScope"/> get the access control entries from.
            </param>
            <returns>
            An array of Win32_ACE <see cref="T:System.Management.ManagementObject"/>s.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.BuildAccessControlEntry(System.Management.ManagementScope,System.Management.ManagementObject,System.Boolean)">
            <summary>
            Builds a Win32_ACE <see cref="T:System.Management.ManagementObject"/> for a trustee.
            </summary>
            <remarks>
            To simplify this class and the inputs, this ACE just uses full permissions for the trustee, so
            an "allow" ACE will grant all permissions and a "deny" ACE will deny all permissions. This should
            be fine as this is only access to the share, and the actual access to the files will be controlled
            by the computer's file system permissions which we don;t change.
            </remarks>
            <param name="scope">
            The <see cref="T:System.Management.ManagementScope"/> to create the trustee in.
            </param>
            <param name="trustee">
            The Win32_Trustee <see cref="T:System.Management.ManagementObject"/> to create the ACE for.
            </param>
            <param name="deny">
            If <b>true</b> then this is a deny ACE, else it is an allow one.
            </param>
            <returns>
            A Win32_ACE <see cref="T:System.Management.ManagementObject"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.BuildTrustee(System.Management.ManagementScope,System.String)">
            <summary>
            Builds a Win32_Trustee <see cref="T:System.Management.ManagementObject"/> for a user account.
            </summary>
            <param name="scope">
            The <see cref="T:System.Management.ManagementScope"/> to create the trustee in.
            </param>
            <param name="username">
            The username for the trustee, in the form DOMAIN\Username.
            </param>
            <returns>
            A Win32_Trustee <see cref="T:System.Management.ManagementObject"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.GetAccount(System.Management.ManagementScope,System.String,System.String)">
            <summary>
            Gets a Win32_Account <see cref="T:System.Management.ManagementObject"/> for a user.
            </summary>
            <param name="scope">
            The <see cref="T:System.Management.ManagementScope"/> to get the account from.
            </param>
            <param name="domain">
            The domain of the account.
            </param>
            <param name="alias">
            The alias of the account.
            </param>
            <returns>
            A Win32_Account <see cref="T:System.Management.ManagementObject"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Create.GetSecurityIdentifier(System.Management.ManagementScope,System.Management.ManagementObject)">
            <summary>
            Gets a Win32_SID <see cref="T:System.Management.ManagementObject"/>.
            </summary>
            <param name="scope">
            The <see cref="T:System.Management.ManagementScope"/> to get the SID from.
            </param>
            <param name="account">
            A Win32_Account <see cref="T:System.Management.ManagementObject"/> to get the SID for.
            </param>
            <returns>
            A Win32_SID <see cref="T:System.Management.ManagementObject"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Create.AllowedUsers">
            <summary>
            Gets or sets the names of the users or groups that are allowed to access the share. If no users are
            specified then everyone is given full control. The names should be in the format DOMAIN\Username.
            </summary>
            <value>
            The names of the users that are allowed to access the share.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Create.DeniedUsers">
            <summary>
            Gets or sets the names of the users or groups that are denied to access the share. If no users are
            specified then nobody is denied. The names should be in the format DOMAIN\Username.
            </summary>
            <value>
            The names of the users that are allowed to access the share.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Create.Description">
            <summary>
            Gets or sets the description of the share that is displayed to users.
            </summary>
            <value>
            The description of the share that is displayed to users.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Create.MaximumAllowed">
            <summary>
            Gets or sets the maximum number of users that are allowed to use the share. A value of zero
            indicates that there is no upper limit.
            </summary>
            <value>
            The maximum number of users that are allowed to use the share.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Create.Path">
            <summary>
            Gets or sets the physical path that the share is created at.
            </summary>
            <value>
            The physical path that the share is created at.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Create.Type">
            <summary>
            Gets or sets the type of share to create. The default is "DiskDrive".
            </summary>
            <value>
            The type of share to create.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.Exists">
            <summary>
            Checks whether a share exists on either the local or a remote machine.
            </summary>
            <remarks>
            <code><![CDATA[<Share.Exists ShareName="shareName" Machine="machine" UserName="userName" Password="password" />]]></code>
            <para>where:</para>
            <para><i>shareName (Required)</i></para>
            <para>
            The name of the share to check for.
            </para>
            <para><i>machine</i></para>
            <para>
            The name or IP address of the machine to check for the share on. The default is the local machine.
            </para>
            <para><i>userName</i></para>
            <para>
            If different credentials are needed to connect to a remote machine, this is the user name in the form 
            DOMAIN\Username. This must not be supplied for the local machine. The default is to use the same
            credentials as the user the task is running as.
            </para>
            <para><i>password</i></para>
            <para>
            The password for the user account specified by <i>userName</i>. The default is no password.
            </para>
            <para><i>DoesExist (Output)</i></para>
            <para>
            <b>true</b> if the share does exist, or <b>false</b> otherwise.
            </para>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Create"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Connect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Disconnect"/>
            </remarks>
            <example>
            The following example shows how this task may be used with the Share.Delete task to
            conditionally delete a share.
            <code><![CDATA[
            <Project>
                <PropertyGroup>
                    <SoftwareShareExists />
                </PropertyGroup>
                <Target Name="Test">
                    <Share.Exists
                        ShareName="Software" 
                        Machine="MyMachine" 
                        UserName="domain\username" 
                        Password="password1">
                        <Output TaskParameter="DoesExist" PropertyName="SoftwareShareExists" />
                    </Share.Exists>
                    <Share.Delete
                        Condition="'$(SoftwareShareExists)'=='true'"
                        ShareName="Software" 
                        Machine="MyMachine" 
                        UserName="domain\username" 
                        Password="password1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Exists.#ctor">
            <summary>
            Creates a new task to check whether a share exists.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Exists.InternalExecute">
            <summary>
            Executes the task
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Exists.DoesExist">
            <summary>
            Gets whether the share does exist.
            </summary>
            <value>
            <b>true</b> if the share does exist, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceSafe.Changes">
            <summary>
            This task does the difference of local copy and VSS and tell if anny file have been modified.
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceSafe.Changes PathDiff="path"
                        Database="database"
                        Username="username" 
                        Password="password"
                        SSVersion="ssversion"
            />]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The full path to the file or folder.</para>
            <para><i>database</i></para>
            <para>The VSS database location. This database must exist and must be a valid VSS database.</para>
            <para><i>username</i></para>
            <para>The username that will be used when labelling VSS</para>
            <para><i>password</i></para>
            <para>The password for the username specified in <i>username</i></para>
            <para><i>ssversion</i></para>
            <para>The SourceSafe version to use. Default is 6d. Supports 6d and 2005</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceSafe.Changes
                        Database="database"
                        Username="username" 
                        Password="password" 
                        PathDiff="hum.c">
                        <Output TaskParameter="ChangesFound" PropertyName="Found" />
                    </SourceSafe.Changes>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceSafe.Changes.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.Changes.SSVersion">
            <summary>
            Gets or sets the SourceSafe version.
            </summary>
            <value>The SS version.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.Ace">
            <summary>
            Abstract base class of Ace types.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.Ace.GetNativeACE">
            <summary>
             Derived classes must implement this method to return the native representation
             of the Win32 ACE as an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.Ace.OffsetOfSid">
            <summary>
             Return the offset of the "SID" struct inside this ACE.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.FtpVirtualDirectoryCollection">
            <summary>
            Summary description for FtpVirtualDirectoryCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.ExtensionPermission">
            <summary>
            Summary description for ExtensionPermission.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.AppPoolState">
            <summary>
            Summary description for AppPoolStatee.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ServiceProcess.ServiceController">
            <summary>
            Summary description for ServiceController.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Process">
            <summary>
            Represents a new Process
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Process.#ctor(System.String)">
            <summary>
            Represents a new Process
            </summary>
            <param name="fileName">Path to the exe to start</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Process.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName">Path to the exe to start</param>
            <param name="arguments">Arguments to start the process with</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Process.Start(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName">Path to the exe to start</param>
            <param name="arguments">Arguments to start the process with</param>
            <returns>True if the process started successfully</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Process.Start(System.String)">
            <summary>
            
            </summary>
            <param name="args">The arguments to start the process with</param>
            <returns>True if the process started successfully</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.UnaryLogicalOperator">
            <summary>
            Represents a unary operator (only takes one operand) such as "Not"
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User">
            <summary>
            This represents a User in the Active Directory.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.#ctor">
            <summary>
            Instantiates a default instance of the User type 
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.#ctor(System.String)">
            <summary>
            Instantiates an instance of the User type with the given parameter
            </summary>
            <param name="username">The username for this user</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.#ctor(System.String,System.String)">
            <summary>
            Instantiates an instance of the User type with the given parameters
            </summary>
            <param name="username">The username for this user</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiates an instance of the User type with the given parameters
            </summary>
            <param name="username">The username for this user</param>
            <param name="password">The password</param>
            <param name="domainName">The domain name for this user</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.Load(System.String,System.String)">
            <summary>
            Returns an instance of the User type for the given username
            </summary>
            <param name="username">The username to load from the Active Directory</param>
            <param name="domainName">The domain name to check in</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.Load(System.String)">
            <summary>
            Returns an instance of the User type for the given username
            </summary>
            <param name="username">The username to load from the Active Directory</param>
            <returns>An instance of the User type for the username provided</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.Exists(System.String,System.String)">
            <summary>
            This checks the provided Active Directory for the username provided
            </summary>
            <param name="username">The username to check for</param>
            <param name="domainName">The domain name to check in</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.Exists(System.String)">
            <summary>
            This checks the Active Directory for the username provided.
            </summary>
            <param name="username">The username to check in the Active Directory</param>
            <returns>TRUE is the username provided exists</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.GetGroupsInDirectory">
            <summary>
            Query the directory and return all the groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.Connect">
            <summary>
            Connect to the default AD login path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.User.Connect(System.String)">
            <summary>
            Connect to the specified AD login path
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CheckProductInstalled">
            <summary>
            Check that a particular product is installed, such as Microsoft Visual Studio .NET
            </summary>
            <remarks>
            <code><![CDATA[
            <CheckProductInstalled Names="names" Versions="versions" NameComparisonOperators="nameComparisonOperators" 
                                    VersionComparisonOperators="versionComparisonOperators" UnaryOperators="unaryOperators" InstalledProductsXml="installedProductsXml">
                <Output TaskParameter="Summary" ItemName="SummaryItem" />
                <Output TaskParameter="Success" ItemName="SuccessItem" />
            </CheckProductInstalled>
            ]]></code>
            <para>where:</para>
            <para><i>names (Required)</i></para>
            <para>Names of the products to be checked for, for example, "Microsoft Visual Studio .NET"
            </para>
            <para><i>versions (Required)</i></para>
            <para>The versions of products to be checked for. Wildcard can be specified as an asterisk. Version must be numeric and separated by either "." or ","
            </para>
            <para><i>nameComparisonOperators (Required)</i></para>
            <para>Name comparison operators for each of the product names speciifed in <i>names</i>. Can be any of:
                    "Equals",
                    "Contains"
                    "LessThan"
                    "GreaterThan"
                    "LessThanOrEquals"
                    "GreaterThanOrEquals"
            </para>
            <para><i>versionComparisonOperators (Required)</i></para>
            <para>Name comparison operators for each of the product versions speciifed in <i>versions</i>. Can be any of:
                    "Equals",
                    "Contains"
                    "LessThan"
                    "GreaterThan"
                    "LessThanOrEquals"
                    "GreaterThanOrEquals"
            </para>
            <para><i>unaryOperators (Required)</i></para>
            <para>Unary operators for the respective <i>nameComparisonOperators</i>, allowing (for example) "Not Equals" to be created. Can be "None" or "Not".</para>
            <para><i>installedProductsXml (Required)</i></para>
            <para>A list of the products installed on the local machine. This will typically be generated by the <seealso cref="T:Microsoft.Sdc.Tasks.GetInstalledProducts"/> task</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CheckProductInstalled
                        Names="NDoc" Versions="1.2.0" NameComparisonOperators="Equals" VersionComparisonOperators="Equals" UnaryOperators="None" InstalledProductsXml="@(InstalledProductsXmlItem)">
                                <Output TaskParameter="Summary" ItemName="SummaryItem" />
                                <Output TaskParameter="Success" ItemName="SuccessItem" />
                    </CheckProductInstalled>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CheckProductInstalled.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CheckProductInstalled.#ctor">
            <summary>
            Initializes a new instance of the CheckProductInstalled class.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.SuppressWarnings">
            <summary>
            Set to true in order to suppress warnings reported by this task 
            </summary>
            <value>true or false (defaults to false)</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.Summary">
            <summary>
            Textual summary of products found and products not found
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.Success">
            <summary>
            Success of the checking after execution.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.Names">
            <summary>
            Names of the products to be checked for.
            </summary>
            <example>Microsoft Visual Studio .NET</example>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.Versions">
            <summary>
            Versions of products to be checked for
            </summary>
            <remarks>Wildcard can be specified as an asterisk. Version must be numeric and separated by either "." or ","</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.NameComparisonOperators">
            <summary>
            Name comparison operators taken from BinaryComparisonOperator enumeration.
            </summary>
            <seealso cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.BinaryComparisonOperator"/>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.VersionComparisonOperators">
            <summary>
            Version comparison operators taken from BinaryComparisonOperator enumeration.
            </summary>
            <seealso cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.BinaryComparisonOperator"/>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.UnaryOperators">
            <summary>
            Unary operators taken from UnaryLogicalOperator enumeration.
            </summary>
            <example>Not or None</example>
            <seealso cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.UnaryLogicalOperator"/>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckProductInstalled.InstalledProductsXml">
            <summary>
            Generated by GetInstalledProducts task
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create">
            <summary>
            Creates an Active Directory group either locally or on a domain.
            </summary>
            <remarks>
            <code><![CDATA[<ActiveDirectory.Group.Create GroupName="groupName" DomainName="domainName" EnsureGroup="ensureGroup" />]]></code>
            <para>where:</para>
            <para><i>groupName (Required)</i></para>
            <para>The groupname to create.</para>
            <para><i>domainName</i></para>
            <para>The domain the group is to be added to. If not specified it defaults to the local machine.</para>
            <para><i>Description</i></para>
            <para>A description of the group.</para>
            <para><i>ensureGroup</i></para>
            <para>If TRUE and the group already exists then no error is thrown.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ActiveDirectory.Group.Create
                        GroupName="newGroup"
                        DomainName="mydomain"
                        Description="Group Description"
                        EnsureGroup="true" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.description">
            <summary>Private variable</summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.#ctor">
            <summary>
            Initializes a new instance of the Create class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.GroupName">
            <summary>
            The name of the group to be created
            </summary>
            <value>The name of the group</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.DomainName">
            <summary>
            The domain to which the group is to be added
            </summary>
            <value>The name of the domain to which the group is to be added. If not specified it defaults to the local machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.Description">
            <summary>
            A description for the group being added.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.Create.EnsureGroup">
            <summary>
            If TRUE and the Group already exists then no error is thrown.
            </summary>
            <value>True to not throw an error if the group already exists within the domain</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping">
            <summary>
            Add a user/certificate mapping
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.description">
            <summary>
            The description of the web site to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.identifier">
            <summary>
            The identifier of thw website to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.certificatePath">
            <summary>
            The path of the certificate to load to use for the mapping
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.certificatePassword">
            <summary>
            The password of the certificate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.accountUsername">
            <summary>
            The username to map to
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.accountPassword">
            <summary>
            The password of the user that is being mapped
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.accountFriendlyName">
            <summary>
            A friendly name
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.InternalExecute">
            <summary>
            map a certificate to an NT user account
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.CertificatePath">
            <summary>
            A path to a certificate that is to be mapped
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.CertificatePassword">
            <summary>
            The password of the certificate
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.AccountUsername">
            <summary>
            The username that is to be mapped
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.AccountPassword">
            <summary>
            The password of the user being mapped
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.AccountFriendlyName">
            <summary>
            A friendly name to be displayed in the mapper
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.Description">
            <summary>
            Description of web site to modify
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.Identifier">Identifier</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.Identifier">
            <summary>
            web site idenfitier to modify
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.CreateCertificateMapping.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory">
            <summary>
            Create a new ftp virtual directory if it does not exist on the specified machine and ftp site.
            </summary>
            <remarks>
            <code><![CDATA[<Web.FtpSite.CreateVirtualDirectory 
                    VirtualDirectoryName="virtualDirectoryName" 
                    Path="path"
                    AccessFlags="accessFlags"
                    FtpSiteName="ftpSiteName"
                    MachineName="machineName"
            >]]></code>
            <para>where:</para>
            <para><i>virtualDirectoryName (Required)</i></para>
            <para>A valid virtual directory name.</para>
            <para><i>path (Required)</i></para>
            <para>Fully qualified path to assign to the virtual directory.</para>
            <para><i>machineName</i></para>
            <para>Machine to create the virtual directory on. If unspecified the action will execute against the local machine.</para>
            <para><i>ftpSiteName</i></para>
            <para>The FTP site to attach the virtual directory to.</para>
            <para><i>accessFlags</i></para>
            <para>Access flags for the FTP site (either "AccessRead", "AccessWrite", or both combined)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.FtpSite.CreateVirtualDirectory
                        VirtualDirectoryName="/virtual"
                        Path="c:\inetpub\virtual"
                        AccessFlags="AccessRead"
                   />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.#ctor">
            <summary>
            Initializes a new instance of the CreateFtpVirtualDirectory class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.VirtualDirectoryName">
            <summary>
            Name for the new virtual directory
            </summary>
            <value>any valid directory name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.Path">
            <summary>
            Local, or network path to be mapped to the virtual directory
            </summary>
            <value>A valid local or network path</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.MachineName">
            <summary>
            Machine name to create the virtual directory on
            </summary>
            <value>A valid machine name. 
            If unspecified the action will execute against the local machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.FtpSiteName">
            <summary>
            FTP site name to attach the virtual directory to
            </summary>
            <value>A valid, existing FTP site name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.CreateVirtualDirectory.AccessFlags">
            <summary>
            Access flags for the new virtual directory
            </summary>
            <value>"AccessRead" or "AccessWrite" (may be combined)</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.FtpSite.Create">
            <summary>
            Create a new FTP site.
            </summary>
            <remarks>
            <code><![CDATA[<Web.FtpSite.Create
                Description="description"
                Path="path" 
                IPAddress="ipAddress"
                Port="port"
                AccessFlags="accessflags" 
                AllowAnonymous="allowAnonymous"
                AnonymousUsername="anonymousUsername"
                AnonymousPassword="anonymousPassword"
                Identifier="identifier"
                HostName="hostName"  />]]></code>
            <para>where:</para>
            <para><i>description (Required)</i></para>
            <para>A description for the FTP site to be created.</para>
            <para><i>path (Required)</i></para>
            <para>Local path to assign as the FTP root.</para>
            <para><i>ipAddress</i></para>
            <para>IP address to listen on. This can be any valid IPV4 address. 
            If this IP address is not bound to a local NIC the FTP server will not start.
            If this property is not set, the FTP site will listen on all available 
            addresses on the hosting machine.</para>
            <para><i>port</i></para>
            <para>Port for the FTP site to listen on.</para>
            <para><i>allowAnonymous</i></para>
            <para>Set to true to allow access to anonymous users</para>
            <para><i>anonymousUsername</i></para>
            <para>Account to run anonymous users under</para>
            <para><i>anonymousPassword</i></para>
            <para>Password for the anonymous users account</para>
            <para><i>accessFlags</i></para>
            <para>Access flags for the FTP site (either "AccessRead", "AccessWrite", or both combined)</para>
            <para><i>identifier</i></para>
            <para>Any non-existant FTP site identifier.</para>
            <para><i>hostName</i></para>
            <para>Host header to bind to (only valid for non-SSL sites).</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.FtpSite.Create
                        Description="TestFTP"
                        Path="c:\inetpub\testftp"
                        AllowAnonymous="false"
                        AccessFlags="AccessRead"
                       />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.Description">
            <summary>
            FTP site description
            </summary>
            <value>Any valid description for the FTP site</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.Path">
            <summary>
            Root path for the ftp site
            </summary>
            <value>Existing directory path</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.IPAddress">
            <summary>
            IP address to listen on
            </summary>
            <value>Any valid IPV4 address. 
            If this IP address is not bound to a local
            NIC the FTP server will not start.
            If this property is not set the ftp site will listen on all available 
            addresses on the hosting machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.Port">
            <summary>
            Port for the FTP site to listen on
            </summary>
            <value>A valid port number.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.Identifier">
            <summary>
            FTP site identifier
            </summary>
            <value>Any non-existant ftp site identifier</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.AccessFlags">
            <summary>
            Access flags for the FTP site
            </summary>
            <value>Can be:
            "AccessRead"
            "AccessWrite"
            These two values may be combined.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.AllowAnonymous">
            <summary>
            Allow anonymous access to the FTP site
            </summary>
            <value>True to allow anonymous access to the FTP site, otherwise false</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.AnonymousUserName">
            <summary>
            Username context to run any anonymous connections under
            </summary>
            <value>A valid NT account</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.AnonymousUserPass">
            <summary>
            Password for the <see cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.AnonymousUserName">anonymous user name</see>
            </summary>
            <value>A valid password for the anonymous account</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.HostName">
            <summary>
            Host header to bind to (only valid for non-SSL sites).
            </summary>
            <value>Host header to bind to (only valid for non-SSL sites).</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Create.UserIsolationMode">
            <summary>
            Set the UserIsolationMode of the site - defaults 0
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.AppPool.Recycle">
            <summary>
            Recycle an Application Pool
            </summary>
            <remarks>
            <code><![CDATA[<Web.AppPool.Recycle AppPoolName="appPoolName"/>]]></code>
            <para>where:</para>
            <para><i>appPoolName (Required)</i></para>
            <para>A valid, existing IIS pool name</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.AppPool.Recycle AppPoolName="TestApplicationPool"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.AppPool.Recycle.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Recycle.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Recycle.AppPoolName">
            <summary>
            Name of the application pool to check for.
            </summary>
            <value>Any valid IIS application pool name</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.RegisterVirtualMachine">
            <summary>
            TODO
            Starts a virtual machine.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Start
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout">
            </VirtualServer.VirtualMachine.Start>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be started.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the start task to complete, in milliseconds. Defaults to 10.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Start
                        MachineName="myMachine"
                        Timeout="20"
                    </VirtualServer.VirtualMachine.Start> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.RegisterVirtualMachine.#ctor">
            <summary>
            Initializes a new instance of the RegisterVirtualMachine class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.RegisterVirtualMachine.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.RegisterVirtualMachine.Timeout">
            <summary>
            Length of time to wait for the register task to complete, in seconds.
            </summary>
            <value>Length of time to wait for the start task to complete, in seconds. Defaults to 10.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.RegisterVirtualMachine.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.RegisterVirtualMachine.ConfigurationPath">
            <summary>
            The fullpath of the virtual machine to be registered with the server (including the .vmc extension).
            </summary>
            <value>The fullpath of the virtual machine to be registered.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.Load">
            <summary>
            TODO
            Loads Virtual Server info.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Start
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout">
            </VirtualServer.VirtualMachine.Start>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be started.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the start task to complete, in milliseconds. Defaults to 10.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Start
                        MachineName="myMachine"
                        Timeout="20"
                    </VirtualServer.VirtualMachine.Start> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.Load.#ctor">
            <summary>
            Initializes a new instance of the Load class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.Load.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.Load.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.Load.DefaultConfigurationPath">
            <summary>
            Default virtual machine configurations directory path. The path string returned is terminated by a trailing \ character. 
            </summary>
            <value>By default, this property value is set to the "%ALLUSERSPROFILE%\Documents\Shared Virtual Machines\" directory.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Utilities.#ctor(Microsoft.Build.Utilities.Task,System.Resources.ResourceManager)">
            <summary>
            Initializes a new instance of the Utilities class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Utilities.#ctor">
            <summary>
            Prevents a new instance of the Utilities class from being created publicly.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Utilities.SdCmd(System.String,System.String)">
            <summary>
            TODO
            </summary>
            <param name="args">TODO</param>
            <param name="message">TODO</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Utilities.CreateExceptionInformation(Microsoft.Sdc.Tasks.TaskException)">
            <summary>
            Get localised message for task exceptions
            </summary>
            <param name="taskException"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Utilities.CreateExceptionInformation(System.Exception)">
            <summary>
            Handle general exception
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles">
             <summary>
             Performs a Get from the Visual SourceSafe specified.
             </summary>
             <remarks>
             <code><![CDATA[
             <SourceSafe.GetVSSFiles
                         Database="database"
                         Username="username" 
                         Password="password" 
                         GetParameter="getParameter" 
                         Label="label" 
                         OnlyIncremementRevision="onlyIncrementRevision" 
                         Project="project"
                         VersionNumber="versionNumber"
                         VersionNumberConfigFileLocation="versionNumberConfigFileLocation"
                         VersionNumberConfigVSSLocation="versionNumberConfigVSSLocation"
                         WorkingDirectory="workingDirectory" >
                         SSVersion="ssversion">
             </SourceSafe.GetVSSFiles>
             ]]></code>
             <para>where:</para>
             <para><i>database</i></para>
             <para>The VSS database location. This database must exist and must be a valid VSS database.</para>
             <para><i>username</i></para>
             <para>The username that will be used when labelling VSS</para>
             <para><i>password</i></para>
             <para>The password for the username specified in <i>username</i></para>
             <para><i>getParameter</i></para>
             <para>Allows a specific version of files/projects to be supplied</para>
             <para><i>label</i></para>
             <para>Label to use when getting a particular version.</para>
             <para><i>onlyIncremementRevision</i></para>
             <para>Force Revision only change. So 2.0.1188.14 would be 2.0.1188.15 on the next automatic label from the source control system.</para>
             <para><i>project</i></para>
             <para>The VSS style syntax for project location.</para>
             <para><i>versionNumber</i></para>
             <para>If specified then $(VersionNumber) is set to this value and replaced as appropriate in the xml config file</para>
             <para><i>versionNumberConfigFileLocation</i></para>
             <para>Fully Qualified file name to the xml config file. The file contains, in Xml format, the major, minor, build and revision number.</para>
             <para><i>ssversion</i></para>
             <para>The SourceSafe version to use. Default is 6d. Supports 6d and 2005</para>
             
             For example:
             <example>
             <code><![CDATA[
             <?xml version="1.0" encoding="utf-8"?>
                 <configuration>
                     <appSettings>
                         <add key="major" value="1" />
                         <add key="minor" value="2" />
                         <add key="build" value="1354" />
                         <add key="revision" value="155" />
                     </appSettings>
                 </configuration>
             ]]></code>    
             </example>
            
             <para><i>versionNumberConfigVSSLocation</i></para>
             <para>The path to the config file specified in <i>versionNumberConfigFileLocation</i> inside VSS, using VSS-style notation.</para>
             <para><i>workingDirectory</i></para>
             <para>The full path to the working directory on the local machine for the cod</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <SourceSafe.GetVSSFiles
                         Database="database"
                         GetParameter="getParameter" 
                         Label="label" 
                         OnlyIncremementRevision="onlyIncrementRevision" 
                         Project="project"
                         VersionNumber="versionNumber"
                         VersionNumberConfigFileLocation="versionNumberConfigFileLocation"
                         VersionNumberConfigVSSLocation="versionNumberConfigVSSLocation"
                         WorkingDirectory="workingDirectory" >
                     </SourceSafe.GetVSSFiles> 
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.VSSGet">
            <summary>
            VSSs the get.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.SSVersion">
            <summary>
            Gets or sets the SourceSafe version.
            </summary>
            <value>The SS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.GetParameter">
            <summary>
            Gets or sets the get parameter.
            </summary>
            <value>The get parameter.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.VersionNumber">
            <summary>
            Gets or sets the version number.
            </summary>
            <value>The version number.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.VersionNumberConfigFileLocation">
            <summary>
            Gets or sets the version number config file location.
            </summary>
            <value>The version number config file location.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.VersionNumberConfigVSSLocation">
            <summary>
            Gets or sets the version number config VSS location.
            </summary>
            <value>The version number config VSS location.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.GetVSSFiles.OnlyIncrementRevision">
            <summary>
            Gets or sets a value indicating whether [only increment revision].
            </summary>
            <value>
            	<c>true</c> if [only increment revision]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ServiceProcess.Exists">
            <summary>
            Returns TRUE if a service exists
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.Exists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Exists.ServiceName">
            <summary>
            The short name that identifies the service to the system.
            </summary>
            <value>The short name that identifies the service to the system, e.g. "W3SVC". This service must exist on the local computer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Exists.DoesExist">
            <summary>
            Returns TRUE if the service specified exists
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Exists.IsDisabled">
            <summary>
            Returns TRUE if the service is disabled
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.PseudoBuildEngine">
            <summary>
            This is our Pseudo BuildEngine Class
            this lets us call task execute methods from outside msbuild
            Must implement these methods:
                    BuildProjectFile
                    LogBuildEvent
                    GetDescriptiveErrorMessage
                    
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.Aces">
            <summary>
            A strongly typed collection of Ace types
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.Performance">
            <summary>
            Summary description for Performance.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Performance.IdleTimeout">
            <summary>
            Idle Timeout in minutes. Default is 20.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Performance.RequestQueueLimit">
            <summary>
            Kernal Request Queue limit in number of requests. Default is 1000.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Performance.CpuMaximumUse">
            <summary>
            Maximum CPU use (percentage). Set to 0 to disable CPU monitoring.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Performance.CpuRefreshInterval">
            <summary>
            Refresh CPU usage numbers (in minutes). Set to 0 to disable CPU monitoring.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Performance.WorkerProcesses">
            <summary>
            Maximum number of worker processes. Default is 1.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.HttpHeaders">
            <summary>
            Represents the list of configured allowable HttpHeaders in a WebSite (todo, should be a site or VDIR)
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Web.HttpHeaders.Exists(System.String,System.String)">
            <summary>
            Check if a given mime type exists
            </summary>
            <param name="headerName"></param>
            <param name="headerValue">Mime type to look for</param>
            <returns>true if the mime type exists</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.CodeCoverageSectionGenerator">
            <summary>
            Summary description for CodeCoverageSectionGenerator.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.ISectionGenerator">
            <summary>
            Summary description for SectionGenerator.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.CodeCoverageSectionGenerator.GenerateSection(System.String,System.String,System.String)">
            <summary>
            Create a CoverageEye section within the report
            </summary>
            <param name="sourceFolder"></param>
            <param name="fileSpec"></param>
            <param name="name">Optional name for the section</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application">
            <summary>
            This type represents a COM+ Application.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.Delete(System.String,System.String)">
            <summary>
            Deletes an application and all its components
            </summary>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.Delete(System.String)">
            <summary>
            Deletes an application and all its components
            </summary>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddComponent(System.String,System.String)">
            <summary>
            Adds a component to the application
            </summary>
            <param name="path">This is case sensitive. It is the fully qualified path the the dll</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddComponent(System.String,System.String,System.String)">
            <summary>
            Adds a component to the application
            </summary>
            <param name="path">This is case sensitive. It is the fully qualified path the the dll</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddRole(System.String,System.String)">
            <summary>
            Adds a role to the application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddRole(System.String,System.String,System.String)">
            <summary>
            Adds a role to the application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RoleExists(System.String,System.String)">
            <summary>
            Returns true if the role exists in the application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RoleExists(System.String,System.String,System.String)">
            <summary>
            Returns true if the role exists in the application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddUserToRole(System.String,System.String,System.String)">
            <summary>
            Adds a user to the application role
            </summary>
            <param name="username">The name of the user to add</param>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddUserToRole(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a user to an application role, inside of an application.
            </summary>
            <param name="username">The name of the user to add</param>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.UserExistsInRole(System.String,System.String,System.String)">
            <summary>
            Returns true if the role exists in the application role
            </summary>
            <param name="username">The name of the user</param>
            <param name="rolename">The name of the role</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.UserExistsInRole(System.String,System.String,System.String,System.String)">
            <summary>
            Returns true if the role exists in the application role
            </summary>
            <param name="username">The name of the user to add</param>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddRoleToComponent(System.String,System.String)">
            <summary>
            Adds a role to a particular all components in an application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddRoleToComponent(System.String,System.String,System.String)">
            <summary>
            Adds a role to a particular one component in an application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="ComponentName">The name of the component to add the role to</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddRoleToComponent(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a role to a particular one or all components in an application
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="ComponentName">The name of the component to add the role to, if left blank adds to all components</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RoleOnComponentExists(System.String,System.String,System.String)">
            <summary>
            Does a role on a particular one or all components in an application exist?
            BUG: Does not work, the ability to surfice this information is not working as desired.
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="ComponentName">The name of the component to add the role to</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RoleOnComponentExists(System.String,System.String)">
            <summary>
            Does a role on a particular one or all components in an application exist?
            BUG: Does not work, the ability to surfice this information is not working as desired.
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RoleOnComponentExists(System.String,System.String,System.String,System.String)">
            <summary>
            Does a role on a particular one or all components in an application exist?
            BUG: Does not work, the ability to surfice this information is not working as desired.
            </summary>
            <param name="rolename">The name of the role to add</param>
            <param name="ComponentName">The name of the component to add the role to, if blank all components will be checked.</param>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="machineName">Use localhost to check your local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.UpdateApplication(System.String,System.String,System.String,System.Boolean,Microsoft.Sdc.Tasks.Configuration.ComponentServices.Activation,System.Boolean,System.String)">
            <summary>
            Updated the information on an application.
            </summary>
            <param name="applicationName">This is case sensitive. If applicationName exists multiple times then all matches will all be deleted</param>
            <param name="identity">The name of the user identity</param>
            <param name="password">The password of the user identity</param>
            <param name="enforceAccessChecks">Boolean to set enforceAccessChecks</param>
            <param name="activation">The type of activation, inproc or out of proc</param>
            <param name="runForever">Boolean to set run for ever</param>
            <param name="shutdownAfter">Shutdown after</param>		
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AddComponentValidAssembly(System.String,System.String)">
            <summary>
            used for a .net component to add a vaild assembly, that would specify it's own application group
            </summary>
            <param name="path">The full path to the assembly dll</param>
            <param name="runtime">The run time version of the dll</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RemoveComponentValidAssembly(System.String,System.String)">
            <summary>
            Used for a .net component to remove a vaild assembly, that would specify it's own application group
            if this returns false, call the previous version of remove component.
            </summary>
            <param name="path">The full path to the assembly dll</param>
            <param name="runtime">The run time version of the dll</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.Password">
            <summary>
            Sets the password used by the server process to log on under the identity. Password should be set at the same time as Identity, because the password and identity are validated before being saved. If the password and identity get out of sync, the application cannot be launched until they are reset by an administrator.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.Identity">
            <summary>
            Sets the server process identity for the application. Specify a valid user account or "Interactive User" to have the application assume the identity of the current logged-on user. This is not enabled for library applications, which run in the client process. The Password property should be set at the same time as Identity, because the password and identity are validated before being saved. If the password and identity get out of sync, the application cannot be launched until they are reset by an administrator. 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.Name">
            <summary>
            The name of the application. Extra spaces at the beginning and end of the string are stripped out. Unique names should be chosen for applications. If multiple applications are created with the same name, it can interfere with referencing the applications by name, resulting in unpredictable behavior. 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.ApplicationId">
            <summary>
            A GUID representing the application. ApplicationID is ReadWrite whilst creating a new Application and readonly afterwards.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.AccessChecksEnabled">
            <summary>
            Indicates whether access checks are performed for the application when clients make calls into it. 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.Activation">
            <summary>
            Local activation indicates that objects within the application run within a dedicated local server process (server application). In-process activation indicates that objects run in their creator's process (library application). Defaults to local.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.ShutdownAfter">
            <summary>
            Sets the delay before shutting down a server process after it becomes idle. Shutdown latency ranges from 0 to 1440 minutes (24 hours). If RunForever is set to True, this property is ignored. ShutdownAfter is not enabled for library (in-process) applications.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Application.RunForever">
            <summary>
            Enables a server process to continue if an application is idle. If set to True, the server process does not shut down when left idle. If set to False, the process shuts down according to the value set by the ShutdownAfter property. RunForever is not enabled for library (in-process) applications.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Activation">
            <summary>
            Summary description for Activation.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Application.Shutdown">
            <summary>
            Performs a shutdown on the specified ComponentServices Application.
            </summary>
            <remarks>
            <code><![CDATA[<ComponentServices.Application.Shutdown ApplicationName="applicationName" OnlyIfExists="onlyIfExists"/>]]></code>
            <para>where:</para>
            <para><i>applicationName (Required)</i></para>
            <para>The name of the COM+ application to be shutdown. If the application name exists multiple times then all matches will all be deleted.</para>
            <para><i>onlyIfExists</i></para>
            <para>If set to true, the application will only by shutdown if it exists. If set to false, the task will return an error if the application is not found</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Application.Shutdown ApplicationName="MyApplicationName" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Application.Shutdown.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Shutdown.ApplicationName">
            <summary>
            Gets or sets the name of the COM+ application to be shutdown
            </summary>
            <value>The name of the application that will be shutdown</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Shutdown.OnlyIfExists">
            <summary>
            Gets or sets a value indicating whether [only if exists].
            </summary>
            <value><c>true</c> if [only if exists]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.LabelSync">
            <summary>
            Sync the label specified with the current Workspace
            </summary>
            <remarks>
            <code><![CDATA[<SourceTfs.LabelSync Label="label" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory"/>]]></code>
            <para>where:</para>
            <para><i>label (Required)</i></para>
            <para>The label to sync to.</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.LabelSync
                        Label="ConfigMainLatest" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.LabelSync.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.LabelSync.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.LabelSync.OutputFolder">
            <summary>
            Gets or sets the path to the folder to write the sync command output to. If not specified it won't be written to a file.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.LabelSync.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.LabelSync.Path">
            <summary>
            Gets or sets the path to the file or folder.
            </summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.LabelSync.Label">
            <summary>
            Gets or sets the  label to sync to
            </summary>
            <value>The label to sync to</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime">
            <summary>
            Returns a Changelist number for a given DateTime and Team Source filespec.
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.GetChangelistFromDateTime Path="path" DateTime="dateTime" Culture="culture" TfsVersion="tfsVersion"/>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The full path to the depot.</para>
            <para><i>dateTime (Required)</i></para>
            <para>The datetime to check for the last changelist.</para>
            <para><i>culture</i></para>
            <para>The CultureInfo <seealso cref="T:System.Globalization.CultureInfo"/> to use for the <i>dateTime</i> conversion.</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.GetChangelistFromDateTime
                        Path="//depot/MyProduct/Main/Src/..."
                        DateTime="2003/05/01" >
                        <Output TaskParameter="ChangeList" PropertyName="ChangeListItem" />
                    </SourceTfs.GetChangelistFromDateTime>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime.Changelist">
            <summary>
            Gets or sets the changelist.
            </summary>
            <value>The changelist.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime.Path">
            <summary>
            Gets or sets the path to the file or folder.
            </summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime.DateTime">
            <summary>
            Gets or sets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromDateTime.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser">
            <summary>
            Adds an Active Directory User to either a domain group or a local group.
            </summary>
            <remarks>
            <code><![CDATA[<ActiveDirectory.Group.AddUser 
                UserName="userName" 
                GroupName="groupName" 
                UserDomain="userDomain" 
                GroupDomain="groupDomain"
                GroupMachine="groupMachine"
                EnsureUserIsInGroup="ensureUserIsInGroup" />]]></code>
            <para>where:</para>
            <para><i>userName (Required)</i></para>
            <para>The name of the user to add to the group.</para>
            <para><i>groupName (Required)</i></para>
            <para>The groupname to add the user to.</para>
            <para><i>userDomain</i></para>
            <para>The domain the user belongs to. If not specified it defaults to the local machine.</para>
            <para><i>groupDomain</i></para>
            <para>The domain the group belongs to. Specify either this or GroupMachine. If neither are specified then a group on the local machine is assumed.</para>
            <para><i>groupMachine</i></para>
            <para>The machine the group belongs to. Specify either this or GroupDomain. If neither are specified then a group on the local machine is assumed.</para>
            <para><i>ensureUserIsInGroup</i></para>
            <para>If "true" and the User is already in the group then no error is thrown. If false, an error will 
            be thrown if the specified user is already a member of the specified group. Defaults to false. </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ActiveDirectory.Group.AddUser
                        UserName="user1"
                        GroupName="Domain Administrators"
                        UserDomain="mydomain"
                        GroupDomain="mydomain"
                        EnsureUserIsInGroup="true" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>        
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.GroupMachine">
            <summary>
            The machine the the group is on. 
            </summary>
            <value>If not specified, and GroupDomain not specified then a local group is assumed.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.EnsureUserIsInGroup">
            <summary>
            If "true" and the User is already in the group then no error is thrown.
            </summary>
            <value>Set to "true" to not throw an error if the user is already in the group</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.UserName">
            <summary>The name of the user to add to the group.</summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.GroupName">
            <summary><para>The groupname to add the user to.</para>
            </summary>
            <value>The name of the group.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.UserDomain">
            <summary>The domain the user belongs to. If not specified it defaults to the local machine.</summary>
            <value>The user's domain.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddUser.GroupDomain">
            <summary><para>The domain the group belongs to.</para>
            </summary>
            <value>The name of the groups domain.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Xml.XslTransform">
             <summary>
             Xsl an Xml file. This version is quite simplistic and doesn't support
             chaining or parameters.
             </summary>
             <remarks>
             <code><![CDATA[
             <Xml.XslTransform
                         XmlFile="xmlFile"
                            Path="path"
                            Output="output"
                         XslFile="xslFile"
                         ResultFile="resultFile"
                            Extension="extension"
             </Xml.XslTransform>
             ]]></code>
             <para>where:</para>
             <para><i>xmlFile (Optional)</i></para>
             <para>The full path and filename of the xml file to be transformed.  This is only used in conjunction with the ResultFile property.</para>
             <para><i>xslFile (Required)</i></para>
             <para>The full path and filename of the xsl file to be used in the transformation.</para>
             <para><i>path (Optional)</i></para>
             <para>The path to a folder containing xml files that require transforming.  This is only used in conjunction with the Output property.</para>
             <para><i>output (Optional)</i></para>
             <para>The path to a folder where transformed files will be placed.  This is only used in conjunction with the Path property.</para>
             <para><i>resultFile (Optional)</i></para>
             <para>The full path and filename of the result of the transformation. This file will be created if it does not exist.  This is only used in conjunction with the XmlFile property.</para>
             <para><i>extension (Optional)</i></para>
             <para>The file extension to give to the transformed files.  If unspecified the transformed files are automatically given an xml extension.  This is only used in conjunction with the Path and Output properties.</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <Xml.XslTransform
                         XmlFile="C:\SourceFiles\file1.xml"
                         XslFile="C:\SourceFiles\Transform.xsl"
                         ResultFile="C:\TransformedFiles\Output.htm"
                     </Xml.XslTransform> 
            
                     <Xml.XslTransform
                         Path="C:\SourceFiles"
                         XslFile="C:\SourceFiles\Transform.xsl"
                         Output="C:\TransformedFiles"
                     </Xml.XslTransform> 
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Xml.XslTransform.xslFile">
            TODO: What this should do is allow Xml strings as input and xml strings as output
            but that would require more complexity as a "WriteToFile" task would be needed.
            It should also support parameters being passed into the XSL.
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.XslTransform.#ctor">
            <summary>
            Initializes a new instance of the Xsl class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.XslTransform.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.XslTransform.XslFile">
            <summary>
            The full path and filename of the xsl file to be used in the transformation.
            </summary>
            <value>The full path and filename of the xsl file to be used in the transformation.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.XslTransform.XmlFile">
            <summary>
            The full path and filename of the xml file to be transformed.
            </summary>
            <value>The full path and filename of the xml file to be transformed.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.XslTransform.ResultFile">
            <summary>
            The full path and filename of the result of the transformation.
            </summary>
            <value>The full path and filename of the result of the transformation. This file will be created if it does not exist.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.XslTransform.Path">
            <summary>
            The full path to a folder containing xml files requiring transformation.
            </summary>
            <value>The full path of the transformation source folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.XslTransform.Output">
            <summary>
            The full path to a folder where transformed files will be placed.
            </summary>
            <value>The full path to the output folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.XslTransform.Extension">
            <summary>
            The file extension to give to transformed files.
            </summary>
            <value>The file extension given as 'htm'.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Create">
            <summary>
            Create a new web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Create 
                Description="description"
                Path="path"
                MachineName="machineName" 
                AuthFlags="authFlags"
                AppPoolId="appPoolId"
                HostName="hostName"
                Identifier="identifier"
                IPAddress="ipAddress"
                Port="port"
                LogFileDir="logFileDir"
                DirBrowseFlags="dirBrowseFlags"
                DefaultDocs="defaultDocs"
            />]]></code>
            <para>where:</para>
            <para><i>description (Required)</i></para>
            <para>Web site description to continue.</para>
            <para><i>path (Required)</i></para>
            <para>Local path to assign as the web root.</para>
            <para><i>ipaddress</i></para>
            <para>IP address the new site should listen on.</para>
            <para><i>port</i></para>
            <para>Port number to listen on.</para>
            <para><i>hostName</i></para>
            <para>Host header to bind to (only valid for non-SSL sites).</para>
            <para><i>identifier</i></para>
            <para>Web site identifier to continue.</para>
            <para><i>authFlags</i></para>
            <para>Authentication flags to apply to the site.</para>
            <para><i>logFileDir</i></para>
            <para>Local path to assign as the folder that contains the log files.</para>
            <para><i>appPoolId</i></para>
            <para>Application pool to run the site within (IIS6 only).</para>
            <para><i>dirBrowseFlags</i></para>
            <para>Directory browsing flags to apply to the site.</para>
            <para><i>DefaultDocs</i></para>
            <para>Document names allowed as default document for the site.</para>
            <para><i>machineName</i></para>
            <para>Machine to operate on(defaults to localhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Create 
                        Description='My New Site'
                        Path='$(CurrentFolder)\Solution\Secure'/>
                </Target>
                <Target Name="TestWithDefaultDoc" >
                    <Web.WebSite.Create 
                        Description='My New Site'
                        Path='$(CurrentFolder)\Solution\Secure'
                        DirBrowseFlags="EnableDefaultDoc"
                        DefaultDocs="Default.aspx;Default.html;index.html;index.htm" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.Force">
            <summary>
            Gets or sets a value indicating whether to Delete a website if it exists.
            </summary>
            <value><c>true</c> if force; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.Description">
            <summary>
            Gets or sets the Description of web site to apply binding to
            </summary>
            <value>A valid web site description</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.Path">
            <summary>
            Gets or sets the Root path for the web site
            </summary>
            <value>Existing directory path</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.IPAddress">
            <summary>
            Gets or sets the IP address to bind web site.
            </summary>
            <value>A value IP address</value>
            <remarks>If this property is not specified the web site will listen on all 
            available IP addresses</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.Port">
            <summary>
            Gets or sets the Port number to listen on
            </summary>
            <value>A value port number</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.HostName">
            <summary>
            Gets or sets the IP address to bind web site.
            </summary>
            <value>A value IP address</value>
            <remarks>If this property is not specified the web site will listen on all 
            available IP addresses</remarks> 
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.Identifier">
            <summary>
            Gets or sets the Web site identifier
            </summary>
            <value>Any non-existant web site identifier</value>
            <remarks>If this property is not defined a web site identifier will be generated 
            on site creation.</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.AuthFlags">
            <summary>
            Gets or sets the Authentication methods for the site
            </summary>
            <value>A combination of </value>
            <value>NTLM </value>
            <value>Anonymous </value>
            <value>Basic </value>
            <value>Digest</value>
            <remarks>If unspecified the site will default to anonymous and NTLM</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.AppPoolId">
            <summary>
            Gets or sets the Application Pool Identifier
            </summary>
            <value>Application pool to run the web site under</value>
            <remarks>IIS6 and above only</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.AnonymousUsername">
            <summary>
            Gets or sets the anonymous username.
            </summary>
            <value>The anonymous username.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.AnonymousPassword">
            <summary>
            Gets or sets the anonymous password.
            </summary>
            <value>The anonymous password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.HttpExpires">
            <summary>
            Gets or sets the Number of hours after which the content needs to be expired
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.LogFileDir">
            <summary>
            Gets or sets the Path to log folder
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.DirBrowseFlags">
            <summary>
            Gets or sets the Directory browsing settings for this site.  Use None alone to clear all flags.
            </summary>
            <value>A combination of</value>
            <value>None</value>
            <value>ShowDate</value>
            <value>ShowExtension</value>
            <value>ShowLongDate</value>
            <value>ShowSize</value>
            <value>ShowTime</value>
            <value>EnableDefaultDoc</value>
            <value>EnableDirBrowsing</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Create.DefaultDocs">
            <summary>
            Gets or sets the Default documents list.  DirBrowseFlags must have EnableDefaultDoc for this list to be in effect.
            </summary>
            <value>Semicolon-delimited list of default document names in order of precedence.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter">
            <summary>
            Adds a new host/ip binding to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.DeleteFilter 
                HostName="hostname" 
                Identifier="identifier"
                Description="description"
                FilterName="filterName"
                FilterPath="filterPath" />]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description to apply binding to</para>
            <para><i>identifier</i></para>
            <para>Web site identifier to apply binding to</para>
            <para><i>FilterName (Required)</i></para>
            <para>Name of new ISAPI filter</para>
            <para><i>FilterPath (Required)</i></para>
            <para>Path to new Filter executable</para>
            <para><i>hostname</i></para>
            <para>Host on which to add filter (defaults to loaclhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.DeleteFilter
                        Desciption="mytestsite"
                        FilterName="Quova Filter"
                        FilterPath="c:\Program Files\Quova\Quova.dll"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.FilterName">
            <summary>
            Name for new ISAPI Filter
            </summary>
            <value>A valid filter description</value>
            <remarks>required</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.Description">
            <summary>
            Description of web site to which we are adding the filter
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.Identifier">
            <summary>
            web site idenfitier for website to which we are adding the filter
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteFilter.Description">Description</seealso> 
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Exists">
            <summary>
            Checks is a website exists
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Exists (Description="description"  || 
              Identifier="identifier">)]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>A valid web site identifier</para>
            <para><b>You must specify either a description or an identifier</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Exists
                        Description="testwebsite">
                        <Output TaskParameter="DoesExist" PropertyName="WebSiteExists"/>
                    </Web.WebSite.Exists>
                    <Web.WebSite.Delete
                        Identifier="654321">
                        <Output TaskParameter="DoesExist" PropertyName="WebSiteExists"/>
                    </Web.WebSite.Exists>
                </Target>
            </Project>
            ]]></code> 
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Exists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Exists.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Exists.Description">
            <summary>
            Description of web site to delete
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Exists.Identifier">Identifier</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Exists.Identifier">
            <summary>
            web site idenfitier to delete
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Exists.Description">Description</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Exists.DoesExist">
            <summary>
            Gets whether the web site does exist.
            </summary>
            <value>true if the web site exists, or false otherwise.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader">
            <summary>
            Adds a new Http Custom Header to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.AddhttpCustomHeader 
                Description="description"
                HeaderName="headerName"
                HeaderValue="headerValue"
                MachineName="machineName"/>]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description to add the Http Custom Header to</para>
            <para><i>identifier</i></para>
            <para>optional parameter to identify website when 'description' is not used</para>
            <para><i>HeaderName (Required)</i></para>
            <para>Name for the new custom header</para>
            <para><i>HeaderValue (Required)</i></para>
            <para>Http Custom Header string</para>
            <para><i>machineName</i></para>
            <para>Machine to operate on(defaults to localhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.AddhttpCustomHeader
                        Description="DcPortal"
                        HeaderName="pics-label"
                        HeaderValue='PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true for "http://www.bbc2.co.uk" r (nz 1 vz 1 lz 1 oz 1 cb 1)'/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.HeaderValue">
            <summary>
            File extension for Http Custom Header
            </summary>
            <value>extension</value>
            <remarks>required</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.Description">
            <summary>
            Description of web site to which we are adding the filter
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="F:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.headerName">headerName</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.HeaderName">
            <summary>
            web site idenfitier for website to which we are adding the filter
            </summary>
            <value>A valid web site headerName</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddhttpCustomHeader.Description">Description</seealso> 
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.ToolTaskBase">
            <summary>
            A base class for all tasks that call an external exe.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.AppendSwitchWhenTrue(Microsoft.Build.Utilities.CommandLineBuilder,System.String,System.String)">
            <summary>
            Appends the switch to the commandLine if parameterName is true.
            </summary>
            <param name="commandLine">The commandline builder to append to.</param>
            <param name="switchName">The switch to add.</param>
            <param name="parameterName">The parameterName to check to see if its true.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.AppendSwitchAndValueWhenNotStringEmpty(Microsoft.Build.Utilities.CommandLineBuilder,System.String,System.String)">
            <summary>
            Appends the switch and the parameters value if the parameterName is not String.Empty.
            </summary>
            <param name="commandLine">The commandline builder to append to.</param>
            <param name="switchName">The switch to add.</param>
            <param name="parameterName">The parameterName to extract the value from the PropertyBag.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.AppendSwitchAndValueWhenNotStringEmpty(Microsoft.Build.Utilities.CommandLineBuilder,System.String,System.String,System.String)">
            <summary>
            Appends the switch and the parameters value if the parameterName is not String.Empty.
            </summary>
            <param name="commandLine">The commandline builder to append to.</param>
            <param name="switchName">The switch to add.</param>
            <param name="parameterName">The parameterName to extract the value from the PropertyBag.</param>
            <param name="separator">The string to use between the switch and the value.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.Execute">
            <summary>
            Main execute method. Handles bubbled up exceptions and will log the errors along
            with all the public properties of the task.
            </summary>
            <remarks>
            This method is sealed to prevent accidental implementations based on the previous pattern.
            Instead subclasses should implement the InternalExecute method.
            </remarks>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.Utilities">
            <summary>
            A helper Utilities class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.ToolTaskBase.ExitCode">
            <summary>
            Returns the ExitCode from the underlying tool that we called.
            </summary>
            <value>0 genenrally indicts success but some tools may not return the value correctly.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.GenerateKey.#ctor">
            <summary>
            Initializes a new instance of the GenerateKey class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.GenerateKey.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of Sn.exe</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.GenerateKey.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.GenerateKey.DestinationKeyFile">
            <summary>The path to the snk file to generate</summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.GenerateKey.Runtime">
            <summary>The runtime version to use for the signing i.e. 1.0, 1.1 or 2.0 </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.GenerateKey.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.Access.Revoke">
            <summary>
            Revokes login access to the specified SQL 
            </summary>
            <remarks>
            <code><![CDATA[<Sql.Access.Revoke UserName="userName" ServerName="serverName" />]]></code>
            <para>where:</para>
            <para><i>userName (Required)</i></para>
            <para>The login name to grant access to.</para>
            <para><i>ConnectionString</i></para>
            <para>A valid connection string used to connect the SQL server to run the operation on.</para>
            <para><i>ServerName</i></para>
            <para>The server to revoke access to (used instead of <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/>)</para>
            <para><i>ConnectionTimeout</i></para>
            <para>Number of seconds to wait before failing a connection attempt. 
            Used if a <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/> is not specified.</para>
            <para><i>CommandTimeout</i></para>
            <para>Number of seconds to wait before failing the revoke request. </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.Access.Revoke
                        UserName="testUser"
                        ServerName="(local)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.SqlBase">
            <summary>
            This base class provides common properties for all SQL configuration tasks.
            </summary>
            <remarks>
            <para>As this class is an abstract class it cannot be created directly.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.SqlBase.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.SqlBase.BuildConnectionString">
            <summary>
            Builds a suitable connection string from the exposed, common properties
            </summary>
            <returns>An OLE/DB connection string</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ServerName">
            <summary>
            SQL Server to perform the specified operation upon.
            </summary>
            <value>A valid SQL server or instance name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString">
            <summary>
            An OLE/DB database connection string
            </summary>
            <value>A valid OLE/DB connection string used to connect the SQL server to run the operation on.</value>
            <remarks>This property can be used instead of, or in addition the combination of 
            <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ServerName"/> and
            <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionTimeout"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SqlBase.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the 
            attempt to execute a command and generating an error.
            </summary>
            <value>0 (for no timeout), or a positive integer (seconds)</value>
            <remarks>
            The default value for CommandTimeout is 30 seconds.
            An attempt to set a negative value will result in an <exception cref="T:System.ArgumentOutOfRangeException"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the 
            attempt to connect to a server.
            </summary>
            <value>0 (for no timeout), or a positive integer (seconds)</value>
            <remarks>
            The default value for ConnectionTimeout is 15 seconds.
            An attempt to set a negative value will result in an <exception cref="T:System.ArgumentOutOfRangeException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Access.Revoke.#ctor">
            <summary>
            Initializes a new instance of the DeleteSqlLogin class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Access.Revoke.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Access.Revoke.UserName">
            <summary>
            Login account to revoke access to
            </summary>
            <value>A valid login account, in the form machine\username</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.ClearAllPools">
            <summary>
            Clear all connections in the Sql Connection Pools
            </summary>
            <remarks>
            <code><![CDATA[<Sql.ClearAllPools />]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.ClearAllPools />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.ClearAllPools.#ctor">
            <summary>
            Initializes a new instance of the ClearAllPools class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.ClearAllPools.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.NativeMethods">
            <summary>
            Summary description for NativeMethods.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.NativeMethods.#ctor">
            <summary>
            Prevents a new instance of the NativeMethods class being instantiated.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.NativeMethods.SetEnvironmentVariableEx(System.String,System.String)">
            <summary>
            This demands permissions to set an environment variable and then sets
            it on the current process
            </summary>
            <param name="environmentVariable">Name of variable</param>
            <param name="variableValue">Value of variable</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.NativeMethods.CreateAssemblyCache(Microsoft.Sdc.Tasks.NativeMethods.IAssemblyCache@,System.Int32)">
            <summary>
            Fusion function to get an IAssemblyCache interface.
            </summary>
            <param name="ppAsmCache">
            An output parameter that will return the IAssemblyCache interface.
            </param>
            <param name="dwReserved">
            Reserved and must be zero.
            </param>
            <returns>
            A return code where zero is success and anything else is a COM
            failure code.
            </returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.NativeMethods.RpcImpLevel">
            <summary>
            Define RPC_C_IMP_LEVEL constants
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.NativeMethods.IAssemblyCache">
            <summary>
            The IAssemblyCache interface.
            </summary>
            <remarks>
            Defined in Microsoft KB article 317540.
            http://support.microsoft.com/default.aspx?scid=kb;en-us;317540
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ServiceProcess.Stop">
            <summary>
            Stops a Win32 Service on the local computer.
            </summary>
            <remarks>
            <code><![CDATA[<ServiceProcess.Stop ServiceName="serviceName" />]]></code>
            <para>where:</para>
            <para><i>serviceName (Required)</i></para>
            <para>The short name that identifies the service to the system.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ServiceProcess.Stop
                        ServiceName="W3SVC" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.Stop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Stop.Timeout">
            <summary>
            Time to wait for stop to complete. 0 to not wait. Set in seconds. If timeout is non-zero and it hasn't stopped by then it throws an error.
            </summary>
            <value>int</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Stop.ServiceName">
            <summary>
            The short name that identifies the service to the system
            </summary>
            <value>The short name that identifies the service to the system, e.g. "W3SVC".</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.InsertBase">
            <summary>
            Inserts a node into a hhc project.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.CreateProject SourceFolder="folder" />
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertBase.InsertStart(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="contents"></param>
            <param name="insertParent">TRUE if you are inserting as a parent so it can append a UL tag on the end</param>
            <param name="insertAfter">TRUE if you are inserting after the found node, FALSE to insert before it</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertBase.ContentsFilePath">
            <summary>
            The filename of the hhc file holding the contents
            </summary>
            <value>Must be a filename i.e. documentation.hhc.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertBase.StartNodeName">
            <summary>
            The Name of the Node to insert the parent around
            </summary>
            <value>Must be a valid Node Name.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertBase.StartNodeLocal">
            <summary>
            The Name of the Node to insert the parent around
            </summary>
            <value>Must be a valid Node Local value.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertBase.InsertNodeName">
            <summary>
            The Name of the Node to insert the parent around
            </summary>
            <value>Must be a valid Node Name.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertBase.InsertNodeLocal">
            <summary>
            The Name of the Node to insert the parent around
            </summary>
            <value>Must be a valid Node Local value.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion">
            <summary>
            Sets an extended property 'DatabaseVersionNumber' on the database specified in the connection string. This can be used in
            conjunction with 'GetDatabaseVersion' to control db initialization/upgrade scripts in installers etc.
            </summary>
            <remarks>
            <code><![CDATA[<Sql.Execute DatabaseVersion="versionNumber" ServerName="serverName" DatabaseName="database" ConnectionString="oleDBConnectionString" CommandTimeout="timeout" />]]></code>
            <para>where:</para>
            <para><i>serverName</i></para>
            <para>The server hosting the database (ignored if a connection string is supplied)</para>
            <para><i>databaseName</i></para>
            <para>The database (ignored if a connection string is supplied)</para>
            <para>If you do not specify a server and database name you must specify a 
            <see cref="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.ConnectionString">connection string</see>.</para>
            <para><i>connectionString</i></para>
            <para>An OLE/DB connection string detailing the connection parameters required.</para>
            <para>If you do not specify a connection string you must specify a
            <see cref="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.ServerName">serverName</see> and <see cref="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.DatabaseName">databaseName</see></para>
            <para><i>timeout</i></para>
            <para>Maximum time allowed to perform the task (seconds)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.SetDatabaseVersion
                        DatabaseVersion="2.1"
                        ServerName="(local)"
                        DatabaseName="testDB"
                        CommandTimeout="60" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.#ctor">
            <summary>
            Initializes a new instance of the SetDatabaseVersion class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.InternalExecute">
            <summary>
            Performs the action of this task which is to execute T-SQL scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.ConnectionString">
            <summary>
            Set this property to define a database connection string. This
            property can be used instead of the combination of <see cref="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.ServerName"/> and
            <see cref="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.DatabaseName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.DatabaseVersion">
            <summary>
            The version number to set 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.ServerName">
            <summary>
            The SQL Server name.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.DatabaseName">
            <summary>
            Name of the database that the script will be run against.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.SetDatabaseVersion.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the 
            attempt to execute a command and generating an error.
            </summary>
            <remarks>
            Has a default value of 30 seconds.
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.ExtendedProperty">
            <summary>
            Gets, Sets or Deletes an extended property on the database specified in the connection string.
            
            </summary>
            <remarks>
            <code><![CDATA[<Sql.ExtendedProperty Action="action" DatabaseVersion="versionNumber" ServerName="serverName" DatabaseName="database" ConnectionString="oleDBConnectionString" CommandTimeout="timeout" ExtendedProperty="yourproperty"/>]]></code>
            <para>where:</para>
            <para><i>serverName</i></para>
            <para>The server hosting the database (ignored if a connection string is supplied)</para>
            <para><i>databaseName</i></para>
            <para>The database (ignored if a connection string is supplied)</para>
            <para>If you do not specify a server and database name you must specify a 
            <see cref="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.ConnectionString">connection string</see>.</para>
            <para><i>connectionString</i></para>
            <para>An OLE/DB connection string detailing the connection parameters required.</para>
            <para>If you do not specify a connection string you must specify a
            <see cref="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.ServerName">serverName</see> and <see cref="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.DatabaseName">databaseName</see></para>
            <para><i>timeout</i></para>
            <para>Maximum time allowed to perform the task (seconds)</para>
            <para><i>yourproperty</i></para>
            <para>The extended property to read</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.GetExtendedProperty
                        ServerName="(local)"
                        DatabaseName="testDB"
                        ExtendedProperty="YourExtendedProperty">
                        <Output TaskParameter="ExtendedPropertyValue" PropertyName="YourExtendedPropertyValue"/>
                    </Sql.GetExtendedProperty>
                    <Message Text="$(YourExtendedPropertyValue)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.InternalExecute">
            <summary>
            This is the main execute method that all tasks should implement
            </summary>
            <remarks>
            TaskException should be thrown in the event of errors
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.ConnectionString">
            <summary>
            Set this property to define a database connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.ExtendedPropertyName">
            <summary>
            Gets or sets the extended property.
            </summary>
            <value>The extended property.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.ExtendedPropertyValue">
            <summary>
            The version number to set
            </summary>
            <value>The extended property value.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.ServerName">
            <summary>
            The SQL Server name.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.DatabaseName">
            <summary>
            Name of the database that the script will be run against.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.ExtendedProperty.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the
            attempt to execute a command and generating an error.
            </summary>
            <value>The command timeout.</value>
            <remarks>
            Has a default value of 60 seconds.
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.ServerCertificate">
            <summary>
            Represents the list of configured SSL Certificate for a site
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.MimeTypes">
            <summary>
            Represents the list of configured allowable MimeTypes in a WebSite (todo, should be a site or VDIR)
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Web.MimeTypes.Exists(System.String,System.String)">
            <summary>
            Check if a given mime type exists
            </summary>
            <param name="fileExtension">fileExtension</param>
            <param name="mimeType">Mime type to look for</param>
            <returns>true if the mime type exists</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.Login">
            <summary>
            Summary description for Login.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeInteractiveLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeNetworkLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeBatchLogonRight">
            <summary>
            Privilege to logon as a batch job
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeServiceLogonRight">
            <summary>
            Privilege to logon as a service
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeDenyInteractiveLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeDenyNetworkLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeDenyBatchLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeDenyServiceLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeRemoteInteractiveLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeDenyRemoteInteractiveLogonRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeIncreaseQuotaPrivilege">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeAuditPrivilege">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Privilege.SeAssignPrimaryTokenPrivilege">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.DriveInfo">
            <summary>
            Retrieves information about a system drive
            </summary>
            <remarks>
            <code><![CDATA[<DriveInfo DriveName="DriveName">
                            <Output TaskParameter="AvailableFreeSpace" PropertyName="out1" />
                            <Output TaskParameter="VolumeLabel" PropertyName="out2" />
                            <Output TaskParameter="TotalSize" PropertyName="out3" />
                            <Output TaskParameter="DriveFormat" PropertyName="out4" />
                           </DriveInfo>]]></code>
            <para>where:</para>
            <para><i>DriveName</i></para>
            <para>The name of the drive for which to retreive information</para>
            <para><i>AvailableFreeSpace</i></para>
            <para>Free space on the disk</para>
            <para><i>VolumeLabel</i></para>
            <para>the volume label</para>
            <para><i>TotalSize</i></para>
            <para>total disk space</para>
            <para><i>DriveFormat</i></para>
            <para>eg. NTFS or FAT32</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <DriveInfo t DriveName="DriveName">
                            <Output TaskParameter="DriveName" PropertyName="out6" />
                            <Output TaskParameter="AvailableFreeSpace" PropertyName="out1" />
                            <Output TaskParameter="VolumeLabel" PropertyName="out2" />
                            <Output TaskParameter="TotalSize" PropertyName="out3" />
                            <Output TaskParameter="DriveFormat" PropertyName="out4" />
                    </DriveInfo>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Zip.Create">
            <summary>
            Create the specified zip file using J# 2.0.
            </summary>
            <remarks>
            <code><![CDATA[<Zip.Create pathToZipFile="zipFile"/>]]></code>
            <para>where:</para>
            <para><i>pathToZipFile (Required)</i></para>
            <para>The path to the zip file to be created.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Zip.Create pathToZipFile="c:\newzip.zip" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.Create.PathToZipFile">
            <summary>
            Specifies the path and filename of the zip file to be created
            </summary>
            <value>The path and file name for the new zip file.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.AppPool.DeleteAppPool">
            <summary>
            Deletes an existing Applcation Pool (IIS6 or later).
            </summary>
            <remarks>
            <code><![CDATA[<Web.AppPool.DeleteAppPool AppPoolName="appPoolName"/>]]></code>
            <para>where:</para>
            <para><i>appPoolName (Required)</i></para>
            <para>A valid, existing IIS pool name</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.AppPool.DeleteAppPool
                        AppPoolName="TestApplicationPool"
                   />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.AppPool.DeleteAppPool.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.DeleteAppPool.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.DeleteAppPool.AppPoolName">
            <summary>
            Name of the application pool to delete
            </summary>
            <value>Any valid, existing IIS application pool name</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.DevEnv">
            <summary>
            Executes DevEnv.exe to build the .sln file specified.
            </summary>    
            <remarks>
            <code><![CDATA[<Tools.DevEnv VisualStudio="visualStudio" Path="path" Config="config" OutputFolder="outputFolder" Clean="clean" /> ]]></code>
            <para>where:</para>
            <para><i>visualStudio (Required)</i></para>
            <para>The version of Visual Studio to use. Specify 7.0, 7.1 or 8.0.</para>
            <para><i>path (Required)</i></para>
            <para>The path to the .sln file.</para>
            <para><i>config (Required)</i></para>
            <para>The solution configuration to build. Typically, Debug or Release.</para>
            <para>If multiple platforms are possible, the name must also contain platform name.</para>
            <para>for example: "Debug|Win32"</para>
            <para><i>outputFolder</i></para>
            <para>If specified, the folder to write the DevEnv output to.</para>
            <para><i>clean</i></para>
            <para>True to pass the Clean command line argument to DevEnv.exe</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Tools.DevEnv
                        VisualStudio="8.0"
                        Path="$(MSBuildProjectDirectory)\..\Solutions\MainSolution\Main.sln"
                        Config="Release"
                        OutputFolder="$(MSBuildProjectDirectory)\Output\Main"
                        Clean="true">
                      <Output TaskParameter="ExitCode" PropertyName="MyExitCode"></Output>
                    </Tools.DevEnv>
                    <Message Condition=" '$(MyExitCode) != '0' " Text="ExitCode was non-zero" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.DevEnv.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.DevEnv.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of devenv.exe</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.Config">
            <summary>
            Gets or sets the config.
            </summary>
            <value>The config.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.VisualStudio">
            <summary>
            Gets or sets the visual studio version
            </summary>
            <value>The visual studio version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.Clean">
            <summary>
            Gets or sets of Clean command line argument to DevEnv.exe.
            </summary>
            <value><c>true</c> if clean; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.OutputFolder">
            <summary>
            Gets or sets the output folder.
            </summary>
            <value>The output folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.OutputFileName">
            <summary>
            Gets or sets the name of the output file.
            </summary>
            <value>The name of the output file.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.DevEnv.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.Execute">
            <summary>
            Execute the SQL query or script against the specified server and database
            </summary>
            <remarks>
            <code><![CDATA[<Sql.Execute ServerName="serverName" DatabaseName="database" ConnectionString="oleDBConnectionString" CommandTimeout="timeout" />]]></code>
            <para>where:</para>
            <para><i>serverName</i></para>
            <para>The server to grant access to.</para>
            <para><i>databaseName</i></para>
            <para>The database on the specified server to grant access to.</para>
            <para>If you do not specify a server and database name you must specify a 
            <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.ConnectionString">connection string</see>.</para>
            <para><i>connectionString</i></para>
            <para>An OLE/DB connection string detailing the connection parameters required.</para>
            <para>If you do not specify a connection string you must specify a
            <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.ServerName">serverName</see> and <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.DatabaseName">databaseName</see></para>
            <para><i>timeout</i></para>
            <para>Maximum time allowed to perform the task (seconds)</para>
            <para><i>sql</i></para>
            <para>SQL command line to execute</para>
            <para><i>path</i></para>
            <para>Full qualified or wildcard path to script(s) to execute</para>
            <para><i>exclusions</i></para>
            <para>A list of files to exclude from execution if a wildcard path has been specified</para>
            <para><i>parameters</i></para>
            <para>A list of tokens to substitute when executing the specified SQL.</para>
            <para><i>retryFailures</i></para>
            <para>Flag indicating action to take on failed execution</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.DisconnectUsers
                        UserName="testUser"
                        ServerName="(local)"
                        DatabaseName="testDB"
                        CommandTimeout="60" />
                </Target>
            </Project>
            
            <Project DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
            <Import Project="Microsoft.Sdc.Common.tasks"/>
            <ItemGroup>
                <myString Include="true">
                    <name>@P1</name>
                    <value>'Hello'</value>
                </myString>
                <myInteger Include="true">
                    <name>@P2</name>
                    <value>342</value>
                </myInteger>
            </ItemGroup>
            <Target Name="Default">
                <Sql.Execute Path="SDCParameter.sql" ServerName="." DatabaseName="master" Parameters="@(myString);@(myInteger)"/>
            </Target>
            </Project>
            
            Where SDCParameter.sql contains:
            DECLARE @Str1 NVARCHAR(100);
            DECLARE @Int1 INT;
            
            SET @Str1 = @P1;
            SET @Int1 = @P2;
            
            RAISERROR('Str1 is: %s', 0, 1, @Str1) WITH NOWAIT
            RAISERROR('Int1 is: %d', 0, 1, @Int1) WITH NOWAIT
            
            
            -- Replaced Text
            DECLARE @Str1 NVARCHAR(100);
            DECLARE @Int1 INT;
            
            SET @Str1 = 'Hello'
            SET @Int1 = 342
            
            RAISERROR('Str1 is: %s', 0, 1, @Str1) WITH NOWAIT
            RAISERROR('Int1 is: %d', 0, 1, @Int1) WITH NOWAIT
            
            -- Result
            Str1 is: Hello
            Int1 is: 342
            
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Execute.InternalExecute">
            <summary>
            Performs the action of this task which is to execute T-SQL scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Execute.ScriptExecuted(System.Object,Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs)">
            <summary>
            Event handler called when a script has completed executing.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scriptInfo">
            Information about the script that was executed.
            </param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.ConnectionString">
            <summary>
            Set this property to define a database connection string. This
            property can be used instead of the combination of <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.ServerName"/> and
            <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.DatabaseName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.ServerName">
            <summary>
            The SQL Server name.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.DatabaseName">
            <summary>
            Name of the database that the script will be run against.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the 
            attempt to execute a command and generating an error.
            </summary>
            <remarks>
            Has a default value of 30 seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.Path">
            <summary>
            The location of the script file to execute. The path can include wild-card
            characters '*' and '?'.
            </summary>
            <remarks>
            This property can only be set if <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.Sql"/> is not set.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.Sql">
            <summary>
            SQL command text to be executed.
            </summary>
            <remarks>
            This property can only be set if <see cref="P:Microsoft.Sdc.Tasks.Sql.Execute.Path"/> is not set.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.Exclusions">
            <summary>
            A hash table of exclusions that are keyed on the path of the script file(s) that are to be
            omitted from execution. The paths can include wild-card characters '*' and '?'. The value
            entries for the corresponding keys are ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.Parameters">
            <summary>
            Contains the names of parameters that need to be substituted with 
            their given values before the script is executed.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Execute.RetryFailures">
            <summary>
            If true, scripts that failed will be retried. Execution will stop
            when all of the scripts have executed successfully or when there
            is no improvement in the number of scripts that failed after the
            last iteration.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.GetInstalledProducts">
            <summary>
            Gets a list of installed products on the specified machine
            </summary>
            <remarks>
            <code><![CDATA[ <GetInstalledProducts MachineName="machineName" Username="username" Password="password" InstalledProductsXml="installedProductsXml">
                                <Output TaskParameter="InstalledProductsXml" ItemName="InstalledProductsXmlItem" /> /> 
                            </GetInstalledProducts> />]]></code>
            <para>where:</para>
            <para><i>machineName</i></para>
            <para>The name of the remote machine or "." for local machine. Defaults to "."</para>
            <para><i>username</i></para>
            <para>The username to be used for the connection operation.</para>
            <para><i>password</i></para>
            <para>The password to be used for the connection operation.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <GetInstalledProducts
                        MachineName="remote"
                        Username="myDomain\myAuthorisedUser"
                        Password="123$abc>
                        <Output TaskParameter="InstalledProductsXml" ItemName="InstalledProductsXmlItem" >
                    </GetInstalledProducts>            
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetInstalledProducts.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetInstalledProducts.#ctor">
            <summary>
            Initializes a new instance of the GetInstalledProducts class.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetInstalledProducts.MachineName">
            <summary>
            The name of the machine being examined
            </summary>
            <value>The name of the remote machine or "." for local machine. Defaults to "."</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetInstalledProducts.Username">
            <summary>
            The username to be used for the connection operation.
            </summary>
            <value>The username to be used for the connection operation, in the format "DOMAIN\username".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetInstalledProducts.Password">
            <summary>
            The password to be used for the connection operation.
            </summary>
            <value>The password to be used for the connection operation.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetInstalledProducts.InstalledProductsXml">
            <summary>
            The list of products installed on the specified machine.
            </summary>
            <value>The list of products installed on the specified machine</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.InsertBefore">
            <summary>
            Inserts a node inot a hhc project.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.CreateProject SourceFolder="folder" />
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertBefore.#ctor">
            <summary>
            Initializes a new instance of the InsertBefore class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertBefore.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.Disconnect">
            <summary>
            Disconnects from a share.
            </summary>
            <remarks>
            <code><![CDATA[<Share.Disconnect ShareName="shareName" Machine="machine" Force="force" />]]></code>
            <para>where:</para>
            <para><i>shareName (Required)</i></para>
            <para>
            The name of the share to disconnect from. If the share is redirected to a local device name, e.g. E:
            or LPT1: then this argument should be the device name. If the share is not redirected then it should
            be the name of the share that was used.
            </para>
            <para><i>machine</i></para>
            <para>
            If the share is redirected to a local device name, e.g. E: or LPT1: then this argument must not be
            specified. If the share is not redirected then it should be the name of the machine the share is on.
            </para>
            <para><i>force</i></para>
            <para>
            Either true or false. If true then the share will be disconnected even if it is in use. The default
            is false.
            </para>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Create"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Connect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Exists"/>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <!-- Disconnect from a share redirected to a local device -->
                    <Share.Disconnect 
                        ShareName="E:"
                        Force="true" />
                    <!-- Disconnect from a share that is not redirected -->
                    <Share.Disconnect 
                        ShareName="MyShare"
                        Machine="MyMachine"
                        Force="true" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Disconnect.#ctor">
            <summary>
            Creates a new task to disconnect from a share.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Disconnect.InternalExecute">
            <summary>
            Executes the task
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Disconnect.SuppressWarnings">
            <summary>
            Set to true in order to suppress warnings reported by this task 
            </summary>
            <value>true or false (defaults to false)</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Disconnect.Force">
            <summary>
            Gets or sets whether the connection is forced to be closed even if it is in use.
            </summary>
            <value>
            <b>true</b> if the connection will be forced to be closed, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion">
             <summary>
             Gets an extended property 'DatabaseVersionNumber' on the database specified in the connection string. This can be used in
             conjunction with 'SetDatabaseVersion' to control db initialization/upgrade scripts in installers etc.
             
             This task deliberately returns
                 0.0 if there is no existing database at all
                 1.0 if the db exists but does not yet have the 'DatabaseVersionNumber' extended property
             
            
             </summary>
             <remarks>
             <code><![CDATA[<Sql.Execute DatabaseVersion="versionNumber" ServerName="serverName" DatabaseName="database" ConnectionString="oleDBConnectionString" CommandTimeout="timeout" />]]></code>
             <para>where:</para>
             <para><i>serverName</i></para>
             <para>The server hosting the database (ignored if a connection string is supplied)</para>
             <para><i>databaseName</i></para>
             <para>The database (ignored if a connection string is supplied)</para>
             <para>If you do not specify a server and database name you must specify a 
             <see cref="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.ConnectionString">connection string</see>.</para>
             <para><i>connectionString</i></para>
             <para>An OLE/DB connection string detailing the connection parameters required.</para>
             <para>If you do not specify a connection string you must specify a
             <see cref="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.ServerName">serverName</see> and <see cref="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.DatabaseName">databaseName</see></para>
             <para><i>timeout</i></para>
             <para>Maximum time allowed to perform the task (seconds)</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <Sql.GetDatabaseVersion
                         ServerName="(local)"
                         DatabaseName="testDB"
                         CommandTimeout="60">
                         <Output TaskParameter="DatabaseVersion" PropertyName="DatabaseVersion"/>
                     </Sql.GetDatabaseVersion>
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.InternalExecute">
            <summary>
            Performs the action of this task which is to execute T-SQL scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.ConnectionString">
            <summary>
            Set this property to define a database connection string. This
            property can be used instead of the combination of <see cref="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.ServerName"/> and
            <see cref="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.DatabaseName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.DatabaseVersion">
            <summary>
            The version number to set 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.ServerName">
            <summary>
            The SQL Server name.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.DatabaseName">
            <summary>
            Name of the database that the script will be run against.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.GetDatabaseVersion.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the 
            attempt to execute a command and generating an error.
            </summary>
            <remarks>
            Has a default value of 30 seconds.
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.WebSite">
            <summary>
            Summary description for WebSite.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Web.WebSite.CertCheckMode(System.Int32)">
            <summary>
            Set the CertCheckMode property
            </summary>
            <param name="mode">Check CRL = 0, Do not check CRL > 0 </param>
            <returns>the original entry value</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.FtpSite">
            <summary>
            Summary description for FtpSite.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.CpuAction">
            <summary>
            Summary description for CpuAction.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.User">
            <summary>
            Summary description for User.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Cab">
            <summary>
            Provides methods for manipulating Zip files
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Cab.AddFile">
            <summary>
            Adds the specified file to the specified cabfile
            </summary>
            <remarks>
            <code><![CDATA[<Cab.AddFile PathToCabFile="pathToCabFile" PathToFile="pathToFile" Path="path" Overwrite="overwrite"/>]]></code>
            <para>where:</para>
            <para><i>pathToCabFile (Required)</i></para>
            <para>The path to the cab file that the specified file will be added to.</para>
            <para><i>pathToFile (Required)</i></para>
            <para>The path to the file that will be added to the specified cab file.</para>
            <para><i>path</i></para>
            <para>The path to CabArc.exe. This will default to "C:\Program Files\CabArc\CabArc.exe" if not otherwise specified.</para>
            <para><i>overwrite</i></para>
            <para>Set to true to overwrite files of the same name that exist within the specified archive. If set to false
            and a file with the same name is found in the archive, an exception will be thrown.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Cab.AddFile
                        PathToCabFile="C:\Archives\CabFile.cab"
                        PathToFile="C:\Assemblies\MyAssembly.dll"
                        Path="C:\CabInstall\Cabarc.exe"  />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Cab.AddFile.#ctor">
            <summary>
            Initializes a new instance of the AddFile class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Cab.AddFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.AddFile.PathToCabFile">
            <summary>
            The path to the cab file that the specified file will be added to.
            </summary>
            <value>The path to the cab file that the specified file will be added to.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.AddFile.PathToFile">
            <summary>
            The path to the file that will be added to the specified cab file.
            </summary>
            <value>The path to the file that will be added to the specified cab file.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.AddFile.Path">
            <summary>
            The path to CabArc.exe. 
            </summary>
            <value>This will default to "C:\Program Files\CabArc\CabArc.exe" if not otherwise specified.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.AddFile.Overwrite">
            <summary>
            Set to true to overwrite files of the same name that exist within the specified archive. If set to false
            and a file with the same name is found in the archive, an exception will be thrown.
            </summary>
            <value>True to overwrite any files of the same name that exist within the archive. Defaults to "false"</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.Helper">
            <summary>
            Helper functions for SourceTfs tasks
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Helper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Sdc.Tasks.SourceTfs.Helper"/> class.
            </summary>
            <param name="tfsVersion">The TFS version.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Helper.FindLastLine(System.String)">
            <summary>
            Finds the last line.
            </summary>
            <param name="fullOutput">The full output.</param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Helper.SplitColumns(System.String)">
            <summary>
            Splits the columns.
            </summary>
            <param name="line">The line.</param>
            <returns>string</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Helper.TfExePath">
            <summary>
            Gets the tf exe path.
            </summary>
            <value>The tf exe path.</value>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.MessageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.MessageDialog">
            <summary>
            Pops up a modal dialog
            </summary>
            <remarks>
            <code><![CDATA[<MessageDialog DialogTitle="DialogTitle" Dialogtext="Text" Buttons="ButtonList">
                            <Output TaskParameter="ButtonPressed" PropertyName="buttonPressed" />
                           </MessageDialog>]]></code>
            <para>where:</para>
            <para><i>dialogTitle (Required)</i></para>
            <para>The title</para>
            <para><i>Text (Required)</i></para>
            <para>the text so show</para>
            <para><i>ButtonList</i></para>
            <para>list of the buttons to display on the dialog (defaults to 'OK')</para>
            <para><i>ButtonPressed (Output)</i></para>
            <para>an integer value representing the button pressed (zero based)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <MessageDialog
                        DialogTitle="Abort" DialogText="Do you want to abort this build?" Buttons="Abort;Continue">
                            <Output TaskParameter="ButtonPressed" PropertyName="ButtonPressed" />
                    </MessageDialog>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageDialog.ButtonPressed">
            <summary>
            returns the text of the button that was pressed
            </summary>
            <value>
             </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageDialog.Buttons">
            <summary>
            A list of captions for 1 to 4 buttons
            </summary>
             <value>
             </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddGroup">
            <summary>
            Adds a domain Active Directory Group to a local group.
            </summary>
            <remarks>
            <code><![CDATA[<ActiveDirectory.Group.AddUser 
                GroupName="groupName" 
                Groups="groups" 
                GroupDomain="userDomain" 
                EnsureGroupIsInGroup="ensureGroupIsInGroup" />]]></code>
            <para>where:</para>
            <para><i>AddGroupName (Required)</i></para>
            <para>The name of the group to add to the group.</para>
            <para><i>groupName (Required)</i></para>
            <para>The groupname to add the user to.</para>
            <para><i>AddGroupDomain</i></para>
            <para>The domain the group belongs to. If not specified it defaults to the local machine.</para>
            <para><i>groupDomain</i></para>
            <para>If "true" and the Group is already in the group then no error is thrown. If false, an error will 
            be thrown if the specified group is already a member of the specified group. Defaults to false. </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ActiveDirectory.Group.AddUser
                        GroupName="user1"
                        Groups="Domain Administrators"
                        GroupDomain="mydomain"
                        EnsureGroupIsInGroup="true" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddGroup.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>        
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddGroup.EnsureGroupIsInGroup">
            <summary>
            If "true" and the Group is already in the group then no error is thrown.
            </summary>
            <value>Set to "true" to not throw an error if the user is already in the group</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddGroup.GroupName">
            <summary>The name of the group to add to the groups.</summary>
            <value>The name of the group.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddGroup.GroupDomain">
            <summary>The name of the domain that the group belongs to.</summary>
            <value>The name of the group.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.Group.AddGroup.Groups">
            <summary><para>The groups to add the group to.</para>
            </summary>
            <value>The name of the groups.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate">
            <summary>
            Adds a new Http Custom Header to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.UpdateServerCertificate 
                HostName="hostname" 
                Description="description"
                Thumbprint="thumbprint"
                CertificateStore="certificateStore"/>]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description for which to set the SSL certificate</para>
            <para><i>identifier</i></para>
            <para>optional parameter to identify website when 'description' is not used</para>
            <para><i>thumbprint</i></para>
            <para>Thumbprint of the certificate to use (the certificate should already be in a machine certificate Store)</para>
            <para><i>CertificateStore (Required)</i></para>
            <para>The store in which to find the certificate, this must be a machine store</para>
            <para><i>hostname</i></para>
            <para>Host on which  to add the Http Custom Header (defaults to loaclhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
               <UpdateServerCertificate 
                    Description="DcPortal" 
                    thumbprint="df77c72cb611bd61d26185bb278ca0dbcb3c4918" 
                    CertificateStore="MY">            
                </UpdateServerCertificate>    
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.CertificateStore">
            <summary>
            Name of the store in which the SSL certificate is stored
            </summary>
            <value>a string description</value>
            <remarks>Usually set to "MY"</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.Description">
            <summary>
            Description of web site to be updated
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.Identifier">
            <summary>
            Optional Identifier for website to update where Website description has not been provided
            </summary>
            <value>A valid host name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.Thumbprint">
            <summary>
            The thumbrint for the certificate to use for SSL
            </summary>
            <value>A valid web site thumbprint</value>
            <remarks>This certificate should already be installed in the apporiate store. It should be a Server Authentication certificate 
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateServerCertificate.SslAccessFlags">
            <summary>
            SslAccessFlags. Configures the ssl restrictions for teh site that is to be updated.
            </summary>
            <value>integer</value>
            <remarks>
            
            The following values are valid. Use a space separated list to combine flags.
            Or simply supply the integer value required.
            
            Defaults to SslAny (SSL not required)
            
             SslAny = 0x00000000
             RequireSsl = 0x00000008
             RequireSsl128 = 0x00000100
             MapClientCert = 0x00000080
             RequestClientCert = 0x00000020
             RequireClientCert = 0x00000040
             
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.UnloadVirtualDirectory">
            <summary>
            Unloads the IIS application from the specified virtual driectory
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.UnloadVirtualDirectory
              VirtualDirectoryName="virtualDirectoryName"
              MachineName="machineName"
              WebSiteName="webSiteName" /> ]]></code>
            <para>where:</para>
            <para><i>virtualDirectoryName (required)</i></para>
            <para>The virtual directory to remove the application from</para>
            <para><i>machineName</i></para>
            <para>Machine to perform the action on</para>
            <para><i>websiteName</i></para>
            <para>Web site to perform the action on</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.UnloadVirtualDirectory
                        VirtualDirectoryName="/test"
                        WebSiteName="testwebsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.UnloadVirtualDirectory.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UnloadVirtualDirectory.VirtualDirectoryName">
            <summary>
            Virtual directory to unload the application from
            </summary>
            <value>A valid, existing virtual directory</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UnloadVirtualDirectory.MachineName">
            <summary>
            Machine to perform the action on
            </summary>
            <value>A valid machine name. If this value is not set the delete will 
            target on the local machine.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UnloadVirtualDirectory.WebSiteName">
            <summary>
            Web site to unload the virtual directory's application from
            </summary>
            <value>A value web site name. If this value is not set the delete will
            target against "Default Web Site"</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Stop">
            <summary>
            Stops a running web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Stop (Description="description"  || 
              Identifier="identifier">)]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>A valid web site identifier</para>
            <para><b>You must specify either a description or an identifier</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Stop description="testwebsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>   
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Stop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Stop.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Stop.Description">
            <summary>
            Description of web site to stop
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Stop.Identifier">Identifier</seealso> 
            for the site you wish to stop</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Stop.Identifier">
            <summary>
            web site idenfitier to stop
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Stop.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.FtpSite.Stop">
            <summary>
            Stops a running ftp site
            </summary>
            <remarks>
            <code><![CDATA[<Web.FtpSite.Stop (description="sitedescription" ||
              identifier="siteidentifier")>]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>A valid ftp site identifier</para>
            <para><b>Either a <i>description</i> or an <i>identifier</i> must be specified.</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.FtpSite.Stop Description="ftptestsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.Stop.#ctor">
            <summary>
            Initializes a new instance of the StopFtpSite class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.Stop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Stop.Description">
            <summary>
            Description of ftp site to stop
            </summary>
            <value>A valid ftp site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.Stop.Identifier">Identifier</seealso> 
            for the site you wish to stop</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Stop.Identifier">
            <summary>
            ftp site idenfitier to stop
            </summary>
            <value>A valid ftp site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.Stop.Description">Description</seealso> 
            for the site you wish to stop</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.Parse">
             <summary>
             Parses a version number from some text. Useful when the version number is generated by an external source.
             </summary>
             <remarks>
             <code><![CDATA[
             <VersionNumber.Parse
                 Text="text"
                 VersionNamePath="versionNamePath">
                 <Output TaskParameter="VersionNumber" PropertyName="versionNumber" />
                 <Output TaskParameter="VersionName" PropertyName="versionName" />
                 <Output TaskParameter="MajorNumber" PropertyName="majorNumber" />
                 <Output TaskParameter="MinorNumber" PropertyName="minorNumber" />
                 <Output TaskParameter="BuildNumber" PropertyName="buildNumber" />
                 <Output TaskParameter="RevisionNumber" PropertyName="revisionNumber" />
             </VersionNumber.Parse>
             ]]></code>
             <para>where:</para>
             <para><i>text (Required)</i></para>
             <para>The text containing the version number.</para>
             <para><i>versionNamePath</i></para>
             <para>The path to the root folder for the current version.</para>
             <para><i>versionNumber (Output)</i></para>
             <para>The full version number containing the major, minor, build and revision numbers.</para>
             <para><i>versionName (Output)</i></para>
             <para>The name of the current version.</para>
             <para><i>majorNumber (Output)</i></para>
             <para>The major number for the version.</para>
             <para><i>minorNumber (Output)</i></para>
             <para>The minor number for the version.</para>
             <para><i>buildNumber (Output)</i></para>
             <para>The build number for the version.</para>
             <para><i>revisionNumber (Output)</i></para>
             <para>The revision number for the version.</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <PropertyGroup>
                     <Text>The version number is 1.2.0.6896 in this test.</Text>
                     <VersionNamePath>$(MSBuildProjectDirectory)\..\..</VersionNamePath>
                 </PropertyGroup>
            
                 <Target Name="Test">
                     <VersionNumber.Parse
                         Text="$(Text)"
                         VersionNamePath="$(VersionNamePath)">
                         <Output TaskParameter="VersionNumber" PropertyName="VersionNumber" />
                         <Output TaskParameter="VersionName" PropertyName="VersionName" />
                         <Output TaskParameter="MajorNumber" PropertyName="MajorNumber" />
                         <Output TaskParameter="MinorNumber" PropertyName="MinorNumber" />
                         <Output TaskParameter="BuildNumber" PropertyName="BuildNumber" />
                         <Output TaskParameter="RevisionNumber" PropertyName="RevisionNumber" />
                     </VersionNumber.Parse>
            
                     <Message Text="Text: $(Text)" />
                     <Message Text="VersionNamePath: $(VersionNamePath)" />
            
                     <Message Text="VersionNumber: $(VersionNumber)" Importance="high" />
                     <Message Text="VersionName: $(VersionName)" Importance="high" />
                     <Message Text="MajorNumber: $(MajorNumber)" Importance="high" />
                     <Message Text="MinorNumber: $(MinorNumber)" Importance="high" />
                     <Message Text="BuildNumber: $(BuildNumber)" Importance="high" />
                     <Message Text="RevisionNumber: $(RevisionNumber)" Importance="high" />
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.Parse.VersionNumberRegularExpression">
            <summary>
            The regular expression to match a version number.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.Parse.version">
            <summary>
            The full version number.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.Parse.versionName">
            <summary>
            The name of the current version.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.Parse.versionNamePath">
            <summary>
            The path to the root folder for the current version.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.Parse.text">
            <summary>
            The text containing the version number.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Parse.#ctor">
            <summary>
            Initializes a new instance of the Parse class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Parse.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Parse.ParseVersionNumber">
            <summary>
            Parses a version number from some text. The version number can be surrounded by other text.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the text does not contain a single match for the version number.</exception>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.BuildNumber">
            <summary>
            Gets the build number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.MajorNumber">
            <summary>
            Gets the major number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.MinorNumber">
            <summary>
            Gets the minor number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.RevisionNumber">
            <summary>
            Gets the revision number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.Text">
            <summary>
            Gets or sets the text containing the version number.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.VersionName">
            <summary>
            Gets the name of the current version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.VersionNamePath">
            <summary>
            Gets the path to the root folder for the current version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.Parse.VersionNumber">
            <summary>
            Gets the full version number containing the major, minor, build and revision numbers.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Email">
            <summary>
            Sends an email message
            </summary>
            <remarks>
            <code><![CDATA[ <Email MailTo="mailTo" MailFrom="mailFrom" SmtpServer="smtpServer" Subject="subject" Body="body" Format="format" Priority="priority" Attachments="attachments"  />
            ]]></code>
            <para><i>mailTo (Required)</i></para>
            <para>The email address to send the email to.
            </para>
            <para><i>mailFrom (Required)</i></para>
            <para>The email address to send the email from.
            </para>
            <para><i>smtpServer (Required)</i></para>
            <para>The SMTP server to use to send the email.
            </para>
            <para><i>subject (Required)</i></para>
            <para>The subject of the email.
            </para>
            <para><i>body</i></para>
            <para>The body of the email.
            </para>
            <para><i>format</i></para>
            <para>The text encoding format of the email. Defaults to "HTML".
            </para>
            <para><i>priority</i></para>
            <para>The priority of the email. Defaults to "Normal".
            </para>
            <para><i>attachments</i></para>
            <para>A list of full paths of files to attach to the email.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                            <Email MailTo="myDeveloper@myCompany.com;bob@myCompany.com" 
                                   MailFrom="buildServer@myCompany.com" 
                                   SmtpServer="mySmtpServer" 
                                   Subject="Build succeeded" 
                                   Body="Your changes have been successfully built." 
                                   Format="HTML" 
                            />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Email.#ctor">
            <summary>
            Initializes a new instance of the Email class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Email.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.SmtpServer">
            <summary>
            The SMTP server to use to send the email.
            </summary>
            <value>The SMTP server to use to send the email.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.MailFrom">
            <summary>
            The email address to send the email from.
            </summary>
            <value>The email address to send the email from.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.MailTo">
            <summary>
            The email address to send the email to.
            </summary>
            <value>The email address to send the email to.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.Subject">
            <summary>
            The subject of the email.
            </summary>
            <value>The subject of the email.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.Priority">
            <summary>
            The priority of the email.
            </summary>
            <value>The priority of the email. Defaults to "Normal".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.Body">
            <summary>
            The body of the email.
            </summary>
            <value>The body of the email.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.Format">
            <summary>
            The text encoding format of the email.
            </summary>
            <value>The text encoding format of the email. Defaults to "HTML".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Email.Attachments">
            <summary>
            A list of full paths of files to attach to the email.
            </summary>
            <value>A list of full paths of files to attach to the email.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ServiceProcess.UpdateIdentity">
            <summary>
            Updates the Identity which a Win32Service uses for execution.
            </summary>
            <remarks>
            <code><![CDATA[<ServiceProcess.UpdateIdentity ServiceName="serviceName" Identity="identity" Password="password" StartupMode="startupMode" />]]></code>
            <para>where:</para>
            <para><i>serviceName (Required)</i></para>
            <para>The short name that identifies the service to the system. This service must exist.</para>
            <para><i>identity (Required)</i></para>
            <para>The new identity that the specified service will execute under.</para>
            <para><i>password (Required)</i></para>
            <para>The password for the specified identity.</para>
            <para><i>startupMode</i></para>
            <para>The start up mode of the specified service.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ServiceProcess.UpdateIdentity
                        ServiceName="W3SVC" 
                        Identity="myDomain\myUser"
                        Password="myPassword" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.UpdateIdentity.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.UpdateIdentity.ServiceName">
            <summary>
            The short name that identifies the service to the system.
            </summary>
            <value>The short name that identifies the service to the system, e.g. "W3SVC". This service must exist on the local computer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.UpdateIdentity.Identity">
            <summary>
            The new identity that the specified service will execute under.
            </summary>
            <value>The new identity that the specified service will execute under.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.UpdateIdentity.Password">
            <summary>
            The password for the specified identity.
            </summary>
            <value>The password for the specified identity.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.UpdateIdentity.StartupMode">
            <summary>
            The start up mode of the specified service.
            </summary>
            <value>Can be any of:
            "Automatic"
            "Manual"
            "Disabled"
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Registry.Set">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.Set.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.Set.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.Set.Changed">
            <summary>
            Returns TRUE if the reg key was set to a different value
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.Set.MachineName">
            <summary>
            Defaults to local machine if not specified.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.Set.Value">
            <summary>
            If not specified then the default for the key is returned.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Registry.CreateKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.CreateKey.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.CreateKey.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.CreateKey.MachineName">
            <summary>
            Defaults to local machine if not specified.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CreateSateliteAssembliesFromResx">
            <summary>
            Summary description for CreateSateliteAssembliesFromResx.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CreateSateliteAssembliesFromResx.InternalExecute">
            <summary>
            This method will find all resx files from the source code root.
            It will generate a satelite assembly for each culture folder found and copy to a folder of the same culture name, creating if needed, in the deployAssemblyRootPath folder.
            The leaf folder name MUST be a valid .NET locale. (or 'CY')
            
            1.For example - > a resx file in c:\sourceroot\en-gb\Microsoft.Sdc.Exceptions.DatabaseViolation.resx
            2.Call method with c:\sourceroot as source path and c:\mainassemblies as deployAssemblyRoot and Microsoft.Sdc.Exceptions as assemblyRootName
            
            3.An assembly is created marked with the en-gb locale at location c:\mainassemblies\en-gb called Microsoft.Sdc.Exceptions.resources.dll
             
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.AclInternal">
            <summary>
             Abstract base class for DACL and SACL.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AclInternal.#ctor">
            <summary>
             Create an empty ACL with a the default revision
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AclInternal.#ctor(Microsoft.Sdc.Tasks.Configuration.AclRevision)">
            <summary>
             Create an empty ACL with a specific revision
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AclInternal.Dirty">
            <summary>
             This function is internally called whenever the "_aces" array (content or reference)
             is updated, so that we reset the _nativeAces list.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AclInternal.RemoveAces(Microsoft.Sdc.Tasks.Configuration.Win32Security.Sid)">
            <summary>
             Remove all ACEs having 'sid' as their sid.
            </summary>
            <param name="sid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AclInternal.PrepareAcesForACL">
            <summary>
             Derived class can reorder the _aces if needed.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product">
            <summary>
            Represents an installed product
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.Caption">
            <summary>
            Short textual description for the product—a one-line string
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.Description">
            <summary>
            Description of the product
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.IdentifyingNumber">
            <summary>
            Product identification such as a serial number on software, or a die number on a hardware chip.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.InstallDate">
            <summary>
            Date that this product is installed on the system. This property does not need a value to 
            indicate that the object is installed. This property is no longer supported for Win32_Product. 
            New implementations should use the InstallDate2 property.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.InstallDate2">
            <summary>
            Windows Server 2003 and Windows XP:  Date that this product was installed on the system. 
            This property does not need a value to indicate that the object is installed.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.InstallLocation">
            <summary>
            Location of the installed product.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.InstallState">
            <summary>
            Installed state of the product.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.Name">
            <summary>
            Commonly used product name.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.PackageCache">
            <summary>
            Location of the locally cached package for this product
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.SKUNumber">
            <summary>
            Stock Keeping Unit
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.Vendor">
            <summary>
            Name of the product supplier. Corresponds to the Vendor property in the product object in the 
            Desktop Management Task Force (DMTF) Solution Exchange Standard.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Product.Version">
            <summary>
            Product version information. Corresponds to the Version property in the product object in the 
            DMTF Solution Exchange Standard.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ComponentServices.Component">
            <summary>
            Summary description for Component.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.Changes">
            <summary>
            Returns true if there have been changes since a given label.
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.Changes Path="path" Label="label" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory"/>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The full path to the file or folder.</para>
            <para><i>label (Required)</i></para>
            <para>The DateTime over which changes will be returned.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.Changes
                        Path="hum.c"
                        Label="2003/05/01" >
                        <Output TaskParameter="ChangesFound" PropertyName="ChangesFoundItem" />
                    </SourceTfs.Changes>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Changes.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Changes.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Changes.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Changes.ChangesFound">
            <summary>
            Gets or sets a value indicating whether [changes found].
            </summary>
            <value><c>true</c> if [changes found]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Changes.Path">
            <summary>Gets or sets the path to the file or folder.</summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Changes.Label">
            <summary>
            Gets or sets the DateTime over which changes will be returned
            </summary>
            <value>The DateTime over which changes will be returned</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE">
            <summary>
            The TASK_TRIGGER_TYPE field of the TASK_TRIGGER structure determines
            which member of the TRIGGER_TYPE_UNION field to use.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_TIME_TRIGGER_ONCE">
            <summary>
            Ignore the Type field.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_TIME_TRIGGER_DAILY">
            <summary>
            Use DAILY
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_TIME_TRIGGER_WEEKLY">
            <summary>
            Use WEEKLY
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_TIME_TRIGGER_MONTHLYDATE">
            <summary>
            Use MONTHLYDATE
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_TIME_TRIGGER_MONTHLYDOW">
            <summary>
            Use MONTHLYDOW
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_EVENT_TRIGGER_ON_IDLE">
            <summary>
            Ignore the Type field.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_EVENT_TRIGGER_AT_SYSTEMSTART">
            <summary>
            Ignore the Type field.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_TYPE.TASK_EVENT_TRIGGER_AT_LOGON">
            <summary>
            Ignore the Type field.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK">
            <summary>
            Enumerate the days of the week
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_SUNDAY">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_MONDAY">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_TUESDAY">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_WEDNESDAY">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_THURSDAY">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_FRIDAY">
            <summary>
            Friday
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAYS_OF_WEEK.TASK_SATURDAY">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKS_OF_MONTH">
            <summary>
            Enumerate the weeks of the month
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKS_OF_MONTH.TASK_FIRST_WEEK">
            <summary>
            First week
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKS_OF_MONTH.TASK_SECOND_WEEK">
            <summary>
            Second week
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKS_OF_MONTH.TASK_THIRD_WEEK">
            <summary>
            Third week
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKS_OF_MONTH.TASK_FOURTH_WEEK">
            <summary>
            Fourth week
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKS_OF_MONTH.TASK_LAST_WEEK">
            <summary>
            Last week
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR">
            <summary>
            Enumerate the months of the year
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_JANUARY">
            <summary>
            January
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_FEBRUARY">
            <summary>
            February
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_MARCH">
            <summary>
            March
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_APRIL">
            <summary>
            April
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_MAY">
            <summary>
            May
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_JUNE">
            <summary>
            June
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_JULY">
            <summary>
            July
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_AUGUST">
            <summary>
            August
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_SEPTEMBER">
            <summary>
            September
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_OCTOBER">
            <summary>
            October
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_NOVEMBER">
            <summary>
            November
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHS_OF_YEAR.TASK_DECEMBER">
            <summary>
            December
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG">
            <summary>
            Used by IScheduledWorkItem::SetFlags
            
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_INTERACTIVE">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_DELETE_WHEN_DONE">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_DISABLED">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_START_ONLY_IF_IDLE">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_KILL_ON_IDLE_END">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_DONT_START_IF_ON_BATTERIES">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_KILL_IF_GOING_ON_BATTERIES">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_RUN_ONLY_IF_DOCKED">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_HIDDEN">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_RESTART_ON_IDLE_RESUME">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_SYSTEM_REQUIRED">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_FLAG.TASK_FLAG_RUN_ONLY_IF_LOGGED_ON">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/ischeduledworkitem_setflags.asp
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_FLAG">
            <summary>
            used by the Flags field of <see cref="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER"/>
            
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/task_trigger.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_FLAG.TASK_TRIGGER_FLAG_HAS_END_DATE">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/task_trigger.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_FLAG.TASK_TRIGGER_FLAG_KILL_AT_DURATION_END">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/task_trigger.asp
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER_FLAG.TASK_TRIGGER_FLAG_DISABLED">
            <summary>
            see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/taskschd/taskschd/task_trigger.asp
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAILY">
            <summary>
            The data that is required when creating a Daily task
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.DAILY.DaysInterval">
            <summary>
            Interval (in days) when task is scheduled
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKLY">
            <summary>
            The data that is required when creating a Weekly task
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKLY.WeeksInterval">
            <summary>
            The interval (in weeks) when task is scheduled
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.WEEKLY.DaysOfTheWeek">
            <summary>
            Which days is the task scheduled to run
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDATE">
            <summary>
            Defines the day of the month the task will run
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDATE.Days">
            <summary>
            Specifies the day of the month a task runs. This value is a bit field that specifies the day(s) the task will run. Bit 0 corresponds to the first of the month, bit 1 to the second, and so forth. 
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDATE.Months">
            <summary>
            Specifies the month(s) when the task runs.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDOW">
            <summary>
            Defines the date(s) that the task runs by month, week, and day of the week.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDOW.WhichWeek">
            <summary>
            Specifies the week of the month when the task runs.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDOW.DaysOfTheWeek">
            <summary>
            Specifies the day(s) of the week (specified in wWhichWeek) when the task runs. 
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.MONTHLYDOW.Months">
            <summary>
            Value that describes the month(s) when the task runs.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TRIGGER_TYPE_UNION">
            <summary>
            Defines the invocation schedule of the trigger within the Type member of a TASK_TRIGGER structure.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TRIGGER_TYPE_UNION.Daily">
            <summary>
            A DAILY structure that specifies the number of days between invocations of a task. 
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TRIGGER_TYPE_UNION.Weekly">
            <summary>
            A WEEKLY structure that specifies the number of weeks between invocations of a task, and day(s) of the week the task will run.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TRIGGER_TYPE_UNION.MonthlyDate">
            <summary>
            A MONTHLYDATE structure that specifies the month(s) and day(s) of the month a task will run.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TRIGGER_TYPE_UNION.MonthlyDOW">
            <summary>
            A MONTHLYDOW structure that specifies the day(s) of the year a task runs by month(s), week of month, and day(s) of week.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER">
            <summary>
            Defines the times to run a scheduled work item.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.TriggerSize">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.Reserved1">
            <summary>
            Reserved. Must be zero.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.BeginYear">
            <summary>
            Trigger beginning date year.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.BeginMonth">
            <summary>
            Trigger beginning date month.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.BeginDay">
            <summary>
            Trigger beginning date day.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.EndYear">
            <summary>
            Optional trigger ending date year.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.EndMonth">
            <summary>
            Optional trigger ending date month.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.EndDay">
            <summary>
            Optional trigger ending date day.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.StartHour">
            <summary>
            Run bracket start time hour.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.StartMinute">
            <summary>
            Run bracket start time minute.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.MinutesDuration">
            <summary>
            Duration of run bracket.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.MinutesInterval">
            <summary>
            Run bracket repetition interval.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.Flags">
            <summary>
            Trigger flags.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.Type">
            <summary>
            Trigger type.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.Data">
            <summary>
            Trigger data peculiar to this type (union).
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.Reserved2">
            <summary>
            Reserved. Must be zero.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.TASK_TRIGGER.RandomMinutesInterval">
            <summary>
            Maximum number of random minutes after start time.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.ScheduledTaskManagement">
            <summary>
            Scheduled Task Management class deals with the interaction with ITaskScheduler
            
            see
            %PROGRAMFILES%\Microsoft Platform SDK\Include\mstask.h
            %PROGRAMFILES%\Microsoft Platform SDK\Include\mstask.idl
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ScheduledTask.ScheduledTaskManagement.LPWStrToString(System.IntPtr)">
            <summary>
            convert a returned pointer (to a string) to a .NET string and free the data - this prevents memory leaks
            </summary>
            <param name="lpwstr"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Xml.ShowMatchOptionValue">
            <summary>
            Extended logging option for ModifyFile:
                No:         no logging of matches (default)
                Yes:        log matches
                Masked:     log matches but hide the replacement value using '*' characters
                Secure:     log matches but do not display replacement data, the replacement value is always displayed as 8 '*' characters
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.DeleteElement">
            <summary>
            Deletes any elements that match the specified XPath expression.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.DeleteElement Path="path" XPath="xpath" Namespaces="namespaces" IgnoreNoMatchFailure="ignoreNoMatchFailure" Force="force"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to modify.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate to find the element(s) to remove.</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>IgnoreNoMatchFailure</i></para>
            <para>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</para>
            <para><i>Force</i></para>
            <para>If set to true, this will force the file to be updated even if it is Read Only.  Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.DeleteElement 
            			Path="c:\app.config"
            			XPath="/configuration/appSettings/add"
            			Namespaces="@(ConfigNamespaces)"
            			IgnoreNoMatchFailure="true"
            			Force="true"
            		/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask">
            <summary>
            Abstract base type for the various XmlFile tasks.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.#ctor">
            <summary>
            Create a new BaseXmlFileTask.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.SelectXmlNodesOfType(System.Xml.XmlNode,System.String,System.Xml.XmlNodeType)">
            <summary>
            Will return an XmlNodeList containing those nodes within the document
            that match the passed XPath expression.  Will also check that all of the
            nodes matching the XPath also match the requested nodeType.
            </summary>
            <param name="doc">Source document for the xPath.</param>
            <param name="xpathExpression">XPath query to use to select nodes from the document.</param>
            <param name="nodeType">The type of Node we are expecting all the results to match.</param>
            <returns>List of the XmlNodes matching the XPath.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.SelectXmlNodesOfType(System.Xml.XmlNode,System.String,System.Xml.XmlNodeType,System.Xml.XmlNamespaceManager)">
            <summary>
            Will return an XmlNodeList containing those nodes within the document
            that match the passed XPath expression.  Will also check that all of the
            nodes matching the XPath also match the requested nodeType.
            </summary>
            <param name="doc">Source document for the xPath.</param>
            <param name="xpathExpression">XPath query to use to select nodes from the document.</param>
            <param name="nodeType">The type of Node we are expecting all the results to match.</param>
            <param name="nsMgr">Namespace manager for the document.</param>
            <returns>List of the XmlNodes matching the XPath.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.OpenXmlFile(System.String)">
            <summary>
            Opens the config file specified by the passed path and returns it as an XmlDocument.
            </summary>
            <param name="path">Full Path + Filename of the XML file to open.</param>
            <returns>The requested config file.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.SaveXmlFile(System.Xml.XmlDocument,System.String,System.Boolean)">
            <summary>
            Save the passed XML Document to disc, with the passed path.
            </summary>
            <param name="xmlDoc">XmlDocument to save.</param>
            <param name="path">The file name to save it as.</param>
            <param name="forceSave">Force overwrite of ReadOnly file.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.GetNamespaceManagerForDoc(System.Xml.XmlDocument,Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            This will get a populated NamespaceManager for the passed document.
            It will be populated with any declarations read from the passed
            namespaces collection.
            </summary>
            <param name="xmlDoc">The document to create the NamespaceManager for.</param>
            <param name="namespaces">An array of ITaskItem types representing each of the namespaces to use in this document.</param>
            <returns>A namespace manager for the document, populated with the namespaces passed in.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.GetChildElement(System.Xml.XmlNode,System.Xml.XmlNamespaceManager,System.String,System.String,System.String)">
            <summary>
            This will return the first child element of the passed parent node
            found that matches the childName, keyAttribName and keyAttribValue criteria.
            If keyAttribName and keyAttribValue are provided then we look for a child
            element that has the requested name and has an attribute/value combination
            matching keyAttribName/keyAttribValue. 
            </summary>
            <param name="parent">Parent node to find the child within.</param>
            <param name="nsMgr">Namespace manager to use with XPath.</param>
            <param name="childName">Name of the child element to look for.</param>
            <param name="keyAttribName">Key Attribute name to look for.</param>
            <param name="keyAttribValue">Key Attribute value to look for.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.XPath">
            <summary>
            The XPath Expression to run against the document to find the elements to change the value of.
            </summary>
            <value>The XPath Expression to run against the document to find the elements to change the value of.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.Path">
            <summary>
            The full path and filename of the file to update.
            </summary>
            <value>The full path and filename of the file to update.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.Namespaces">
            <summary>
            An optional array of TaskItems specifiying "Prefix" and "Uri" attributes for use with the specified <i>XPath</i>.
            </summary>
            <value>An array of TaskItems specifiying "Prefix" and "Uri" attributes for use with the specified <i>XPath</i>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.BaseXmlFileTask.FileName">
            <summary>
            Publishes just the filename from the assigned Path.
            </summary>
            <value>Publishes just the filename from the assigned Path.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.DeleteElement.#ctor">
            <summary>
            Create a new DeleteElement.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.DeleteElement.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.DeleteElement.IgnoreNoMatchFailure">
            <summary>
            If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.
            </summary>
            <value>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.DeleteElement.Force">
            <summary>
            If set to true, this will modify the xml file even if it is read-only.  Defaults to false.
            </summary>
            <value>If set to true, this will modify the xml file even if it is read-only.  Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Pause">
            <summary>
            Pauses a running web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Pause (Description="description"  || 
              Identifier="identifier">)]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>A valid web site identifier</para>
            <para><b>You must specify either a description or an identifier</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Pause Description="testwebsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Pause.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Pause.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Pause.Description">
            <summary>
            Description of web site to pause
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Pause.Identifier">Identifier</seealso> 
            for the site you wish to pause</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Pause.Identifier">
            <summary>
            web site idenfitier to pause
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Pause.Description">Description</seealso> 
            for the site you wish to pause</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Exists">
            <summary>
            Returns TRUE if a virtual machine exists.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Exists
                        MachineName="machineName"
                        ServerName="serverName">
            </VirtualServer.VirtualMachine.Exists>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be stopped.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Exists
                        MachineName="myMachine"
                        Timeout="20">
                      <Output TaskParameter="DoesExist" PropertyName="VMExists" />
                    </VirtualServer.VirtualMachine.Exists> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Exists.#ctor">
            <summary>
            Initializes a new instance of the VirtualServer.Exists class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Exists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Exists.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Exists.MachineName">
            <summary>
            The name of the virtual machine to be stopped
            </summary>
            <value>The name of the virtual machine to be stopped.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Exists.DoesExist">
            <summary>
            Gets whether the VM does exist.
            </summary>
            <value>
            <b>true</b> if the VM does exist, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.PreSharp">
            <summary>
            Runs PreSharp (pshparse.exe) against CS projects from MSBuild task
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.PreSharp.CSPATH">
            <summary>
            XPath query string constants
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.PreSharp.totalDefects">
            <summary>
            Member variables
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.#ctor">
            <summary>
            Constructor to initialize arrCSFiles
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.GenerateFullPathToTool">
            <summary>
            Returns path to Presharp
            </summary>
            <returns>returns path to Presharp tool</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.InternalExecute">
            <summary>
            Called by msbuild to run PreSharp. We use it
            to iterate through the list of cspFile files passed and extract the CS files
            that we need to send to PreSharp
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.PSInternalExecute(System.String)">
            <summary>
            This does the work of building the command line and calling PreSharp (in base class InternalExecute)
            Then we parse the XML output doc
            </summary>
            <param name="cspFile">string filename of cspFile file being processed</param>
            <returns>True if OK</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.IsExcluded(System.String,System.String)">
            <summary>
            Returns true if a node matching defectcode (and funcName/CodeID) are in exclusions XML doc
            </summary>
            <param name="funcName">Defect location identifier (function name or namespace+file)</param>
            <param name="defect">Presharp Defect code</param>
            <returns>True if match in xmlExclusions, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.ReadExclusions">
            <summary>
            Reads defect exclusions from a file into an Arraylist
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.ReadCSProjFile(System.String,System.String)">
            <summary>
            Reads a cspFile file and returns an array list
            of .CS files found in the file
            </summary>
            <param name="cspDocument">The fully qualified pathname of the cspFile file to read</param>
            <param name="xpathQuery">The XPath query to run against the file</param>
            <returns>Arraylist of CS file to process</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PreSharp.CombinePaths(System.String,System.String)">
            <summary>
            Adds 2 paths and canonicalises the result
            </summary>
            <param name="p1">Path 1 (root part)</param>
            <param name="p2">Path 2 (stem part)</param>
            <returns>string Resultant path</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.CSProjFiles">
            <summary>
            The project files for Presharp to analyze
            </summary>
            <value>The cspFile files for Presharp to analyze</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.References">
            <summary>
            External assembly references
            </summary>
            <value>External assembly references</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.TotalViolations">
            <summary>
            The number of violations found. Excluding items in exlusions list.
            </summary>
            <value>The number of violations found.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.TotalDefects">
            <summary>
            Underlying number of defects found (including defects excluded by the exclusions list).
            </summary>
            <value>The number of defects (incl exclusions) found.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.CSCNowarn">
            <summary>
            Use to disable certain warning types (list of IDs)
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.CSCWarn">
            <summary>
            Use to set the level of CSC warnings displayed (0-4)
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.ShowFullCSPaths">
            <summary>
            If set prints full paths of all .CS files with defects.
            </summary>
            <value>Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.ShowDefects">
            <summary>
            If set prints full defects list even at Normal verbosity
            </summary>
            <value>Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.ExclusionsFile">
            <summary>
            Specified name of defect exclusion file to use
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PreSharp.ToolName">
            <summary>
            Returns name of the PSharp binary
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.#ctor">
            <summary>
            Initializes a new instance of the ExtractPublicKey class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of Sn.exe</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.DestinationKeyFile">
            <summary>The path to the public snk file to extract</summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.PublicKeyToken">
            <summary>The public key token</summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.SourceKeyFile">
            <summary>The path to the public/private snk file to extract from</summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.Runtime">
            <summary>The runtime version to use for the signing i.e. 1.0, 1.1 or 2.0 </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ExtractPublicKey.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Template">
            <summary>
            Summary description for Template.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Template.#ctor">
            <summary>
            Initializes a new instance of the Template class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Template.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.PerformanceCounters.Add">
             <summary>
             Add performance counters to the local machine
             </summary>
             <remarks>
             <code><![CDATA[<PerformanceCounters.Add CategoryName="categoryName" CategoryHelp="categoryHelp" CounterList="counterList" MultiInstance="c"/>]]></code>
             <para>where:</para>
             <para><i>categoryName (Required)</i></para>
             <para>
             The name of the custom performance counter category to create and register with the system. If a performance counter category with 
             the specified name already exists, it will be deleted.
             </para>
             <para><i>categoryHelp (Required)</i></para>
             <para>
             A description of the custom category.
             </para>
             <para><i>counterList</i></para>
             <para>
             An array of task items that specifies the counters to create as part of the new category.
             </para>
             <para><i>multiInstance</i></para>
             <para>
             Either true or false. If true then the performance counter will be a multiinstance counter. The default is false (single instance). 
             </para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <CustomCounterList Include="foobar.A" CounterName="Counter1" CounterHelp="First custom counter" CounterType="NumberOfItems32"/>
                 <CustomCounterList Include="foobar.A" CounterName="Counter2" CounterHelp="Second custom counter" CounterType="NumberOfItems32"/>
                 <CustomCounterList Include="foobar.A" CounterName="Counter3" CounterHelp="Third custom counter" CounterType="NumberOfItems32"/>
                 <CustomCounterList Include="foobar.A" CounterName="Counter4" CounterHelp="Fourth custom counter" CounterType="NumberOfItems32"/>
                 <CustomCounterList Include="foobar.A" CounterName="Counter5" CounterHelp="Last custom counter" CounterType="NumberOfItems32"/>
            
                 <Target Name="Test">
                     <PerformanceCounters.Add
                         CategoryName="myCustomCategory"
                         CategoryHelp="This is a custom performance counter category"
                         CounterList="@(CustomCounterList)"
                         MultiInstance="true" />
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.PerformanceCounters.Add.#ctor">
            <summary>
            Initializes a new instance of the AddPerformanceCounters class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.PerformanceCounters.Add.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.PerformanceCounters.Add.CategoryName">
            <summary>
            The name of the custom performance counter category to create and register with the system.
            </summary>
            <value>The name of the custom performance counter category to create and register with the system. If a performance counter category with 
            the specified name already exists, it will be deleted.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.PerformanceCounters.Add.CategoryHelp">
            <summary>
            A description of the custom category.
            </summary>
            <value>A description of the custom category.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.PerformanceCounters.Add.MultiInstance">
            <summary>
            Flag indicating whether to create a multiple instance performance counter. The default (false) creates single instance counters.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.PerformanceCounters.Add.CounterList">
            <summary>
            An array of TaskItems that specifies the counters to create as part of the new category.
            </summary>
            <value>An array of TaskItems that specifies the counters to create as part of the new category.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.Repair">
            <summary>
            Repairs an MSI package.
            </summary>
            <remarks>
            <code><![CDATA[<Msi.Repair MsiPath="msiPath" ProductCode="productCode" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" RepairOptions="repairOptions" />]]></code>
            <para>where:</para>
            <para><i>msiPath (Required*)</i></para>
            <para>
            The path to the MSI to repair.
            </para>
            <para><i>productCode (Required*)</i></para>
            <para>
            The GUID product code of the product to repair.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the repair. The recommended file name is the name of the MSI
            with the extension *.repair.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom installation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>repairOptions</i></para>
            <para>
            A delimited list of the options for repairing the MSI. The possible values are: Default,
            ReinstallWhenFileMissing, ReinstallWhenOlderVersionInstalled, ReinstallWhenEqualOrOlderVersionInstalled,
            ReinstallWhenDifferentVersionInstalled, ReinstallWhenChecksumIncorrect, ForceReinstall,
            RewriteUserSpecificRegistry, RewriteComputerSpecificRegistry, OverwriteExistingShortcuts,
            RunFromSourceAndReCachePackage. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions"/> documentation for more
            information.
            </para>
            <para>
            <b>*</b> - Either <i>msiPath</i> or <i>productCode</i> must be provided. If both are provided then 
            <i>msiPath</i> takes precedence and <i>productCode</i> is ignored. If neither are provided then the
            task will throw an exception when it executes.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Msi.Repair 
                        MsiPath="C:\Build\Msi\Packages\MyPackage.msi" 
                        ProductCode="b6b6f41c-fd3e-4b5b-8a73-c59494974990" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.install.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        RepairOptions="Default;RewriteUserSpecificRegistry" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase">
            <summary>
            Base class for tasks that invoke MsiExec to perform actions on MSI packages.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GuidFormat">
            <summary>
            The format to use when converting guids to strings for the MsiExec command line.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecSuccessCode">
            <summary>
            The exit code from MsiExec if it exits successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiPropertyInstallFeatures">
            <summary>
            The property to for installing features using the MsiExec command line.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiPropertyPatchFeatures">
            <summary>
            The property to for patching features using the MsiExec command line.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.PropertySchemaNamespace">
            <summary>
            The namespace of the schema used for the MSI property files.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.loadUserProfile">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.logFile">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.logOptions">
            <summary>
            internal variable - defaults to MsiLoggingOptions.Default
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.msiPath">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.productCode">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.properties">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.propertyFiles">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.userInterfaceLevel">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.#ctor">
            <summary>
            Initializes a new instance of the TaskBase class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AppendLoggingArgument(System.Text.StringBuilder)">
            <summary>
            Appends the logging argument string for MsiExec with the specified options.
            </summary>
            <param name="arguments">
            The string of arguments being built.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AppendPropertiesArguments(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the MSI property arguments.
            </summary>
            <param name="arguments">
            The string of arguments being built.
            </param>
            <param name="properties">
            The properties for the MSI to append.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AppendPropertiesArguments(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Appends only the MSI property arguments that are not in the exclusion list.
            </summary>
            <param name="arguments">
            The string of arguments being built.
            </param>
            <param name="properties">
            The properties for the MSI to append.
            </param>
            <param name="exclusions">
            The properties to be excluded from the command-line.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AppendUserInterfaceLevelArgument(System.Text.StringBuilder)">
            <summary>
            Appends the argument for the user interface level of MsiExec.
            </summary>
            <param name="arguments">
            The string of arguments being built.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.EscapeArgument(System.String)">
            <summary>
            Escapes an argument so that it is interpreted correctly. This does things like enclosing in quotes if there
            are spaces and escaping quotes.
            </summary>
            <param name="argument">
            The argument to escape.
            </param>
            <returns>
            The escaped argument.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LoadProperties">
            <summary>
            Loads all of the properties specified in the files and string literals.
            </summary>
            <returns>
            A dictionary of all the properties.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LoadExclusions">
            <summary>
            Loads all of the properties specified in the files and string literals.
            </summary>
            <returns>
            A dictionary of all the properties.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LoadPropertyFile(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads properties from a property XML file and loads them into a dictionary. If the dictionary already
            has a property with the same name then the property will be overridden. Property names are not case
            sensitive.
            </summary>
            <param name="filename">
            The path to the property file.
            </param>
            <param name="propertyDictionary">
            The dictionary to load the properties into.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LoadPropertyFileExclusions(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reads properties from a property XML file and loads them into String collection if they have an associated 'Embed' attribute set to 'False'.
            </summary>
            <param name="filename">
            The path to the property file.
            </param>
            <param name="propertyExclusionDictionary">
            The string collection to load the properties into.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LoadPropertyStrings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads properties from the strings and loads them into a dictionary. If the dictionary already
            has a property with the same name then the property will be overridden. Property names are case
            sensitive.
            </summary>
            <param name="propertyDictionary">
            The dictionary to load the properties into.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.RunMsiExecProcess(System.String)">
            <summary>
            Runs the MsiExec process with the specified arguments, waits for it to finish, and checks that it
            was successful.
            </summary>
            <param name="arguments">
            The argument string to pass to MsiExec.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Thrown when the return code of MsiExec indicates that the process has failed.
            </exception>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.BuildInstallArgumentsAndEmbedProperties(System.Boolean,System.Guid,System.String[])">
            <summary>
            Build the msi execute arguments collection and embed properties into the named MSI
            </summary>
            <param name="embedProperties">true- embed properties into the MSI </param>
            <param name="productCode">the product code to package</param>
            <param name="features">a list of features</param>
            <returns>a argument string</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.BuildInstallPatchArgumentsAndExtractProperties(System.String[])">
            <summary>
            Build the msp execute arguments collection and extract properties 
            </summary>
            <param name="features">
            The features to be installed.
            </param>
            <returns>a argument string</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.BuildUninstallArgumentsAndEmbedProperties(System.Boolean)">
            <summary>
            build uninstall command line and embed properties into MSI file
            </summary>
            <param name="embedProperties">true - embed propeties into MSI file</param>
            <returns>a command line string for use with the MSI</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AssertMsiExecPropertyNameIsValid(System.String)">
            <summary>
            Asserts whether an MsiExec property name is valid and throws an error if not. If there are
            any warnings about the name but it is still valid these will be logged.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AddPropertyRecord(Microsoft.Sdc.Tasks.ComWrapper,System.String,System.String)">
            <summary>
            Add entries to the property database
            </summary>
            <param name="msiDatabase">a reference to the MSI object</param>
            <param name="propertyName">the name of the that is being added</param>
            <param name="propertyValue">the value of the property that is being added</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.AppendFeaturesArgument(System.Text.StringBuilder,System.String,System.String[])">
            <summary>
            Appends the arguments to select features to be installed from an MSI.
            </summary>
            <param name="arguments">
            The argument string being built.
            </param>
            <param name="propertyName">
            The name of the property that controls the feature list. For example,
            <seealso cref="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiPropertyInstallFeatures">ADDLOCAL</seealso> or
            <seealso cref="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiPropertyPatchFeatures">REINSTALL</seealso>.
            </param>
            <param name="features">a list of features</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GetInstallArguments(System.Guid,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            Builds the arguments to install a product.
            </summary>
            <param name="productCode">
            The identifier of the product.
            </param>
            <param name="properties">
            The dictionary of properties to pass to the MSI, this may be <b>null</b> if the MSI does not need any properties passed.
            </param>
            <param name="features">a list of features</param>
            <returns>
            The argument string to install the product.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GetInstallArguments(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            Builds the arguments to install a product.
            </summary>
            <param name="packageName">
            The name of the package, e.g. <i>C:\Install\Source\MyPackage.msi</i>
            </param>
            <param name="properties">
            The dictionary of properties to pass to the MSI, this may be <b>null</b> if the MSI does not need any properties passed.
            </param>
            <param name="features">a list of features</param>
            <returns>
            The argument string to install the product.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GetInstallPatchArguments(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            Builds the arguments to install a patch.
            </summary>
            <param name="packageName">
            The name of the package, e.g. <i>C:\Install\Source\MyPackage.msp</i>
            </param>
            <param name="properties">
            The dictionary of properties to pass to the MSI, this may be <b>null</b> if the MSI does not need any properties passed.
            </param>
            <param name="exclusions">
            The list of properties to not pass to the MSP, this may be <b>null</b> if all properties should be passed.  This is used
            only when the property to be excluded has been embedded into the MSP.
            </param>
            <param name="features">
            The features to be installed.
            </param>
            <returns>
            The argument string to install the patch.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GetInstallArguments(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            Builds the arguments to install a product.
            </summary>
            <param name="packageName">
            The name of the package, e.g. <i>C:\Install\Source\MyPackage.msi</i>
            </param>
            <param name="properties">
            The dictionary of properties to pass to the MSI, this may be <b>null</b> if the MSI does not need any properties passed.
            </param>
            <param name="exclusions">
            The list of properties to not pass to the MSI, this may be <b>null</b> if all properties should be passed.  This is used
            only when the property to be excluded has been embedded into the MSI.
            </param>
            <param name="features">a list of features</param>
            <returns>
            The argument string to install the product.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GetUninstallArguments(System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds the arguments to uninstall a product.
            </summary>
            <param name="productCode">
            The identifier of the product.
            </param>
            <param name="properties">
            The dictionary of properties to pass to the MSI, this may be <b>null</b> if the MSI does not need any properties passed.
            </param>
            <returns>
            The argument string to uninstall the product.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.GetUninstallArguments(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds the arguments to uninstall a product.
            </summary>
            <param name="packageName">
            The name of the package, e.g. <i>C:\Install\Source\MyPackage.msi</i>
            </param>
            <param name="properties">
            The dictionary of properties to pass to the MSI, this may be <b>null</b> if the MSI does not need any properties passed.
            </param>
            <returns>
            The argument string to uninstall the product.
            </returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LoadUserProfile">
            <summary>
            Gets or sets whether the user's profile is loaded during the processing of the MSI.
            </summary>
            <remarks>
            For some custom installation actions such as configuring ports and channels in Microsoft BizTalk Server
            the user profile must be loaded for the actions to succeed. Most installations do not need the user's
            profile to be loaded.
            </remarks>
            <value>
            <b>true</b> if the user's profile is loaded, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LogFile">
            <summary>
            Gets or sets the full or relative path to the log file.
            </summary>
            <value>
            The full or relative path to the log file.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.LogOptions">
            <summary>
            Gets or sets the options for logging during the installation process.
            </summary>
            <value>
            The options for logging during the installation process.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiPath">
            <summary>
            Gets or sets the full or relative path to the MSI.
            </summary>
            <value>
            The full or relative path to the MSI.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.ProductCode">
            <summary>
            Gets or sets the product code for the product that is installed by the MSI.
            </summary>
            <value>
            The product code for the product that is installed by the MSI.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.Properties">
            <summary>
            Gets or sets any properties to pass to the MSI.
            </summary>
            <remarks>
            A list of installation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </remarks>
            <value>
            Properties to pass to the MSI.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.PropertyFiles">
            <summary>
            Gets or sets the property file(s) used to provide properties to the MSI.
            </summary>
            <remarks>
            Use this property to specify one or more property files which can provide properties for the MSI being installed.
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </remarks>
            <value>
            A list of property files.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.UserInterfaceLevel">
            <summary>
            Gets or sets the user interface level of MsiExec.
            </summary>
            <value>
            The user interface level of MsiExec.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel">
            <summary>
            The user interface level for MsiExec.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.None">
            <summary>
            No user interface is displayed.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.Basic">
            <summary>
            A basic user interface is displayed.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.ReducedWithModalDialog">
            <summary>
            A reduced interface is displayed with a modal dialog box at the end.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.FullWithModalDialog">
            <summary>
            A full user interface is displayed with a modal dialog box at the end.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.NoneWithModalDialog">
            <summary>
            No user interface is displayed but a modal dialog box is shown at the end.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.BasicWithModalDialog">
            <summary>
            A basic user interface is displayed with a modal dialog box at the end.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel.BasicWithNoModalDialogs">
            <summary>
            A basic user interface is displayed with no modal dialog boxes being shown.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions">
            <summary>
            Options for the logging output of an MSI. These options may be combined.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.Default">
            <summary>
            Uses the default logging options.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.StatusMessages">
            <summary>
            Log status messages.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.Warnings">
            <summary>
            Log non-fatal warnings.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.Errors">
            <summary>
            Log errors
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.ActionStart">
            <summary>
            Log the start of actions.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.ActionSpecificRequests">
            <summary>
            Log action specific requests.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.UserRequests">
            <summary>
            Log user requests.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.InitialParameters">
            <summary>
            Log initial user interface parameters.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.OutOfMemory">
            <summary>
            Log out of memory conditions.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.TerminalProperties">
            <summary>
            Log terminal properties.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.Verbose">
            <summary>
            Log with verbose output.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.AppendLog">
            <summary>
            Append the information to the existing log file rather than overwriting it.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.FlushEachLine">
            <summary>
            Immediately flush each line to the log file rather than buffering it.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions.AllInformation">
            <summary>
            Log all information except verbose output. Note that this can be combined with the <b>Verbose</b> flag to
            log all output in verbose format.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Repair.#ctor">
            <summary>
            Initializes a new instance of the Repair class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Repair.InternalExecute">
            <summary>
            Executes the task to repair the MSI.
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Repair.AppendRepairArgument(System.Text.StringBuilder,System.String)">
            <summary>
            Appends the repair argument string for MsiExec with the specified options.
            </summary>
            <param name="arguments">
            The string of arguments being built.
            </param>
            <param name="packageName">
            The name of the package to repair.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Repair.GetRepairArguments(System.Guid)">
            <summary>
            Builds the arguments to repair a product.
            </summary>
            <param name="productCode">
            The identifier of the product.
            </param>
            <returns>
            The argument string to repair the product.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Repair.GetRepairArguments(System.String)">
            <summary>
            Builds the arguments to repair a product.
            </summary>
            <param name="packageName">
            The name of the package, e.g. <i>C:\Install\Source\MyPackage.msi</i>
            </param>
            <returns>
            The argument string to repair the product.
            </returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.Repair.RepairOptions">
            <summary>
            Gets or sets the options for repairing the MSI.
            </summary>
            <value>
            The options for repairing the MSI.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions">
            <summary>
            Options for repairing an installation. These values may be combined.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.Default">
            <summary>
            Uses the default repair options.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.ReinstallWhenFileMissing">
            <summary>
            Reinstall if a file is missing.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.ReinstallWhenOlderVersionInstalled">
            <summary>
            Reinstall if a file is missing or an older version of the product is already installed.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.ReinstallWhenEqualOrOlderVersionInstalled">
            <summary>
            Reinstall if a file is missing or an equal or older version of the product is already installed.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.ReinstallWhenDifferentVersionInstalled">
            <summary>
            Reinstall if a file is missing or a different version of the product is already installed.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.ReinstallWhenChecksumIncorrect">
            <summary>
            Reinstall if a file is missing or the stored checksum does not match the calculated value.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.ForceReinstall">
            <summary>
            Force a reinstall of all files.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.RewriteUserSpecificRegistry">
            <summary>
            Rewrite all user-specicic registry entries.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.RewriteComputerSpecificRegistry">
            <summary>
            Rewrite computer-specific registry entries.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.OverwriteExistingShortcuts">
            <summary>
            Overwrite all existing shortcuts.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Repair.MsiRepairOptions.RunFromSourceAndReCachePackage">
            <summary>
            Runs from the source and re-cache the local package.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.Decompile">
            <summary>
            Decompiles a chm file into the specified folder.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.Decompile DestinationFolder="folder"
                         ChmFilePath="chmFilePath">
            </Help.Decompile>
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.Decompile.#ctor">
            <summary>
            Initializes a new instance of the Decompile class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.Decompile.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.Decompile.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of hh.exe</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.Decompile.ChmFilePath">
            <summary>
            The full path to a chm file
            </summary>
            <value>Must be a full path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.Decompile.DestinationFolder">
            <summary>
            The folder where the decompiled chm file will be.
            </summary>
            <value>Must be a full path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.Decompile.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.Connect">
            <summary>
            Connects to a share using the supplied credentials. You can use the
            <see cref="T:Microsoft.Sdc.Tasks.Folder.Share.Disconnect"/> task to disconnect from the
            share.
            </summary>
            <remarks>
            <code><![CDATA[<Share.Connect ShareName="shareName" Machine="machine" UserName="userName" Password="password" LocalName="localName" ResourceType="resourceType" Connections="connections" />]]></code>
            <para>where:</para>
            <para><i>shareName (Required)</i></para>
            <para>
            The name of the share to connect to.
            </para>
            <para><i>machine (Required)</i></para>
            <para>
            The name or IP address of the machine the share is on.
            </para>
            <para><i>userName (Required)</i></para>
            <para>
            The name of the user to connect to the share as, in the form DOMAIN\Username.
            </para>
            <para><i>password</i></para>
            <para>
            The password for the user account specified by <i>userName</i>. The default is no password.
            </para>
            <para><i>localName</i></para>
            <para>
            The name of the local device to connect the share to, e.g. E: or LPT1:. This cannot be specified
            if the <i>resourceType</i> is "Any". The default is no local name.
            </para>
            <para><i>resourceType</i></para>
            <para>
            The type of resource being connected to, which can be one of the following values: Any, Disk, Printer, 
            Ipc.
            </para>
            <para><i>connections</i></para>
            <para>
            The number of connections to make to the share.
            </para>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Create"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Disconnect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Exists"/>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Share.Connect 
                        ShareName="MyShare"
                        Machine="MyMachine" 
                        UserName="domain\username" 
                        Password="password1" 
                        LocalName="E:" 
                        ResourceType="Disk" 
                        Connections="1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Connect.#ctor">
            <summary>
            Creates a new task to connect to a share.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.Connect.InternalExecute">
            <summary>
            Executes the task
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Connect.Connections">
            <summary>
            Gets or sets the number of connections that are established with the resource.
            </summary>
            <value>
            The number of connections that are established with the resource.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Connect.LocalName">
            <summary>
            Gets or sets the local device name that the share is mapped to, e.g. E: or LPT1:. This can be null.
            </summary>
            <value>
            The local device name that the share is mapped to.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Connect.ResourceType">
            <summary>
            Gets or sets the type of resource being connected to. The default is "Disk". Note that you cannot
            set the local name if "Any" is used.
            </summary>
            <value>
            One of the following values: "Any", "Disk", "Printer", "Ipc".
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.Share.Connect.UserName">
            <summary>
            Gets or sets the user name used to connect to the share. This should be in the format DOMAIN\Username.
            </summary>
            <value>
            The user name used to connect to the share.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CreateGuid">
            <summary>
            Returns a String representation of the value of this new Guid.
            </summary>
            <remarks>
            <code><![CDATA[ 
            <CreateGuid>
                   <Output TaskParameter="GuidRegistryFormatString" ItemName="GuidRegistryFormatStringItem" />
                   <Output TaskParameter="GuidString" ItemName="GuidStringItem" />
            </CreateGuid>
            
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CreateGuid>
                        <Output TaskParameter="GuidRegistryFormatString" ItemName="GuidRegistryFormatStringItem" />
                        <Output TaskParameter="GuidString" ItemName="GuidStringItem" />
                    </CreateGuid>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CreateGuid.#ctor">
            <summary>
            Initializes a new instance of the CreateGuid class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CreateGuid.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateGuid.GuidRegistryFormatString">
            <summary>
            32 digits separated by hyphens: 
            xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateGuid.GuidString">
            <summary>
            32 digits: 
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32">
            <summary>
            Provides wrappers for Win32 functions
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.WebServiceExtension">
            <summary>
            Summary description for WebServiceExtension.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.VirtualDirectoryCollection">
            <summary>
            Summary description for VirtualDirectoryCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.AppPool">
            <summary>
            Summary description for AppPool.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager">
             <summary>
             "Your WMI script uses the Win32_Product class, which the WMI Windows
            Installer Provider services. In XP and earlier, the WMI Windows Installer
            Provider is installed by default. Unfortunately, that's no longer the case
            beginning with Windows 2003. Instead, the WMI Windows Installer Provider is
            an optional component, as Figure 1, page 10, shows. To install this
            provider, open the Control Panel Add/Remove Programs applet and click
            Add/Remove Windows Components. Select the Management and Monitoring Tools
            check box, then click Details. Select the WMI Windows Installer Provider
            check box, and click OK."
             </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.ConvertToXml(Microsoft.Sdc.Tasks.Configuration.InstalledProducts.ProductList)">
            <summary>
            Serialize the product list into an Xml string
            </summary>
            <param name="products"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.ConvertFromXml(System.String)">
            <summary>
            Deserialize from xml to ProductList
            </summary>
            <param name="xml">Xml produced by the ConvertToXml method</param>
            <returns>List of Product objects</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.IsInstalled(Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criteria,Microsoft.Sdc.Tasks.Configuration.InstalledProducts.ProductList)">
            <summary>
            Check to see if a product is installed
            </summary>
            <param name="criteria">A list of Criterion objects (e.g. StringCriterion)</param>
            <param name="products">The installed products to on the machine to match against</param>
            <returns>True if criteria match at least one of the products</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.GetInstalledProducts">
            <summary>
            Get installed products on the local machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.GetInstalledProducts(System.String)">
            <summary>
            Get a list of installed products on a remote machine using impersonation
            </summary>		
            <param name="machine">Remote machine or "." for local machine</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.GetInstalledProducts(System.String,System.String,System.String)">
            <summary>
            Get a list of installed products
            </summary>		
            <remarks>
            If a username is not specified but the machine is not local (i.e. not "."),
            Impersonation will be used to authenticate with the remote machine.
            </remarks>
            <param name="machine">Remote machine or "." for local machine</param>
            <param name="username">Optional username (or null)</param>
            <param name="password">Optional password (or null)</param>
            <returns>List of Product objects</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledProductManager.AddForAnd(Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criteria,Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criterion)">
            <summary>
            Convenience method to add a criterion for And-ing
            </summary>
            <param name="criteria"></param>
            <param name="criterion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.IBinaryComparisonChecker">
            <summary>
            Interface for classes that check for matches
            </summary>
            <example>
            <see cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.StringComparisonChecker"/>
            <see cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.VersionComparisonChecker"/>
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties">
            <summary>
            Uninstalls an MSI package.
            </summary>
            <remarks>
            <code><![CDATA[<EmbedUninstallProperties MsiPath="msiPath" ProductCode="productCode" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" PropertyFiles="propertyFiles" Properties="properties" Features="features" />]]></code>
            <para>where:</para>
            <para><i>msiPath (Required*)</i></para>
            <para>
            The path to the MSI to uninstall.
            </para>
            <para><i>productCode (Required*)</i></para>
            <para>
            The GUID product code of the product to uninstall.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the uninstallation. The recommended file name is the name of the MSI
            with the extension *.uninstall.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom uninstallation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>propertyFiles</i></para>
            <para>
            A delimited list of XML property files that provide uninstallation properties for the MSI. 
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </para>
            <para><i>properties</i></para>
            <para>
            A delimited list of uninstallation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </para>
            <para>
            <b>*</b> - Either <i>msiPath</i> or <i>productCode</i> must be provided. If both are provided then 
            <i>msiPath</i> takes precedence and <i>productCode</i> is ignored. If neither are provided then the
            task will throw an exception when it executes.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Msi.EmbedUninstallProperties 
                        MsiPath="C:\Build\Msi\Packages\MyPackage.msi" 
                        ProductCode="b6b6f41c-fd3e-4b5b-8a73-c59494974990" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.uninstall.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        PropertyFiles="C:\Build\Properties\Global.xml;C:\Build\Properties\Rig4.xml" 
                        Properties="INSTALLDIR=C:\Install;DOMAIN=rig4;MACHINE=r4app01" >
                        <Output TaskParameter="ExecArguments" PropertyName="ExecArguments" />
                    </Msi.EmbedUninstallProperties>
                </Target>
            </Project>
            ]]></code>   
            A sample property file is shown below. Note that you must include the namespace for the file to
            be parsed correctly.
            <code><![CDATA[
            <Properties xmlns="urn:sdc-microsoft-com:deployment:properties:v2.0">
                <Property Name="MY_PROPERTY" Value="some value" />
                <Property Name="ANOTHER_PROPERTY" Value="some other value" />
                <Property Name="SOMETHING_ELSE" Value="hello world" />
                ... etc ...
            </Properties>
            ]]></code>  
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties.embedProperties">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties.msiExecArguments">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties.#ctor">
            <summary>
            Initializes a new instance of the EmbedUninstallProperties class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties.InternalExecute">
            <summary>
            Executes the task to embed the properties into the MSI and return the argument string
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties.EmbedProperties">
            <summary>
            Specifies if Properties should be embedded into the MSI before installation.
            </summary>
            <remarks>
            When this property is set to true all properties specified in a property file will 
            be embedded into the MSI unless they have an additional attribute <b>Embed</b> set to false.
            All properties with Embed set to false are discarded.
            </remarks>
            <value>
            True or False.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.EmbedUninstallProperties.ExecArguments">
            <summary>
            The argument string to use with the MSI file
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.MergeByRef">
            <summary>
            Takes two item lists as input and merges them together based on a reference metadata.
            This is similar to merging two DB tables together based on a reference key to generate a view.
            
            The output of this task is a copy of ItemList1 with additional metadata for the first item that matched
            in itemlist2. All of the metadata is copied over and the identity of the item in ItemList2 becomes
            ItemList2_Identity.
            
            Note that if ItemList1 and ItemList2 have the same metadata names then the value from 2 will be kept
            (normally other than Identity this would not be expected input)
            
            If RemoveNonMatchingItems is set to true then the result contains only items where a match occured.
            This defaults to false.
            </summary>
            <remarks>
            <code><![CDATA[<MergeByRef ItemList1="@(list1)" MetaDataName1="Prop1" ItemList2="@(list2)" MetaDataName2="Prop2" RemoveNonMatchingItems="removeNonMatchingItems">
                            <Output TaskParameter="MergedList" ItemName="MergedList" />
                           </MergeByRef>]]></code>
            <para>where:</para>
            <para><i>list1 (Required)</i></para>
            <para>The first ItemList to be merged</para>
            <para><i>list2 (Required)</i></para>
            <para>The second ItemList to be merged</para>
            <para><i>Prop1 (Required)</i></para>
            <para>The first ItemList's metadata</para>
            <para><i>Prop2 (Required)</i></para>
            <para>The second ItemList's metadata which maps to Prop1 metadata on the first Itemlist</para>
            <para><i>MergedList (Output)</i></para>
            <para>The merged ItemList </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <MergeByRef
                        ItemList1="@(AllAssemblies)"
                        ItemList2="@(Solutions)"/>
                        MetaDataName1="SolutionName"
                        MetaDataName2="Identity"
                        RemoveNonMatchingItems="true"/>
                            <Output TaskParameter="MergedList" PropertyName="AssembliesFull" />
                    </ShortenPath>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MergeByRef.#ctor">
            <summary>
            MergeByRef
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MergeByRef.InternalExecute">
            <summary>
            InternalExecute
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByRef.ItemList1">
            <summary>
            he first ItemList to be merged 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByRef.ItemList2">
            <summary>
            The second ItemList to be merged 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByRef.RemoveNonMatchingItems">
            <summary>
            Normally this task returns a copy of ItemList1
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByRef.MetaDataName1">
            <summary>
            The first ItemList's metadata which maps to metadata2 on ItemList2 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByRef.MetaDataName2">
            <summary>
            The second ItemList's metadata which maps to Prop1 metadata on the first Itemlist 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByRef.MergedList">
            <summary>
            The merged ItemList output is normally a copy of ItemList1 plus additional matching metadata
            If this paramater is set to true then the output list does not contain entries from itemlist one
            for which no match was found.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.Checkout">
            <summary>
            Checks files out of Team Source Control
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.Checkout Path="Path" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory"/>]]></code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>Filespec to check out, recursively checks out everything if a folder is specified</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.Checkout
                        Path="$/Depot/Main/Working/file.txt" 
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Checkout.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkout.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkout.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkout.Path">
            <summary>
            Gets or sets the folder or file to be checked out
            </summary>
            <value>FilesSpec</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.LogFileSettings">
            <summary>
            Represents the list of allowable LogFileSettings in a WebSite 
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Web.LogFileSettings.#ctor(Microsoft.Sdc.Tasks.Configuration.Web.WebSite)">
            <summary>
            Constructor
            </summary>
            <param name="site">Web Site object to be updated</param>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Zip.JSEnumerationWrapper">
            <summary>
            Wraps the J# enumeration class
            </summary>    
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.AddElement">
            <summary>
            Adds a new child element to any elements within the specified XML file
            that match the specified XPath expression.  Optionally, it will also 
            add a specified Key Attribute/Value pair to the new element so that subsequent
            tasks can identify the new element.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.AddElement Path="path" XPath="xpath" Name="name" Prefix="prefix" Value="value" KeyAttributeName="keyAttributeName" KeyAttributeValue="keyAttributeValue" Prepend="prepend" Namespaces="namespaces" IgnoreNoMatchFailure="ignoreNoMatchFalure" Force="force"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to modify.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate to find the parent element(s) to add the new element as a child.</para>
            <para><i>Name (Required)</i></para>
            <para>The local name of the new element.</para>
            <para><i>Value</i></para>
            <para>Optional value to give the new element.</para>
            <para><i>Prefix</i></para>
            <para>Optional prefix for the namespace that this new element is to be a member of.</para>
            <para><i>KeyAttributeName</i></para>
            <para>The name of the optional attribute to create in the new element to aid its location by subsequent tasks.</para>
            <para><i>KeyAttributeValue</i></para>
            <para>The value of the optional attribute to create in the new element to aid its location by subsequent tasks.</para>
            <para><i>Prepend</i></para>
            <para>If true the new element is added to the beginning of the child elements of those elements matching the XPath expression.  
            If false the new element is added to the end.  Defaults to false.</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>IgnoreNoMatchFailure</i></para>
            <para>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</para>
            <para><i>Force</i></para>
            <para>If set to true, this will force the file to be updated even if it is Read Only.  Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.AddElement 
            			Path="c:\app.config"
            			XPath="/configuration/appSettings"
            			Name="add"
            			Prefix=""
            			Value="element value"
            			KeyAttributeName="key"
            			KeyAttributeValue="instrumentationConfigFile"
            			Prepend="true"
            			Namespaces="@(ConfigNamespaces)"
            			IgnoreNoMatchFailure="true"
            			Force="true"
            		/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.AddElement.#ctor">
            <summary>
            Create a new AddElement.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.AddElement.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.Name">
            <summary>
            The name of the new element to append to each element matching the XPath Expression.
            </summary>
            <value>The name of the new element to append to each element matching the XPath Expression.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.Prefix">
            <summary>
            Namespace Prefix to use for the new element.
            </summary>
            <value>Namespace Prefix to use for the new element.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.Value">
            <summary>
            The optional value to assign to the new element.
            </summary>
            <value>The optional value to assign to the new element.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.KeyAttributeName">
            <summary>
            The optional attribute to add to the new element.  You can use this and
            the related <see cref="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.KeyAttributeValue"/> to provide a unique key to 
            be able to locate the new element from a group of similarly named parentElements
            once it has been added.
            </summary>
            <value>The optional attribute to add to the new element.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.KeyAttributeValue">
            <summary>
            The optional attribute value to add to the new element.  You can use this and
            the related <see cref="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.KeyAttributeName"/> to provide a unique key to 
            be able to locate the new element from a group of similarly named parentElements
            once it has been added.
            </summary>
            <value>The optional attribute value to add to the new element.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.Prepend">
            <summary>
            If set to true, the new element will be added as the first child of any matching parent elements.  Otherwise it will be set as the last child.
            </summary>
            <value>If set to true, the new element will be added as the first child of any matching parent elements.  Otherwise it will be set as the last child.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.IgnoreNoMatchFailure">
            <summary>
            If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.
            </summary>
            <value>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.AddElement.Force">
            <summary>
            If set to true, this will modify the xml file even if it is read-only.  Defaults to false.
            </summary>
            <value>If set to true, this will modify the xml file even if it is read-only.  Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Wix.CompileMsi">
            <summary>
            Compiles an intermediate <b>*.wixobj</b> file for an MSI from Wix <b>*.wxs</b> input files. This
            intermediate file can then be used with the <see cref="T:Microsoft.Sdc.Tasks.Wix.LinkMsi"/>
            task to create a complete MSI package.
            </summary>
            <remarks>
            <para>
            <b>About Wix:</b> Wix was originally a Microsoft tool that has been released into the open source
            community under the Common Public License. The binaries and source code can be downloaded from
            <a href="http://sourceforge.net/projects/wix">SourceForge</a>.
            </para>
            <code><![CDATA[<CompileMsi SourceFiles="sourceFiles" OutputFile="outputFile" WixPath="wixPath" InformationLevel="informationLevel" WarningLevel="warningLevel" TreatWarningsAsErrors="treatWarningsAsErrors" AdditionalSearchPaths="additionalSearchPaths" CompilationParameters="compilationParameters" />]]></code>
            <para>where:</para>
            <para><i>sourceFiles (Required)</i></para>
            <para>
            A delimited list of the source files to generate the intermediate file from. These will normally have 
            the extension *.wxs. Please refer to the Wix documentation for the schema of these files.
            </para>
            <para><i>outputFile (Required)</i></para>
            <para>
            The path to the intermediate object file to produce. This should have the extension *.wixobj.
            </para>
            <para><i>wixPath (Required)</i></para>
            <para>
            The path to the directory that the Wix executables reside in.
            </para>
            <para><i>informationLevel</i></para>
            <para>
            An integer between zero (verbose information) and three (no information). The default is zero.
            </para>
            <para><i>warningLevel</i></para>
            <para>
            An integer between zero (all warnings) and three (no warnings). The default is zero.
            </para>
            <para><i>treatWarningsAsErrors</i></para>
            <para>
            <b>true</b> if warnings are treated as errors, or <b>false</b> otherwise. The default is <b>false</b>.
            </para>
            <para><i>additionalSearchPaths</i></para>
            <para>
            A delimited list of additional search paths for include files for the compiler.
            </para>
            <para><i>compilationParameters</i></para>
            <para>
            A delimited list of compilation parameters for the compiler, with each parameter in the format
            Name=Value.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <CompileMsi 
                        SourceFiles="SourceFile1.wxs;SourceFile2.wxs" 
                        OutputFile="OutputFile.wxsobj" 
                        WixPath="C:\Program Files\Wix" 
                        InformationLevel="1" 
                        WarningLevel="2" 
                        TreatWarningsAsErrors="true" 
                        AdditionalSearchPaths="C:\Build\Msi\Includes;C:\Build\Msi\References" 
                        CompilationParameters="debug=false;ieversion=6.0;winver=5.1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Wix.WixTaskBase">
            <summary>
            Base class for tasks relating to <b>Wix</b>, the Microsoft tool to build MSI packages from XML 
            source files.
            </summary>
            <remarks>
            <para>
            <b>About Wix:</b> Wix was originally a Microsoft tool that has been released into the open source
            community under the Common Public License. The binaries and source code can be downloaded from
            <a href="http://sourceforge.net/projects/wix">SourceForge</a>.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Wix.WixTaskBase.CompilerName">
            <summary>
            The name of the compiler executable which pre-processes and compiles the XML source files.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Wix.WixTaskBase.DecompilerName">
            <summary>
            The name of the decompiler executable which creates XML files from MSI packages.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Wix.WixTaskBase.LinkerName">
            <summary>
            The name of the linker executable which links the compiled modules.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Wix.WixTaskBase.WixSuccessCode">
            <summary>
            The return code that the Wix executables return when they have successfully run.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.WixTaskBase.EscapeArgument(System.String)">
            <summary>
            Escapes an argument so that it is interpreted correctly. This does things like enclosing in quotes if there
            are spaces and escaping quotes.
            </summary>
            <param name="argument">
            The argument to escape.
            </param>
            <returns>
            The escaped argument.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.WixTaskBase.AppendInformationAndWarningLevelArguments(System.Text.StringBuilder)">
            <summary>
            Appends the information level and warning level arguments.
            </summary>
            <param name="argumentsBuilder">
            The <see cref="T:System.Text.StringBuilder"/> being used to create the arguments for the Wix process.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.WixTaskBase.RunWixProcess(System.String,System.String)">
            <summary>
            Runs the Wix process with the specified arguments, waits for it to finish, and checks that it
            was successful.
            </summary>
            <param name="application">
            The name of the Wix application to run.
            </param>
            <param name="arguments">
            The argument string to pass to the application.
            </param>
            <exception cref="T:System.ApplicationException">
            Thrown when the return code of the application indicates that the process has failed.
            </exception>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.InformationLevel">
            <summary>
            Gets or sets the level of information displayed by the tool.
            </summary>
            <value>
            An integer between zero (verbose information) and three (no information).
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.OutputFile">
            <summary>
            Gets or sets the path to the intermediate object file to produce. This should have the 
            extension *.wxsobj.
            </summary>
            <value>
            The path to the intermediate object file to produce.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.SourceFiles">
            <summary>
            Gets or sets the source file(s). These will normally have the extension *.wxs. Please refer to 
            the Wix documentation for the schema of these files.
            </summary>
            <value>
            The source file(s).
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.TreatWarningsAsErrors">
            <summary>
            Gets or sets a value indicating whether warnings are treated as errors.
            </summary>
            <value>
            <b>true</b> if warnings are treated as errors, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.WarningLevel">
            <summary>
            Gets or sets the level of warnings displayed by the tool.
            </summary>
            <value>
            An integer between zero (all warnings) and three (no warnings).
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.WixPath">
            <summary>
            Gets or sets the path to the directory that the Wix executables reside in.
            </summary>
            <value>
            The path to the directory that the Wix executables reside in.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.LocaleFile">
            <summary>
            Gets or sets the localeFile path (-loc option of light.exe)
            </summary>
            <value>
            A path to the locale file
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.WixTaskBase.EchoOutput">
            <summary>
            Gets or sets a value indicating whether to echoOutput
            </summary>
            <value>
            A bool signifying if the output from the Wix commands should be echoed to the msbuild cmdline output
            </value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.CompileMsi.InternalExecute">
            <summary>
            Executes the task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompileMsi.AdditionalSearchPaths">
            <summary>
            Gets or sets the additional search paths for include files for the compiler.
            </summary>
            <value>
            Additional search paths for include files for the compiler.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompileMsi.CompilationParameters">
            <summary>
            Gets or sets the compilation parameters for the compiler, with each parameter in the format
            Name=Value.
            </summary>
            <value>
            Compilation parameters for the compiler in the format Name=Value.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings">
            <summary>
            Updates the logging settings the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.UpdateLogSettings 
                HostName="hostname" 
                Identifier="identifier"
                Description="description"
                logFileTruncateSize="logFileTruncateSize"
                LogExtFileFlags="LogExtFileFlags" 
                LogFileLocaltimeRollover="LogFileLocaltimeRollover"
                LogFilePeriod="LogFilePeriod" /// />]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Name of Web site to update</para>
            <para><i>identifier</i></para>
            <para>optional parameter to identify website when 'description' is not used</para>
            <para><i>logFileTruncateSize</i></para>
            <para>optional parameter to set max size of log files</para>
            <para><i>LogFileLocaltimeRollover</i></para>
            <para>optional parameter, set to true if logfiles are to use daylight saving time</para>
            <para><i>LogFilePeriod</i></para>
            <para>ptional parameter to set the period of rollover to a new logfile(defaults to loaclhost)</para>
            <para><i>LogExtFileFlags</i></para>
            <para>optional parameter to set Bit mask of the attributes to log</para>
            <para><i>hostname</i></para>
            <para>Host on which the site is configured (defaults to loaclhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.UpdateLogSettings
                        Desciption="mytestsite"
                        logFileTruncateSize=".flv"
                        LogExtFileFlags="video/x-flv"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.InternalExecute">
            <summary>
            Performs the action of this task
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.LogFilePeriod">
            <summary>
            Time period of Log files
            </summary>
            <remarks>
            The following values are valid.
            Or simply supply the integer value required.
            
            LogPeriodDay = 0x00000001,
            LogPeriodWeek = 0x00000002,
            LogPeriodMonth = 0x00000003,
            LogPeriodFileSize = 0x00000000 
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.LogFileLocaltimeRollover">
            <summary>
            Set to true if logfile should use daylight saving time
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.LogFileTruncateSize">
            <summary>
            Number of bytes log files should grow to before 
            starting a new log file
            
            Only used if LogFilePeriod is set to LogPeriodFileSize 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.LogExtFileFlags">
             <summary>
             String describing LogExtFileFlags
             </summary>
             <value>type</value>
             <remarks>
             
             The following values are valid. Use a space separated list to combine flags.
             Or simply supply the integer value required.
             
              LogExtFileDate = 0x00000001, // Log date
              LogExtFileTime = 0x00000002, // Log time
              LogExtFileClientIp = 0x00000004, // Log client IP address
              LogExtFileUserName = 0x00000008, // Log user name
              LogExtFileSiteName = 0x00000010, // Log site name
              LogExtFileComputerName = 0x00000020, // Log computer name
              LogExtFileServerIp = 0x00000040, // Log server's own IP address
              LogExtFileMethod = 0x00000080, // Log protocol method
              LogExtFileUriStem = 0x00000100, // Log URI stem
              LogExtFileUriQuery = 0x00000200, // Log URI query
              LogExtFileHttpStatus = 0x00000400, // Log HTTP status
              LogExtFileWin32Status = 0x00000800, // Log WIN32 status
              LogExtFileBytesSent = 0x00001000, // Log total bytes sent
              LogExtFileBytesRecv = 0x00002000, // Log total bytes received
              LogExtFileTimeTaken = 0x00004000, // Log total time elapsed
              LogExtFileServerPort = 0x00008000, // Log server port
              LogExtFileUserAgent = 0x00010000, // Log user agent
              LogExtFileCookie = 0x00020000, // Log cookie
              LogExtFileReferer = 0x00040000, // Log referrer
              LogExtFileProtocolVersion = 0x00080000, // Log client server protocol version
              
              // default settings: or this with the settings you want to add to the default set
              LogExtDefault = 0x00218fdf,
            
              // The following values are not available for IIS 5.0 (Windows 2000)
              LogExtFileHost = 0x00100000, // [IIS 5.1][IIS 6.0] Log the name of host server.
              LogExtFileHttpSubStatus = 0x00200000, // [IIS 6.0] Log the sub-status code of the HTTP error. For example,
              
              LogExtFileAll_2000 = 0xFFFFF, // [IIS 5.0] Log everything
              LogExtFileAll_XP = 0x1FFFFF, // [IIS 5.1] Log everything
              LogExtFileAll = 0x3FFFFF // [IIS 6.0] Log everything (This seems to work fine on IIS 5.0 and IIS 5.1 also)
             </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.Description">
            <summary>
            Description of web site that we are updating
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.Identifier">
            <summary>
            web site idenfitier for website that we are updating
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateLogSettings.Description">Description</seealso> 
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.ServiceExtension.DeleteFile">
            <summary>
            Deletes the specified web service extension file (IIS6 or later)
            </summary>
            <remarks>
            <code><![CDATA[
                <Web.ServiceExtension.DeleteFile Path="path" />]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>Fully specified path to the extension file</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.ServiceExtension.DeleteFile 
                        Path="c:\myweb\myextensionservice.dll" 
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.ServiceExtension.DeleteFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.DeleteFile.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.DeleteFile.Path">
            <summary>
            Path to the web extension service executable
            </summary>
            <value>Fully specified path to the web extension service file</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.AppPool.Modify">
            <summary>
            Modifies an existing Applcation Pool (IIS6 or later).
            </summary>
            <remarks>
            <code><![CDATA[<Web.AppPool.Create AppPoolName="appPoolName" IdentityType="identityType" 
            Identity="identity" Password="password" IdleTimeout="idletimeout" PeriodicRestartTime="periodicRestartTime" WorkerProcesses="workerProcesses" />]]></code>
            <para>where:</para>
            <para><i>appPoolName (Required)</i></para>
            <para>Any existing IIS pool name</para>
            <para><i>identityType (Required)</i></para>
            <para>One of LocalSystem, LocalService, NetworkService, SpecifiedUserAccount</para>
            <para><i>identity (Required if identitytype is set to "SpecifiedUserAccount")</i></para>
            <para>Username to run the application pool as</para>
            <para><i>password (Required if identitytype is set to "SpecifiedUserAccount")</i></para>
            <para>Password for the application pool identity</para>
            <para><i>idletimeout</i></para>
            <para>The idle timeout (in minutes) for the application pool</para>
            <para><i>periodicRestartTime</i></para>
            <para>The periodic restart time (in minutes) for the application pool</para>
            <para><i>workerProcesses</i></para>
            <para>The number of worker processes for the application pool</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.AppPool.Modify
                        AppPoolName="Existing Application Pool"
                        IdentityType="SpecifiedUserAccount"
                        Identity="pooluser"
                        Password="pool$1234"
                        IdleTimeout="40"
                        PeriodicRestartTime="60"
                        WorkerProcesses="1"
                       />
                </Target>
            </Project>
            ]]></code>
            </example>    
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.name">
            <summary>
            The name of the application pool to create.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.pipelineMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.identityType">
            <summary>
            The identity type for this application pool.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.identity">
            <summary>
            Username to run identity pool as. 
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.password">
            <summary>
            Password for the Application Pool <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.Identity">identity</see>
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.idleTimeout">
            <summary>
            The IdleTimeout metabase value in minutes, set to 0 to disable the idle time-out.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.idleTimeoutSet">
            <summary>
            Specifies whether the IdleTimeout metabase value is set.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.periodicRestartTime">
            <summary>
            The PeriodicRestartTime metabase value in minutes, set to 0 to disable periodic restart.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.periodicRestartTimeSet">
            <summary>
            Specifies whether the PeriodicRestartTime metabase value is set.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.workerProcesses">
            <summary>
            The MaxProcesses metabase value. Default is 1.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Modify.workerProcessesSet">
            <summary>
            Specifies whether the MaxProcesses metabase value is set.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.AppPool.Modify.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.AppPoolName">
            <summary>
            Name of the application pool to create
            </summary>
            <value>Any valid IIS application pool name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.IdentityType">
            <summary>
            Identity type for this application pool
            </summary>
            <value>One of:
            LocalSystem 
            LocalService
            NetworkService
            SpecifiedUserAccount</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.Identity">
            <summary>
            Username to run identity pool as. 
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
            <value>A valid, existing AD/NT username</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.Password">
            <summary>
            Password for the Application Pool <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.Identity">identity</see>
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
            <value>A valid password for the identity account</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.IdleTimeout">
            <summary>
            Used to configure the IdleTimeout metabase property
            </summary>
            <value>The IdleTimeout value in minutes, set to 0 to disable IdleTimeout</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.PeriodicRestartTime">
            <summary>
            Gets or sets the PeriodicRestartTime metabase property.
            </summary>
            <value>The PeriodicRestartTime value in minutes, set to 0 to disable periodic restart.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Modify.WorkerProcesses">
            <summary>
            Gets or sets the MaxProcesses metabase value. Default is 1.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.UnregisterVirtualMachine">
            <summary>
            TODO
            Starts a virtual machine.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Start
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout">
            </VirtualServer.VirtualMachine.Start>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be started.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the start task to complete, in milliseconds. Defaults to 10.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Start
                        MachineName="myMachine"
                        Timeout="20"
                    </VirtualServer.VirtualMachine.Start> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.UnregisterVirtualMachine.#ctor">
            <summary>
            Initializes a new instance of the UnregisterVirtualMachine class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.UnregisterVirtualMachine.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.UnregisterVirtualMachine.Timeout">
            <summary>
            Length of time to wait for the register task to complete, in seconds.
            </summary>
            <value>Length of time to wait for the start task to complete, in seconds. Defaults to 10.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.UnregisterVirtualMachine.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.UnregisterVirtualMachine.MachineName">
            <summary>
            The name of the virtual machine to be unregistered.
            </summary>
            <value>The name of the virtual machine to be unregistered.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate">
            <summary>
            Updates a versionnumber.exe.config file to the correct number
            </summary>
            <remarks>
            Note. This checks out the file in question from Source Control, updates the number and then checks the updated file back in.
            It only works with Source Depot currently.
            <code><![CDATA[
            <VersionNumber.Update
                        ConfigFileLocation="configFileLocation"
                        OnlyIncrementRevision="onlyIncrementRevision"
                        <Output TaskParameter="VersionNumber" ItemName="versionNumberItem"></Output>
            </VersionNumber.Update>
            ]]></code>
            <para>where:</para>
            <para><i>configFileLocation (Required)</i></para>
            <para>Fully qualified file name to the xml config file. The file contains, in Xml format, the major, minor, build and revision number.</para>
            <para>
            For example:
            
            <example>
            <code><![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
                <configuration>
                    <appSettings>
                        <add key="major" value="1" />
                        <add key="minor" value="2" />
                        <add key="build" value="1354" />
                        <add key="revision" value="155" />
                    </appSettings>
                </configuration>
            ]]></code>    
            </example>
            </para>
            <para><i>onlyIncremementRevision</i></para>
            <para>Force Revision only change. So 2.0.1188.14 would be 2.0.1188.15 on the next automatic label from the source control system.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VersionNumber.Update VersionNumberConfigFileLocation="@(VersionXmlFile)">
                        <Output TaskParameter="VersionNumber" ItemName="VersionNumber" />
                    </VersionNumber.Update>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.#ctor">
            <summary>
            Initializes a new instance of the UpdateVersionNumber class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.InternalExecute">
            <summary>
            TODO
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.IncrementVersionNumbers">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.LoadVersionNumber">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.SaveVersionNumber">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.VersionNumber">
            <summary>
            TODO
            </summary>
            <value>TODO</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.ConfigVssLocation">
            <summary>
            If specified then this value represents the location in VSS of the VersionNumber file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.SkipSourceControl">
            <summary>
            If TRUE doesn't checkout or submit to source control
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.UseVss">
            <summary>
            If TRUE uses VSS for source control
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.OnlyIncrementBuild">
            <summary>
            If TRUE only the build part of the build number will be incremented
            </summary>
            <value>Force Build increment change. So 2.0.1188.0 would be 2.0.1189.0 on the next automatic label from the source control system.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.OnlyIncrementRevision">
            <summary>
            If TRUE only the revision part of the build number will be incremented
            </summary>
            <value>Force Revision only change. So 2.0.1188.14 would be 2.0.1188.15 on the next automatic label from the source control system.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.VersionNumberFormat">
            <summary>
            If specified then this value indicates how the build number is calculated. i.e. a format of yyMMdd on July 15th ,2004 would give 040715. Note, this must only contain valid date formatting characters.
            If not specified the the build number format is the number of days since startDate from the xmlFile. If startDate is not specified then it defaults to Jan 1st, 2000.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.Database">
            <summary>
            If specified then this value represents the VSS database location in VSS format e.g. V:\SourceSafe.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.Username">
            <summary>
            If specified then this value represents the VSS username that has access to the database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.VSSUpdate.Password">
            <summary>
            If specified then this value represents the password for the VSS username specified.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Vault.GetLabel">
            <summary>
            Performs a GETLABEL from the Sourcegear Vault server specified.
            </summary>
            <remarks>
            <code><![CDATA[
            <Vault.GetLabel
                    Server="server" 
                    Repository="repository"
                    Username="username"
                    Password="password"
                    DestinationDirectory="destinationPath"
                    ItemPath="itemPath"
                    Label="label" 
                    VaultClientPath="clientExePath"
                    UseSSL="useSSL"
            />
            ]]></code>
            <para>where:</para>
            <para><i>server</i></para>
            <para>The IP address or hostname of the Vault server to connect to.</para>
            <para><i>username</i></para>
            <para>The Vault username.</para>
            <para><i>password</i></para>
            <para>The password for the username specified in <i>username</i></para>
            <para><i>destinationPath</i></para>
            <para>The full path to download repository files to.</para>
            <para><i>itemPath</i></para>
            <para>The full repository path to the item to perform the get operation on.</para>
            <para><i>label</i></para>
            <para>The label version to get for item specified in <i>itemPath</i></para>
            <para><i>clientExePath</i></para>
            <para>Optional - the path to vault.exe.  If the Vault registry keys exist or the path to vault.exe is set in your enviroment path, this does not need to be used.</para>
            <para><i>useSSL</i></para>
            <para>Optional (default False) - if set SSL will be used to communicate with the Vault server.  If enabled the Vault server specified in <i>server</i> must support SSL.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Vault.GetLabel
                            Server="192.168.1.100" 
                            Repository="MyCode"
                            Username="username"
                            Password="password"
                            DestinationDirectory="c:\build_1000"
                            ItemPath="$/Repos/Item"
                            Label="build_1000" 
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.GetLabel.InternalExecute">
            <summary>
            This is the main execute method that all tasks should implement
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.GetLabel.VaultGetLabel(Microsoft.Sdc.Tasks.Configuration.ShellExecute)">
            <summary>
            Gets the label.
            </summary>
            <param name="shell">The shell.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.ItemPath">
            <summary>
            Gets or sets the item path.
            </summary>
            <value>The item path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.DestinationDirectory">
            <summary>
            Gets or sets the destination directory.
            </summary>
            <value>The destination directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.UseSSL">
            <summary>
            Gets or sets a value indicating whether [use SSL].
            </summary>
            <value><c>true</c> if [use SSL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLabel.VaultClientPath">
            <summary>
            Gets or sets the vault client path.
            </summary>
            <value>The vault client path.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.FxCop">
            <summary>
            Runs FxCop analysis on the assemblies specified, creates a summary file and returns the total number of violations.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Tools.FxCop Assemblies="assemblies"
                         ProjectFilePath="projectFilePath"
                         ProjectTemplateFilePath="projectTemplateFilePath"
                         OutFileName="outFileName">
                <Output TaskParameter="TotalViolations" ItemName="itemName" />
            </Tools.FxCop>
            ]]></code>
            <para>where:</para>
            <para><i>assemblies (Required)</i></para>
            <para>The fullpaths to the assemblies to analyze.</para>
            <para><i>projectFilePath (Required)</i></para>
            <para>This will be the FxCop file that will be created from the template.</para>
            <para><i>projectTemplateFilePath (Required)</i></para>
            <para>An .FxCop file to use as a template.</para>
            <para><i>outFileName (Required)</i></para>
            <para>The name of the file to create with the FxCop summary in it.</para>
            <para><i>itemName</i></para>
            <para>The name of the item to create for MSBuild. It will be referred to as @(itemName).</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <ItemGroup>
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.dll" />
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.Test.dll" />
                </ItemGroup>
                <Target Name="Test" >
                    <Tools.FxCop
                        ContinueOnError="true"
                        Assemblies="@(Assemblies->'%(FullPath)')" 
                        ProjectFilePath="$(MSBuildProjectDirectory)\Output\Main\Main.FxCop" 
                        ProjectTemplateFilePath="$(MSBuildProjectDirectory)\FxCop\Main\main.FxCop" 
                        OutFileName="$(MSBuildProjectDirectory)\Output\Main\FxCopErrors.xml">
                        <Output TaskParameter="TotalViolations" ItemName="FxCopViolations" />
                    </Tools.FxCop> 
                    <Message Text="@(FxCopViolations) FxCop violations" />       
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.FxCop.#ctor">
            <summary>
            Initializes a new instance of the FxCop class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.FxCop.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of FxCop</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.FxCop.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.FxCop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.FxCop.ProjectFilePath">
            <summary>
            This will be the FxCop file that will be created from the template.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.FxCop.ProjectTemplateFilePath">
            <summary>
            An .FxCop file to use as a template.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.FxCop.OutFileName">
            <summary>
            The name of the file to create with the FxCop summary in it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.FxCop.Assemblies">
            <summary>
            he fullpaths to the assemblies to analyze.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.FxCop.TotalViolations">
            <summary>
            The number of FxCop violations found
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.FxCop.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Registry.DeleteKeyTree">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.DeleteKeyTree.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.DeleteKeyTree.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.DeleteKeyTree.MachineName">
            <summary>
            Defaults to local machine if not specified.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.DeleteKeyTree.Value">
            <summary>
            If not specified then the default for the key is returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.LogicalComparison.Comparison">
            <summary>
            Supports 'GreaterThan', 'LessThan', 'GreaterThanOrEquals', 'LessThanOrEquals'
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.InsertAfter">
            <summary>
            Inserts a node inot a hhc project.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.CreateProject SourceFolder="folder" />
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertAfter.#ctor">
            <summary>
            Initializes a new instance of the InsertAfter class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertAfter.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.File.GetFiles">
            <summary>
                 Allows an item list to be produced based upon searching a directory for matching file types.
                 Multiple file types to search can be specified.
            
                 Multiple inclusions and exclusions can be specified, both of which can contain folders and 
                 explicit files.
            </summary>
            <remarks>
            <code><![CDATA[<File.GetFiles Path="path" Masks="masks" Include="include" Exclude="exclude" Recursive="recursive" Group="group">
                            <Output TaskParameter="OutputFiles" ItemName="OutputFiles" />
                           </File.GetFiles>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>
            An item list of paths to use as the root for file searches.
            </para>
            <para><i>include (Optional)</i></para>
            <para>
            An item list of files to include.  This can be usefull for adding files that 
            don't physically exist in the directory being searched.
            </para>
            <para><i>exclude (Optional)</i></para>
            <para>
            An item list of folders and/or absolute files that should be excluded from the search.
            </para>
            <para><i>recursive (Optional)</i></para>
            <para>
            Specifies if the search should include all sub-folders under the paths specified by the <i>Path</i> property.
            This defaults to true.
            </para>
            <para><i>group (Optional)</i></para>
            <para>
            Specifies the value to apply to an attribute of the item list produced by the task.  The attribute is called Group.
            </para>
            <para><i>OutputFiles (Output)</i></para>
            <para>
            The item list resulting from the file search.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <File.GetFiles 
                        Path="c:\MyXmlFiles"
                        Masks="*.xml">
                      <Output TaskParameter="OutputFile" ItemName="MyXmlFilesItemList"/>
                    </File.GetFiles>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.DocumentExceptions">
            <summary>
            Creates an HTML page that summarises all exception classes found within project documentation files.
            </summary>
            <remarks>    
            To use this task projects within the solution must be set to generate XML documenation files. Also
            The summary comments for all exception classes should be of the following format:-
             
            <![CDATA[          /// <summary>
                               /// The specified Credential does not exist
                               /// </summary>
                               /// <remarks>
                               /// This error occurs when the user supplies credentials that cannot be validated.     
                               /// Either the password or the user id are invalid.        
                               ///    <ErrorNumber>2120</ErrorNumber>
                               /// </remarks>
            ]]>
            <code><![CDATA[<Help.DocumentExceptions DocumentationFiles="File1.xml;File2.xml" OutputFile="Exceptions.htm" />]]></code>
            <para>where:</para>
            <para><i>DocumentationFiles</i></para>
            <para>List of XML documentation files, one for each project in the solution</para>
            <para><i>OutputFile</i></para>
            <para>Name of HTML documentation file to generate</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.DocumentExceptions.#ctor">
            <summary>
            Initializes a new instance of the DocumentExceptions class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.DocumentExceptions.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.DocumentExceptions.AddExceptions(System.String)">
            <summary>
            Add exceptions found in the documentation file to this class'
            exception list.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.DocumentExceptions.RenderPage(System.Web.UI.HtmlTextWriter)">
            <summary>
            Output the HTML 
            </summary>
            <param name="writer">output writer</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.DocumentExceptions.DocumentationFiles">
            <summary>
            The array of the full paths of the files to be documented
            </summary>
            <value>The file names and full path of the files to be documented</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.DocumentExceptions.OutputFile">
            <summary>
            The full path to the Html File to create.
            </summary>
            <value>Html File to create</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.File.DeleteFiles">
            <summary>
            Deletes files nad if neccessary can remove readonly files.
            </summary>
            <remarks>
            <code><![CDATA[<File.DeleteFiles Files="files" TreatErrorsAsWarnings="treatErrorsAsWarnings" Force="force" />]]></code>
            <para>where:</para>
            <para><i>files (Required)</i></para>
            <para>The file(s) to be deleted.</para>
            <para><i>treatErrorsAsWarnings</i></para>
            <para>True to treat any errors whilst deleting as warnings.</para>
            <para><i>force</i></para>
            <para>True to force the deletion of the file(s) if they are readonly.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <File.DeleteFiles
                        Files="C:\CopiedAssemblies\bob.dll"
                        TreatErrorsAsWarnings="false"
                        Force="true">
                        <Output TaskParameter="DeletedFiles" ItemName="FilesThatWereDeleted" />
                    </File.DeleteFiles>
                    <Message Text="The files that were removed were @(FilesThatWereDeleted)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.File.DeleteFiles.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.DeleteFiles.TreatErrorsAsWarnings">
            <summary>
            If TRUE any errors will be logged as warnings
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.DeleteFiles.Files">
            <summary>
            The files to be deleted
            </summary>
            <value>An ITaskItem array of files</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.DeleteFiles.DeletedFiles">
            <summary>
            The files that were successfully deleted
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.DeleteFiles.Force">
            <summary>
            If set to true, it will set the attributes of all files such that they can be deleted.
            </summary>
            <value>True to force the deletion of files, otherwise false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.Sid">
            <summary>
            Summary description for Sid.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.Sid.UnsafeCreateSid(System.String,Microsoft.Sdc.Tasks.Configuration.SID_IDENTIFIER_AUTHORITY,System.UInt32[])">
            <summary>
             Create a SID blob given an Authority and a variable array of sub authorities.
            </summary>
            <param name="machineName"></param>
            <param name="IdentifierAuthority"></param>
            <param name="SubAuthorities"></param>
            <returns>The Sid object</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.DisposableObject">
            <summary>
             Abstract base class for any disposable object.
             Handle the finalizer and the call the Gc.SuppressFinalize.
             Derived classes must implement "Dispose(bool disposing)".
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.SolutionSectionGenerator">
            <summary>
            Summary description for SolutionSectionGenerator.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.NativeMethods">
            <summary>
            Provides wrappers for Win32 native methods
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.ProductList">
            <summary>
            A collection of products
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ExternalDll">
            <summary>
            Provides constants for external dll names
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Network.GetIPByHostName">
            <summary>
            Returns the IP addresses of a given hostname
            </summary>
            <remarks>
            <code><![CDATA[ 
            <Network.GetIPByHostName HostName="www.microsoft.com">
                   <Output TaskParameter="FirstIPAddress" PropertyName="firstIP" />
                   <Output TaskParameter="AllIPAddress" PropertyName="allIPs" />
            </Network.GetIPByName>
            ]]></code>
            
            <para>where:</para>
            <para><i>HostName (Required)</i></para>
            <para>hostname to resolve
            </para>
            <para>FirstIPAddress</para>
            <para> The first IP address for the hostname returned by DNS
            </para>   
            </remarks>
            <example>
            <code><![CDATA[ 
            <Network.Output HostName="www.microsoft.com">
                   <Output TaskParameter="FirstIPAddress" PropertyName="firstIP" />
                   <Output TaskParameter="AllIPAddress" PropertyName="allIPs" />
            </Network.GetIPByName>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.GetIPByHostName.firstIPAddress">
            <summary>
            first IP address
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.GetIPByHostName.allIPAddresses">
            <summary>
            all IP addresses
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.GetIPByHostName.hostName">
            <summary>
            host name
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.GetIPByHostName.hostExists">
            <summary>
            Host exists
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.GetIPByHostName.treatErrorsAsWarnings">
            <summary>
            Treat Errors As Warnings
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Network.GetIPByHostName.#ctor">
            <summary>
            Initializes a new instance of the GetIPByName class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Network.GetIPByHostName.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.GetIPByHostName.HostName">
            <summary>
            The host name to resolve
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.GetIPByHostName.TreatErrorsAsWarnings">
            <summary>
            Treat Errors As Warnings
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.GetIPByHostName.IPAddress">
            <summary>
            The IP address
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.GetIPByHostName.AllIPAddresses">
            <summary>
            Returns an array of all ip addresses
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.GetIPByHostName.HostExists">
            <summary>
            HostExists
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.MergeByOrder">
            <summary>
            Takes two item lists as input and merges them together.
            </summary>
            <remarks>
            <code><![CDATA[<MergeByOrder ItemList1="@(list1)" ItemList2="@(list2)">
                            <Output TaskParameter="MergedList" ItemName="MergedList" />
                           </MergeByOrder>]]></code>
            <para>where:</para>
            <para><i>list1 (Required)</i></para>
            <para>The first ItemList to be merged</para>
            <para><i>list2 (Required)</i></para>
            <para>The second ItemList to be merged</para>
            <para><i>MergedList (Output)</i></para>
            <para>The merged ItemList </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <MergeByOrder
                        ItemList1="@(SharesToCreate)"
                        ItemList2="@(SharesExists)"/>
                            <Output TaskParameter="MergedList" PropertyName="SharesToReallyCreate" />
                    </ShortenPath>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MergeByOrder.#ctor">
            <summary>
            MergeByOrder
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MergeByOrder.InternalExecute">
            <summary>
            InternalExecute
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByOrder.ItemList1">
            <summary>
            he first ItemList to be merged 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByOrder.ItemList2">
            <summary>
            The second ItemList to be merged 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MergeByOrder.MergedList">
            <summary>
            The merged ItemList.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.InstallPatch">
            <summary>
            Installs an MSI Patch. The patch will use properties that are already part of the 
            current MSI that it is being patched, other properties can be passed during execution 
            via the command line. In the case of property files only the properties that are marked 
            //Property/@Embed='false' are passed via the command line as it is assumed that the embedded 
            properties within the MSI are already there.
            </summary>
            <remarks>
            <code><![CDATA[<Msi.InstallPatch MspPath="mspPath" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" PropertyFiles="propertyFiles" Properties="properties" Features="features" />]]></code>
            <para>where:</para>
            <para><i>mspPath (Required)</i></para>
            <para>
            The path to the MSI to install.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the installation. The recommended file name is the name of the MSI
            with the extension *.install.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom installation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>propertyFiles</i></para>
            <para>
            A delimited list of XML property files that provide installation properties for the MSI. 
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </para>
            <para><i>properties</i></para>
            <para>
            A delimited list of installation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </para>
            <para><i>features</i></para>
            <para>
            A delimited list of the names of features to be installed. This is not necessary if the MSI does not
            have features configured, or you wish all features to be installed.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Msi.InstallPatch 
                        MspPath="C:\Build\Msi\Packages\MyPatch.msp" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.install.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        PropertyFiles="C:\Build\Properties\Global.xml;C:\Build\Properties\Rig4.xml" 
                        Properties="INSTALLDIR=C:\Install;DOMAIN=rig4;MACHINE=r4app01"
                        Features="MSMQ,BTS2004,WebServices" />
                </Target>
            </Project>
            ]]></code>  
            A sample property file is shown below. Note that you must include the namespace for the file to
            be parsed correctly.
            <code><![CDATA[
            <Properties xmlns="urn:sdc-microsoft-com:deployment:properties:v2.0">
                <Property Name="MY_PROPERTY" Value="some value" />
                <Property Name="ANOTHER_PROPERTY" Value="some other value" />
                <Property Name="SOMETHING_ELSE" Value="hello world" />
                ... etc ...
            </Properties>
            ]]></code>
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.MsiInstallTaskBase">
            <summary>
            Base class for tasks that invoke MsiExec to perform install actions on MSI packages.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.MsiInstallTaskBase.features">
            <summary>
            The features selected to be installed from the MSI. This may be <b>null</b>.
            </summary>
            <remarks>
            This property is not necessary if either the MSI does not have any features, or if you want all features in the
            MSI to be installed. If you do wish to select particular features then this is a list of the names.
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.MsiInstallTaskBase.#ctor">
            <summary>
            Initializes a new instance of the MsiInstallTaskBase class.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.MsiInstallTaskBase.Features">
            <summary>
            Gets or sets the features selected to be installed from the MSI. This may be <b>null</b>.
            </summary>
            <remarks>
            This property is not necessary if either the MSI does not have any features, or if you want all features in the
            MSI to be installed. If you do wish to select particular features then this is a list of the names.
            </remarks>
            <value>
            A list of features selected to be installed from the MSI.
            </value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.InstallPatch.InternalExecute">
            <summary>
            Executes the task to install the MSI.
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.InstallPatch.MspPath">
            <summary>
            Gets or sets the full or relative path to the MSI.
            </summary>
            <value>
            The full or relative path to the MSI.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.InstallPatch.MsiPath">
            <summary>
            hides the base implementation
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.InstallPatch.ProductCode">
            <summary>
            hides the base implementation
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.NodeExists">
            <summary>
            Gets whether there are any nodes matching the specified XPath expression
            within the specified XML file.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.NodeExists Path="path" XPath="xpath" Namespaces="namespaces"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to read.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate to search for the specified Node(s).</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>Value (Output)</i></para>
            <para>True, at least one match for the XPath has been found.  False, no matches found.</para>
            <para><i>Count (Output)</i></para>
            <para>The number of matches found for the XPath expression.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.NodeExists 
            				Path="c:\app.config"
            				XPath="/configuration/appSettings/add[@key='myKey']"
            				Namespaces="@(ConfigNamespaces)">
            			<Output TaskParameter="Value" Property="appSettings.myKey.exists"/>
            		</XmlFile.NodeExists>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.NodeExists.#ctor">
            <summary>
            Create a new ChangeCount.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.NodeExists.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.NodeExists.Count">
            <summary>
            The number of matches for the XPath Expression found.
            </summary>
            <value>The number of matches for the XPath Expression found.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.NodeExists.Value">
            <summary>
            Indicates whether any matches for the XPath Expression have been found, or not.
            </summary>
            <value>Indicates whether any matches for the XPath Expression have been found, or not.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags">
            <summary>
            Update the SslFlags for a web site or a virtual directory
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.sslAccessFlags">
            <summary>
            the ssl flags
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.description">
            <summary>
            The description of the web site to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.identifier">
            <summary>
            The identifier of the website to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.virtualDirectory">
            <summary>
            a named vdir should the mapping be required on a subfolder
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.InternalExecute">
            <summary>
            Update the ssl flags
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.ParseSslFlags(System.String)">
            <summary>
            Extract the ssl flags from the supplied string
            </summary>
            <param name="flagString">the string contains space delimited ssl flags</param>
            <returns>The ssl flags</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.VirtualDirectory">
            <summary>
            a named vdir should the mapping be required on a subfolder
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.Description">
            <summary>
            Description of web site to modify
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.Identifier">Identifier</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.Identifier">
            <summary>
            web site idenfitier to modify
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.UpdateSslFlags.SslAccessFlags">
            <summary>
            SslAccessFlags. Configures the ssl restrictions for the site that is to be updated.
            </summary>
            <value>integer</value>
            <remarks>
            
            The following values are valid. Use a space separated list to combine flags.
            Or simply supply the integer value required.
            
            Defaults to SslAny (SSL not required)
            
             SslAny = 0x00000000
             RequireSsl = 0x00000008
             RequireSsl128 = 0x00000100
             MapClientCert = 0x00000080
             RequestClientCert = 0x00000020
             RequireClientCert = 0x00000040
             
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Start">
            <summary>
            Starts a stopped web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Start (Description="description"  || 
              Identifier="identifier">)]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>A valid web site identifier</para>
            <para><b>You must specify either a description or an identifier</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Start Description="testwebsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Start.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Start.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Start.Description">
            <summary>
            Description of web site to start
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Start.Identifier">Identifier</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Start.Identifier">
            <summary>
            web site idenfitier to start
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Start.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping">
            <summary>
            Delete a Certificate Mapping
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.description">
            <summary>
            The description of the web site to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.identifier">
            <summary>
            The identifier of the website to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.accountUsername">
            <summary>
            The username that is to be un-mapped
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.AccountUsername">
            <summary>
            The username that is to be un-mapped
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.Description">
            <summary>
            Description of web site to modify
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.Identifier">Identifier</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.Identifier">
            <summary>
            web site idenfitier to modify
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteCertificateMapping.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter">
            <summary>
            Adds a new host/ip binding to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.AddFilter 
                MachineName="machineName" 
                Identifier="identifier"
                Description="description"
                FilterName="filterName"
                FilterPath="filterPath" />]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description to apply binding to</para>
            <para><i>identifier</i></para>
            <para>Web site identifier to apply binding to</para>
            <para><i>FilterName (Required)</i></para>
            <para>Name of new ISAPI filter</para>
            <para><i>FilterPath (Required)</i></para>
            <para>Path to new Filter executable</para>
            <para><i>machineName</i></para>
            <para>Machine to operate on(defaults to localhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.AddFilter
                        Desciption="mytestsite"
                        FilterName="Quova Filter"
                        FilterPath="c:\Program Files\Quova\Quova.dll"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.FilterName">
            <summary>
            Name for new ISAPI Filter
            </summary>
            <value>A valid filter description</value>
            <remarks>required</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.FilterPath">
            <summary>
            Path to executable for new ISAPI Filter
            </summary>
            <value>a valid path to an ISAPI dll available on the Web Server</value>
            <remarks>required</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.Description">
            <summary>
            Description of web site to which we are adding the filter
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.Identifier">
            <summary>
            web site idenfitier for website to which we are adding the filter
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddFilter.Description">Description</seealso> 
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Time.Report">
            <summary>
            Creates an XML element in an XML file to store a time and description.
            </summary>
            <remarks>
            <Time.Report XmlFile="output.xml" Description="A Description" Time="hh:mm:ss" Version="1.0.040825.000"/>
            <para>where:</para>
            <para><i>XmlFile (Required)</i></para>
            <para>The name of the XmlFile to which the report will be added.</para>
            <para><i>Description (Required)</i></para>
            <para>The description to give to the report.</para>
            <para><i>Time (Required)</i></para>
            <para>A valid time in the format hh:mm:ss.  This will be converted into seconds in the xml file.</para>
            <para><i>Group (Optional)</i></para>
            <para>A text value that can be used to group several times relating to one description.
                  This provides a way of tracking times for a description over several runs.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Time.Report XmlFile="output.xml" Description="A Description" Time="hh:mm:ss" Version="Some text"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Time.Report.#ctor">
            <summary>
            Initializes a new instance of the Diff class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Time.Report.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.StringReplace.InternalExecute">
            <summary>
            required workhorse
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.StringReplace.Input">
            <summary>
            The string that is to be manipulated
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.StringReplace.OldValue">
            <summary>
            The string to replace in the <see cref="P:Microsoft.Sdc.Tasks.StringReplace.Input"/> string.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.StringReplace.NewValue">
            <summary>
            The string to replace with in the <see cref="P:Microsoft.Sdc.Tasks.StringReplace.Input"/> string.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.StringReplace.Output">
            <summary>
            The resulting output string.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.PerformanceCounters.Remove">
            <summary>
            Removes performance counters from the local machine
            </summary>
            <remarks>
            <code><![CDATA[<PerformanceCounters.Remove CategoryName="categoryName" />]]></code>
            <para>where:</para>
            <para><i>categoryName (Required)</i></para>
            <para>
            The name of the custom performance counter category to remove from the local computer. The specified 
            category and its associated counters will be removed.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <PerformanceCounters.Remove
                        CategoryName="myCategory" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.PerformanceCounters.Remove.#ctor">
            <summary>
            Initializes a new instance of the Remove class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.PerformanceCounters.Remove.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.PerformanceCounters.Remove.CategoryName">
            <summary>
            The name of the custom performance counter category to remove from the local computer.
            </summary>
            <value>The name of the custom performance counter category to remove from the local computer.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.MessageQueue.DeleteQueue">
            <summary>
            Deletes the specified Message Queue.
            </summary>
            <remarks>
            <code><![CDATA[<MessageQueue.DeleteQueue QueuePath="queuePath" />]]></code>
            <para>where:</para>
            <para><i>queuePath (Required)</i></para>
            <para>
            The location of the queue to be deleted. The path must be prefixed by the machine name (or "." to represent the local computer). 
            See <see cref="P:System.Messaging.MessageQueue.Path"/> for more details.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <MessageQueue.DeleteQueue
                        QueuePath=".\\TempQueue" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageQueue.DeleteQueue.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.DeleteQueue.QueuePath">
            <summary>
            The path of the queue to delete.
            </summary>
            <value>See <see cref="P:System.Messaging.MessageQueue.Path"/> for more details on correct formats for this property</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetMetadataValueFromList.#ctor">
            <summary>
            Initializes a new instance of the GetMetadataValueFromList class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetMetadataValueFromList.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.MemoryMarshaler">
            <summary>
            Summary description for MemoryMarshaler.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.Health">
            <summary>
            Summary description for Health.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.BinaryComparisonOperator">
            <summary>
            Type of comparison to perform
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Group">
            <summary>
            This represents a Group in the Active Directory.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.Group.Exists(System.String,System.String)">
            <summary>
            This checks the provided Active Directory for the groupName provided
            </summary>
            <param name="groupName">The groupName to check for</param>
            <param name="domainName">The domain name to check in</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Application.RemoveComponent">
            <summary>
            Removes a specified Component from the specified ComponentServices Application.
            </summary>
            <remarks>
            <code><![CDATA[<ComponentServices.Application.RemoveComponent Path="path" ApplicationName="applicationName" ConstructorString="constructorString" Runtime="runtime" />]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The path to the component DLL to be removed from the application.</para>
            <para><i>applicationName</i></para>
            <para>The name of the COM+ application which the component will be removed from. If there are multiple applications with the same name, the component will be removed from all of them.</para>
            <para><i>runtime</i></para>
            <para>Decimal value for version of runtime targeted. Defaults to "2.0"</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Application.RemoveComponent
                        Path="C:\Soutions\MyNamespace.MyAssembly.dll"
                        ApplicationName="MyApplicationName"
                        Runtime="1.1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Application.RemoveComponent.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.RemoveComponent.Path">
            <summary>
            Gets or sets the path to the component DLL to be removed from the application.
            </summary>
            <value>Valid path to the component DLL</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.RemoveComponent.ApplicationName">
            <summary>
            Gets or sets the name of the COM+ application which the component will be removed from. 
            </summary>
            <value>The application name that the specified component will be removed from. If there are multiple applications with the same name, the component will be removed from all of them.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.RemoveComponent.Runtime">
            <summary>
            Gets or sets the Decimal value for version of runtime targeted.
            </summary>
            <value>The version of the .NET runtime targeted. Defaults to "1.0".</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.CleanFolder">
            <summary>
            This class implements the Task interface and is used to clean a Folder
            This differs from the MSBUILD RemoveDir in that it doesn't remove the
            folder, only the subfolder and all files in the parent.
            
            This tasks also supports shares
            </summary>
            <remarks>
            <code><![CDATA[<Folder.CleanFolder Path="path" Force="force"/>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>
            The full path to the source folder that will be cleaned. This folder must exist.
            </para>
            <para><i>force</i></para>
            <para>If true, then ReadOnly files are made writable and deleted.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Folder.CleanFolder Path="C:\SomeFolder"/>
                    <Folder.CleanFolder Path="\\server\\share" Force="true"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.CleanFolder.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.CleanFolder.DelTree(System.IO.DirectoryInfo)">
            <summary>
            Dels the tree.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.CleanFolder.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.CleanFolder.Force">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Sdc.Tasks.Folder.CleanFolder"/> is force.
            </summary>
            <value><c>true</c> if force; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments">
            <summary>
            Compares 2 Wix fragment files and publishes file differences between them.
            Items of interest are that are detected are:
              files that are in one but not the other
            </summary>
            <remarks>
            <para>
            Dynamically generated fragments are considered bad news when it comes to release 
            installers as the component GUIDs keep changing and as such issues arise when 
            making patches. This task can be used to compare a wix fragment that has been 
            generated now with one generated early on and then baselined when the project is 
            stable and release date is near.
            </para>
            <para>
            <b>About Wix:</b> Wix was originally a Microsoft tool that has been released into the open source
            community under the Common Public License. The binaries and source code can be downloaded from
            <a href="http://sourceforge.net/projects/wix">SourceForge</a>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.InternalExecute">
            <summary>
            compare the fragments
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.CompareFragments(System.Xml.XmlNodeList,System.Xml.XmlNodeList,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Compare the file lists in each fragment
            </summary>
            <param name="listFiles1">list of files found in first fragment</param>
            <param name="listFiles2">list of files found in second fragment</param>
            <param name="reverse">true when the list are switched</param>
            <param name="missingFiles">set to true if files missing</param>
            <param name="structureDifferent">set to true if structure different</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.DirectoryNodeTest(System.Boolean,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Test the directory parent structure above the matching files
            </summary>
            <param name="suspect">is node considered suspect but awaiting proof</param>
            <param name="directoryNode1">a directory parent node</param>
            <param name="directoryNode2">a directory parent node</param>
            <returns>true if structure is supect</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.FragmentFile1">
            <summary>
            A wix fragment file
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.FragmentFile2">
            <summary>
            A wix fragment file
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.MissingFiles1">
            <summary>
            A list of files found in FragmentFile1 but not in FragmentFile2
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.MissingFiles2">
            <summary>
            A list of files found in FragmentFile2 but not in FragmentFile1
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.CompareFilesInFragments.IgnoreMissingFiles">
            <summary>
            Do not treat missing files as errors - instead record them in the outputs MissingFiles1 and MissingFiles2
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.FtpSite.Start">
            <summary>
            Starts a stopped ftp site
            </summary>
            <remarks>
            <code><![CDATA[<Web.FtpSite.Start 
                Description="description" 
                Identifier="identifier")>]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site.</para>
            <para><i>identifier</i></para>
            <para>A valid ftp site identifier.</para>
            <para><b>Either a <i>description</i> or an <i>identifier</i> must be specified.</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.FtpSite.Start Description="ftptestsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.Start.#ctor">
            <summary>
            Initializes a new instance of the StartFtpSite class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.Start.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Start.Description">
            <summary>
            Description of ftp site to start
            </summary>
            <value>A valid ftp site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.Start.Identifier">Identifier</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.Start.Identifier">
            <summary>
            ftp site idenfitier to start
            </summary>
            <value>A valid ftp site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.Start.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.SplitBuildNumber.#ctor">
            <summary>
            Initializes a new instance of the SplitBuildNumber class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.SplitBuildNumber.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.SplitBuildNumber.BuildConfigBuildNumberRevisionNumber">
            <summary>
            The build number string consisting of Daily_050517.00002
            This will be split returning 050517 as the BuildNumber
            and 00002 as the Revision Number
            Typically these 2 values are passed into the CreateSourceFiles task
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.SplitBuildNumber.BuildNumber">
            <summary>
            From Daily_050517.00002 this would return 050517
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.SplitBuildNumber.RevisionNumber">
            <summary>
            From Daily_050517.00002 this would return 00002
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.SplitBuildNumber.BuildConfiguration">
            <summary>
            From Daily_050517.00002 this would return Daily
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Vault.VaultUtil">
            <summary>
            <para>Utility class to execute Vault command line client.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.VaultUtil.CreateGetToPath(System.String)">
            <summary>
            Determines download path for get operations, and creates the path if it does not exist.
            </summary>
            <param name="destinationDirectory">The download path provided by the user, if this is blank the current working directory is use.</param>
            <returns>The download path that will be used.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.VaultUtil.Get(Microsoft.Sdc.Tasks.Vault.GetOpts,Microsoft.Sdc.Tasks.Configuration.ShellExecute)">
            <summary>
            Performs all types of GET operations against the Vault command line client.  The type of GET operation is determined by which command line options are provided.
            </summary>
            <param name="options">The options used to create the GET command.</param>
            <param name="shell">The ShellExecute to use for the GET operation.  This should already have it's FileName property set.</param>
            <returns>A Result object containing the success/failure indicator and error message if any.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.VaultUtil.GetVaultExePath(System.String)">
            <summary>
            Attemptes to determine the path to vault.exe.  Registry keys for 3.0 and 4.0 are checked, if not present it is assumed vault.exe is on the sytem path or in the working directory.
            </summary>
            <param name="exeFileName">The name of the client .exe to execute.</param>
            <returns>The likely path to the .exe based on registry keys (or just the .exe name if registry keys not found).</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Vault.GetOpts">
            <summary>
            Utillity class to store get command options.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.GetOpts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Sdc.Tasks.Vault.GetOpts"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.GetOpts.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Sdc.Tasks.Vault.GetOpts"/> class.
            </summary>
            <param name="Server">The server.</param>
            <param name="Repository">The repository.</param>
            <param name="ItemPath">The item path.</param>
            <param name="DestinationDirectory">The destination directory.</param>
            <param name="Username">The username.</param>
            <param name="Password">The password.</param>
            <param name="Label">The label.</param>
            <param name="UseSSL">if set to <c>true</c> [use SSL].</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.ItemPath">
            <summary>
            Gets or sets the item path.
            </summary>
            <value>The item path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.DestinationDirectory">
            <summary>
            Gets or sets the destination directory.
            </summary>
            <value>The destination directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetOpts.UseSSL">
            <summary>
            Gets or sets a value indicating whether [use SSL].
            </summary>
            <value><c>true</c> if [use SSL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Time.Diff">
            <summary>
            Returns the time difference between two times.
            </summary>
            <remarks>
            <code><![CDATA[
            <Time.Diff StartTime="hh:mm:ss" EndTime="hh:mm:ss">
                <Output TaskParameter="Time" ItemName="ResultsItem" />
            </Time.Diff>]]></code>
            <para>where:</para>
            <para><i>StartTime (Required)</i></para>
            <para>Indicates the start time.</para>
            <para><i>EndTime (Output)</i></para>
            <para>Indicates the end time.</para>
            <para><i>Time (Output)</i></para>
            <para>Returns the difference between EndTime and StartTime.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Time.Diff StartTime="00:00:00" EndTime="00:01:00">
                        <Output TaskParameter="Time" ItemName="ResultsItem" />
                    </Time.Diff>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Time.Diff.diffTime">
            <summary>
            The difference between EndTime and StartTime.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Time.Diff.endTime">
            <summary>
            The end time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Time.Diff.startTime">
            <summary>
            The start time.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Time.Diff.#ctor">
            <summary>
            Initializes a new instance of the Diff class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Time.Diff.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Time.Diff.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Time.Diff.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Time.Diff.Time">
            <summary>
            Gets or sets the difference between EndTime and StartTime.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.CreateProduct.#ctor">
            <summary>
            Initializes a new instance of the CreateProduct class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.CreateProduct.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Mithran.CreateProduct.TemplatePath">
            <summary>
            Defaults to the folder we are running from with a Templates suffix
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.Compile">
            <summary>
            Decompiles a chm file into the specified folder.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.Compile DestinationFolder="folder"
                         ChmFilePath="chmFilePath">
            </Help.Compile>
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.Compile.#ctor">
            <summary>
            Initializes a new instance of the Compile class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.Compile.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.Compile.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of HTML Help</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.Compile.ProjectFilePath">
            <summary>
            The full path to a hhp file
            </summary>
            <value>Must be a full path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.Compile.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ShortenPath">
            <summary>
            Takes a long file name and compress it down removing all relative parts (ie. '..')
            </summary>
            <remarks>
            <code><![CDATA[<ShortenPath inputPath="inputPath" Separator="separator">
                            <Output TaskParameter="outputPath" PropertyName="outputPath" />
                           </ShortenPath>]]></code>
            <para>where:</para>
            <para><i>inputPath (Required)</i></para>
            <para>The the string containing path to shorten</para>
            <para><i>outputPath (Required)</i></para>
            <para>the resulting shortened</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ShortenPath
                        inputPath="c:\projects\testproject\src\build\bin\..\..\Test\TestData">
                            <Output TaskParameter="outputPath" PropertyName="ShortPath" />
                    </ShortenPath>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceFlags">
            <summary>
            Summary description for AceFlags.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Utilities">
            <summary>
            Utilities makes available common tasks such as path location methods.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Utilities.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Utilities.GetPathToSystemFile(System.String)">
            <summary>Method to obtain a path to a specified system file.</summary>
            <returns>Returns a String value of the system file and path.</returns>
            <param name="systemFile"> String value specifying the name of the system file to locate </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Utilities.GetPathToSDK(System.String)">
            <summary>Method to obtain a path to the sdk folder of a specified runtime.</summary>
            <returns>Returns a String value of the sdk path.</returns>
            <param name="runtimeVersion"> String value specifying the version of the sdk to locate </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Utilities.GetPathToRuntime(System.String)">
            <summary>Method to obtain the full path to the .NET framework runtime for the version specified.
            Only the major and minor version elements are checked for as each version could have many build revisions
            but only one revision can be installed at any one time.
            </summary>
            <param name="runtimeVersion">A string value specifying the major and minor version of the runtime to locate.</param>
            <returns>Returns a string value of the .NET framework path.</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SafeNativeMethods">
            <summary>
            Provides wrappers for Win32 safe native methods
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.JSEnumerationWrapper">
            <summary>
            Wraps the J# enumeration class
            </summary>	
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.JSEnumerationWrapper.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.JSEnumerationWrapper.JSEnumerator.#ctor(java.util.Enumeration)">
            <summary>
            
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.JSEnumerationWrapper.JSEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.JSEnumerationWrapper.JSEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.JSEnumerationWrapper.JSEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledComponentsManager">
            <summary>
            Checks for installed Windows Components such as IIS or DNS
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledComponentsManager.ConvertToXml(Microsoft.Sdc.Tasks.Configuration.InstalledProducts.ComponentList)">
            <summary>
            Serialize the component list into an Xml string
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledComponentsManager.ConvertFromXml(System.String)">
            <summary>
            Deserialize from xml to ComponentList
            </summary>
            <param name="xml">Xml produced by the ConvertToXml method</param>
            <returns>List of Component objects</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.InstalledComponentsManager.AddForAnd(Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criteria,Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criterion)">
            <summary>
            Convenience method to add a criterion for And-ing
            </summary>
            <param name="criteria"></param>
            <param name="criterion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ActiveDirectory.UserAccountFlags">
            <summary>
            Summary description for userAccountFlags.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CodeCoverage.Start">
            <summary>
            Begins code coverage analysis using CoverageEye
            </summary>
            <remarks>
            <code><![CDATA[<CodeCoverage.Start />]]></code>
            <para>There are no properties associated with this task. Code coverage will commence on the assemblies specified in the "CoverageConfig.xml" file located in the CoverageEye configuration folder</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CodeCoverage.Start />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.Start.#ctor">
            <summary>
            Initializes a new instance of the Start class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.Start.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.AssignCulture">
            <summary>
            AssignCulture
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.AssignCulture.#ctor">
            <summary>
            AssignCulture
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.AssignCulture.InternalExecute">
            <summary>
            The execute method
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.AssignCulture.Files">
            <summary>
            Files
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.AssignCulture.AssignedFiles">
            <summary>
            AssignedFiles
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.AssignCulture.AssignedFilesWithCulture">
            <summary>
            AssignedFilesWithCulture
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.AssignCulture.AssignedFilesWithNoCulture">
            <summary>
            AssignedFilesWithNoCulture
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.AssignCulture.CultureNeutralAssignedFiles">
            <summary>
            CultureNeutralAssignedFiles
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.AssignCulture.UserDefinedCultures">
            <summary>
            This is the only extra property we have over Microsoft.Build.Tasks.AssignCulture 
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch">
            <summary>
            Creates the branch specified
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.CreateBranch SourcePath="sourcePath" DestinationPath="destinationPath" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory" OverrideText="overrideText"/>]]></code>
            <para>where:</para>
            <para><i>SourcePath (Required)</i></para>
            <para>The root of the path from which to create the branch.</para>
            <para><i>DestinationPath (Required)</i></para>
            <para>The root of that path of the new branch</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            <para><i>overrideText</i></para>
            <para>Text to use when overriding checkin policies. Using override may cause a warning.</para>   
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.CreateBranch
                        SourcePath="$/Depot/Main/Working/" 
                        DestinationPath="$/Depot/Main/Release/..."
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch.Override">
            <summary>
            Gets or sets the override.
            </summary>
            <value>The override.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch.DestinationPath">
            <summary>
            Gets or sets the mapping from the source files of the branch (left) to the target files of the branch (right) in the depot. The destinationPath maps from one location in the depot to another.
            </summary>
            <value>The mapping from the source files of the branch (left) to the target files of the branch (right) in the depot. The destinationPath maps from one location in the depot to another.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.CreateBranch.SourcePath">
            <summary>
            Gets or sets the name of the new branch
            </summary>
            <value>The name of the new branch</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.contextStacks">
            <summary>
            Internal static stacks used to save the impersonation contexts and process handles between the login and
            logout tasks.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ACTPerfTest">
            <summary>
            This class implements a generic way of running any ACT test script as part of a build task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create">
            <summary>
            Creates an Active Directory user either locally or on a domain.
            </summary>
            <remarks>
            <code><![CDATA[<ActiveDirectory.User.Create UserName="userName" Password="password" DomainName="domainName" EnsureUser="ensureGroup" />]]></code>
            <para>where:</para>
            <para><i>userName (Required)</i></para>
            <para>The username for the Active Directory user to be created.</para>
            <para><i>password (Required)</i></para>
            <para>The password for the Active Directory user to be created.</para>
            <para><i>Description</i></para>
            <para>The description for the Active Directory user to be created.</para>
            <para><i>domainName</i></para>
            <para>The domain the group is to be added to. If not specified it defaults to the local machine.</para>
            <para><i>ensureUser</i></para>
            <para>If TRUE and the user already exists then no error is thrown and the (existing) user's password will be updated</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ActiveDirectory.User.Create
                        UserName="newUser"
                        Password="123$abc"
                        Description="User Description"    
                        DomainName="mydomain"
                        EnsureUser="true" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.description">
            <summary>Private variable</summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.#ctor">
            <summary>
            Initializes a new instance of the Create class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.Password">
            <summary>
            The password for the new user.
            </summary>
            <value>The new user's password</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.UserName">
            <summary>
            The username for the new user.
            </summary>
            <value>The new user's username</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.DomainName">
            <summary>
            The domain to which the new Active Directory user is to be added.
            </summary>
            <value>The name of the domain to which the new user is to be added. If not specified it defaults to the local machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.Description">
            <summary>
            A description for the user.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.EnsureUser">
            <summary>
            If TRUE and the User is already in the domain no error is thrown, in which case the user's password will be updated.
            </summary>
            <value>True to not throw an error if the user is already in the domain.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.Create.PasswordExpires">
            <summary>
            Set to FALSE to set the equivalent of "password never expires".
            </summary>
            <value>Defaults to true to be backwordly compatible</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists">
            <summary>
            Adds a new host/ip binding to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.FilterExists 
                HostName="hostname" 
                Identifier="identifier"
                Description="description"
                FilterName="filterName"
                FilterPath="filterPath" />]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description to apply binding to</para>
            <para><i>identifier</i></para>
            <para>Web site identifier to apply binding to</para>
            <para><i>FilterName (Required)</i></para>
            <para>Name of new ISAPI filter</para>
            <para><i>FilterPath (Required)</i></para>
            <para>Path to new Filter executable</para>
            <para><i>hostname</i></para>
            <para>Host on which to add filter (defaults to localhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.FilterExists
                        Desciption="mytestsite"
                        FilterName="Quova Filter"
                        FilterPath="c:\Program Files\Quova\Quova.dll"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.FilterName">
            <summary>
            Name for new ISAPI Filter
            </summary>
            <value>A valid filter description</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.Description">
            <summary>
            Description of web site to which we are adding the filter
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.Identifier">
            <summary>
            web site idenfitier for website to which we are adding the filter
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.Description">Description</seealso> 
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.FilterExists.DoesExist">
            <summary>
            Gets whether the Filter does exist.
            </summary>
            <value>
            <b>true</b> if the Filter does exist, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Modify">
            <summary>
            Modifies an existing web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Modify 
                Description="description"
                Path="path"
                AuthFlags="authFlags"
                AppPoolId="appPoolId"
                HttpExpires="httpExpires"
                DirBrowseFlags="dirBrowseFlags"
                DefaultDocs="defaultDocs"
            />]]></code>
            <para>where:</para>
            <para><i>description (Required)</i></para>
            <para>Web site description to modify.</para>
            <para><i>path </i></para>
            <para>Local path to assign as the web root.</para>
            <para><i>authFlags</i></para>
            <para>Authentication flags to apply to the site.</para>
            <para><i>appPoolId</i></para>
            <para>Application pool to run the site within (IIS6 only).</para>
            <para><i>httpExpires</i></para>
            <para>Content expiration in hours</para>
            <para><i>dirBrowseFlags</i></para>
            <para>Directory browsing flags to apply to the site.</para>
            <para><i>DefaultDocs</i></para>
            <para>Document names allowed as default document for the site.</para>
            <para><i>Identifier [output]</i></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Modify 
                        Description='My  Site'
                        Path='$(CurrentFolder)\Solution\Secure'/>
                </Target>
                <Target Name="TestWithDefaultDoc" >
                    <Web.WebSite.Modify 
                        Description='My  Site'
                        Path='$(CurrentFolder)\Solution\Secure'
                        DirBrowseFlags="EnableDefaultDoc"
                        DefaultDocs="Default.aspx;Default.html;index.html;index.htm" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Modify.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.MachineName">
            <summary>
            Gets or sets the name of the machine to operate on. Default is localhost
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.HostName">
            <summary>
            Gets or sets the name of the machine to modify the website on. Default is localhost
            </summary>
            <value>The name of the machine.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.Description">
            <summary>
            Description of web site to apply binding to
            </summary>
            <value>A valid web site description</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.Path">
            <summary>
            Root path for the web site
            </summary>
            <value>Existing directory path</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.Identifier">
            <summary>
            Web site identifier
            </summary>
            <value>Any non-existant web site identifier</value>
            <remarks>If this property is not defined a web site identifier will be generated 
            on site creation.</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.AuthFlags">
            <summary>
            Authentication methods for the site
            </summary>
            <value>A combination of </value>
            <value>NTLM </value>
            <value>Anonymous </value>
            <value>Basic </value>
            <value>Digest</value>
            <remarks>If unspecified the site will default to anonymous and NTLM</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.AppPoolId">
            <summary>
            Application Pool Identifier
            </summary>
            <value>Application pool to run the web site under</value>
            <remarks>IIS6 and above only</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.AnonymousUsername">
            <summary>
            Gets or sets the anonymous username.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.AnonymousPassword">
            <summary>
            Gets or sets the anonymous password.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.HttpExpires">
            <summary>
            Number of hours after which the content needs to be expired
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.DirBrowseFlags">
            <summary>
            Directory browsing settings for this site.  Use None alone to clear all flags.
            </summary>
            <value>A combination of</value>
            <value>None</value>
            <value>ShowDate</value>
            <value>ShowExtension</value>
            <value>ShowLongDate</value>
            <value>ShowSize</value>
            <value>ShowTime</value>
            <value>EnableDefaultDoc</value>
            <value>EnableDirBrowsing</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Modify.DefaultDocs">
            <summary>
            Default documents list.  DirBrowseFlags must have EnableDefaultDoc for this list to be in effect.
            </summary>
            <value>Semicolon-delimited list of default document names in order of precedence.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteFtpSite">
            <summary>
            Deletes an ftp site from the local server
            </summary>
            <remarks>
            <code><![CDATA[<Web.FtpSite.DeleteFtpSite 
                Description="description" 
                Identifier="identifier"
            >]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>Any valid ftp site identifier</para>
            <para><b>Either a <i>description</i> or an <i>identifier</i> must be specified.</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.FtpSite.DeleteFtpSite Description="testftpsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteFtpSite.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteFtpSite.Description">
            <summary>
            Description of ftp site to delete
            </summary>
            <value>A valid ftp site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteFtpSite.Identifier">Identifier</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteFtpSite.Identifier">
            <summary>
            ftp site idenfitier to delete
            </summary>
            <value>A valid ftp site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.FtpSite.DeleteFtpSite.Description">Description</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Stop">
            <summary>
            Stops a virtual machine.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Stop
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout">
            </VirtualServer.VirtualMachine.Stop>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be stopped.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the stop task to complete, in seconds. Defaults to 10.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Stop
                        MachineName="myMachine"
                        Timeout="20">
                    </VirtualServer.VirtualMachine.Stop> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Stop.#ctor">
            <summary>
            Initializes a new instance of the VirtualServer.Start class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Stop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Stop.Timeout">
            <summary>
            Length of time to wait for the stop task to complete, in seconds.
            </summary>
            <value>Length of time to wait for the stop task to complete, in seconds. Defaults to 10.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Stop.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Stop.MachineName">
            <summary>
            The name of the virtual machine to be stopped
            </summary>
            <value>The name of the virtual machine to be stopped.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TrimJavascript.InternalExecute">
            <summary>
            The task
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TrimJavascript.FindAndTrimAllJsFiles(System.IO.DirectoryInfo)">
            <summary>
            Finds all the files in the given folder looking for js files to trim.
            Recurses any folders.
            </summary>
            <param name="folder">to search for js files</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TrimJavascript.TrimFile(System.IO.FileInfo)">
            <summary>
            Trim all extraneous info from the given js file
            </summary>
            <param name="fileToTrim">file to process</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TrimJavascript.StripToken(System.String@,System.String,System.String,System.Boolean)">
            <summary>
            Removes a delimited string from a given string, e.g. a comment block "/* blah */"
            </summary>
            <param name="lineToWrite">the string to parse, by ref, so also the parsed string</param>
            <param name="tokenStart">the starting token to search, e.g. "/*"</param>
            <param name="tokenEnd">the end token, e.g. "*/"</param>
            <param name="tokenFound">initial state (for multi-line tokens)</param>
            <returns>whether the token is currently found (when spanning multiple line)</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.TrimJavascript.RootFolder">
            <summary>
            Specifies the root folder from which to search for JS files.
            </summary>
            <value>path to</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.PsExec">
            <summary>
            Executes PsExec.exe (available from www.sysinternals.com ) in order to execute a command on a remote machine.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Tools.PsExec ToolPath="toolPath"
                           WorkingDirectory="workingDirectory"
                              Command="command"
                              Server="server"
                              User="user"
                              Password="password"
                              LoadProfile="loadProfile">
            </Tools.Sn>
            ]]></code>
            <para>where:</para>
            <para><i>toolPath (Required)</i></para>
            <para>The path to the folder where PsExec.exe can be found on the local machine.</para>
            <para><i>workingDirectory (Optional)</i></para>
            <para>The working directory the remote process should use.</para>
            <para><i>command (Required)</i></para>
            <para>The command to execute on the remote machine.</para>
            <para><i>server (Required)</i></para>
            <para>The remote machine on which the command should be executed.</para>
            <para><i>user (Required)</i></para>
            <para>The domain\user that should be used on the remote machine.</para>
            <para><i>password (Required)</i></para>
            <para>The password of the user that should be used on the remote machine.</para>
            <para><i>loadProfile (Optional)</i></para>
            <para>If set to 'true' the profile of the user specified by user is loaded when executing the remote command.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Tools.PsExec
                        ContinueOnError="true"
                        ToolPath="c:\PsTools" 
                        Command="cmd /c mkdir c:\testdir"
                           Server="MyRemoteMachine"
                           User="MyAdminUser"
                           Password="MyAdminPassword"
                    </Tools.PsExec> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PsExec.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>The full path to PsExec.exe</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.PsExec.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.Command">
            <summary>
            The command to execute on the remote machine.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.WorkingDirectory">
            <summary>
            THe folder to set the working directory to on the remote machine.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.Server">
            <summary>
            The name of the remote machine.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.User">
            <summary>
            The username to use on the remote machine when running the command.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.Password">
            <summary>
            The password of the remote user.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.LoadProfile">
            <summary>
            True to force the profile of the remote user to be loaded on the remote machine.
            </summary>
            <value><c>true</c> if [load profile]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.PsExec.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sleep">
            <summary>
            Causes the current Thread to sleep for the specfied time.
            </summary>
            <remarks>
            <code><![CDATA[<sleep SleepTimeOut="milliseconds" />]]></code>
            <para>where:</para>
            <para><i>sleepTimeOut (Required)</i></para>
            <para>Number of millseconds to sleep for</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <sleep sleepTimeOut="30" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sleep.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sleep.SleepTimeout">
            <summary>
            Specifies the Timeout in milliseconds
            </summary>
            <value>Number of milliseonds to sleep for</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.Uninstall">
            <summary>
            Uninstalls an MSI package.
            </summary>
            <remarks>
            <code><![CDATA[<InstallMsi MsiPath="msiPath" ProductCode="productCode" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" PropertyFiles="propertyFiles" Properties="properties" Features="features" />]]></code>
            <para>where:</para>
            <para><i>msiPath (Required*)</i></para>
            <para>
            The path to the MSI to uninstall.
            </para>
            <para><i>productCode (Required*)</i></para>
            <para>
            The GUID product code of the product to uninstall.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the uninstallation. The recommended file name is the name of the MSI
            with the extension *.uninstall.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom uninstallation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>propertyFiles</i></para>
            <para>
            A delimited list of XML property files that provide uninstallation properties for the MSI. 
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </para>
            <para><i>properties</i></para>
            <para>
            A delimited list of uninstallation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </para>
            <para>
            <b>*</b> - Either <i>msiPath</i> or <i>productCode</i> must be provided. If both are provided then 
            <i>msiPath</i> takes precedence and <i>productCode</i> is ignored. If neither are provided then the
            task will throw an exception when it executes.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <UninstallMsi 
                        MsiPath="C:\Build\Msi\Packages\MyPackage.msi" 
                        ProductCode="b6b6f41c-fd3e-4b5b-8a73-c59494974990" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.uninstall.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        PropertyFiles="C:\Build\Properties\Global.xml;C:\Build\Properties\Rig4.xml" 
                        Properties="INSTALLDIR=C:\Install;DOMAIN=rig4;MACHINE=r4app01" />
                </Target>
            </Project>
            ]]></code>   
            A sample property file is shown below. Note that you must include the namespace for the file to
            be parsed correctly.
            <code><![CDATA[
            <Properties xmlns="urn:sdc-microsoft-com:deployment:properties:v2.0">
                <Property Name="MY_PROPERTY" Value="some value" />
                <Property Name="ANOTHER_PROPERTY" Value="some other value" />
                <Property Name="SOMETHING_ELSE" Value="hello world" />
                ... etc ...
            </Properties>
            ]]></code>  
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Uninstall.embedProperties">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Uninstall.#ctor">
            <summary>
            Initializes a new instance of the Uninstall class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Uninstall.InternalExecute">
            <summary>
            Executes the task to install the MSI.
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.Uninstall.EmbedProperties">
            <summary>
            Specifies if Properties should be embedded into the MSI before installation.
            </summary>
            <remarks>
            When this property is set to true all properties specified in a property file will 
            be embedded into the MSI unless they have an additional attribute <b>Embed</b> set to false.
            All properties with Embed set to false are discarded.
            </remarks>
            <value>
            True or False.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.File.RegEx">
            <summary>
            Reads in a text file and modifies the contents by searching for
            and replacing text satisfying a regular expression pattern.
            
            The task File.Replace can also be used to fulfill this functionality and more.
            This version is kept for compatibility with previous versions.
            </summary>
            <remarks>
            <code><![CDATA[
            <File.RegEx
                        Path="path"
                        Force="force"
                        NewValue="newValue"
                        RegularExpression="regularExpression" >
            </File.RegEx>
            ]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The full path and filename of the text file to be modified.</para>
            <para><i>force</i></para>
            <para>If set to true, this will modify the text file even if it is read-only. Set to false to ignore read-only files. Defaults to false.</para>
            <para><i>newValue (required)</i></para>
            <para>The new value for the specified attribute.</para>
            <para><i>regularExpression (required)</i></para>
            <para>The regular expression pattern to match.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <!-- Replaces runs of white space in file1.txt with a
                     comma and a blank.
                -->
                <Target Name="Test" >
                    <File.RegEx
                        Path="C:\SourceFiles\file1.txt"
                        RegularExpression="\s+"
                        NewValue=", " />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.File.RegEx.#ctor">
            <summary>
            Initializes a new instance of the RegEx class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.File.RegEx.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.RegEx.Path">
            <summary>
            The full path and filename of the text file to be modified.
            </summary>
            <value>The full path and filename of the text file to be modified.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.RegEx.RegularExpression">
            <summary>
            The regular expression pattern to match.
            </summary>
            <value>The regular expression pattern to match.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.RegEx.NewValue">
            <summary>
            The new value for the RegEx.
            </summary>
            <value>The new value for the RegEx.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.RegEx.Force">
            <summary>
            If set to true, this will modify the text file even if it is read-only.
            </summary>
            <value>If set to true, this will modify the text file even if it is read-only. Set to false to ignore read-only files. Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.WebDirectoryCollection">
            <summary>
            Summary description for WebDirectoryCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.RestartTimeCollection">
            <summary>
            Summary description for RestartTimeCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Report">
            <summary>
            Summary description for Report.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Report.CreateSection(System.String,System.String,System.String,System.String)">
            <summary>
            Create a section using a section generator from this assembly
            </summary>
            <param name="generatorClass">full class name of section generator class</param>
            <param name="sourceFolder"></param>
            <param name="fileSpec"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criterion">
            <summary>
            Represents a single test which can be bundled up into Criteria
            </summary>
            <remarks>
            This is a convenience class to be used in conjunction with the 
            InstalledProductManager.AddForAnd or
            InstalledComponentManager.AddForAnd
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Application.Update">
            <summary>
            Updates the specified ComponentServices Application.
            </summary>
            <remarks>
            <code><![CDATA[<ComponentServices.Application.Update ApplicationName="applicationName" Identity="identity" Password="password" ShutdownAfter="shutDownAfter" ActivationString="activationString" EnforceAccessChecks="enforceAccessChecks" RunForever="runForever" />]]></code>
            <para>where:</para>
            <para><i>applicationName</i></para>
            <para>The name of the COM+ application. This application will be created if it does not exist.</para>
            <para><i>identity</i></para>
            <para>Sets the server process identity for the application. Specify a valid user account or "Interactive User" to have the application assume the identity of the current logged-on user. This is not enabled for library applications, which run in the client process.</para>
            <para><i>password</i></para>
            <para>Sets the password used by the server process to log on under the identity. Password should be set at the same time as Identity, because the password and identity are validated before being saved. If the password and identity get out of sync, the application cannot be launched until they are reset by an administrator.</para>
            <para><i>shutDownAfter</i></para>
            <para>Sets the delay before shutting down a server process after it becomes idle. Shutdown latency ranges from 0 to 1440 minutes (24 hours). If RunForever is set to True, this property is ignored. ShutdownAfter is not enabled for library (in-process) applications.</para>
            <para><i>activationString</i></para>
            <para>Set to "Local" to indicate that objects within the application run within a dedicated local server process (server application). Set to "Inproc" to indicate that objects run in their creator's process (library application). Defaults to local</para>
            <para><i>enforceAccessChecks</i></para>
            <para>Indicates whether access checks are performed for the application when clients make calls into it.</para>
            <para><i>runForever</i></para>
            <para>Enables a server process to continue if an application is idle. If set to True, the server process does not shut down when left idle. If set to False, the process shuts down according to the value set by the ShutdownAfter property. RunForever is not enabled for library (in-process) applications.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Application.Update
                        ApplicationName="MyApplicationName"
                        Identity="Interactive User"
                        ActivationString="Local"
                        ShutdownAfter="60"
                        RunForever="false" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.ApplicationName">
            <summary>
            Gets or sets the name of the application to be updated.
            </summary>
            <value>The name of the COM+ application to be updated</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.Identity">
            <summary>
            Gets or sets the name of the user identity for the COM+ application
            </summary>
            <value>Sets the server process identity for the application. Specify a valid user account or "Interactive User" to have the application assume the identity of the current logged-on user. This is not enabled for library applications, which run in the client process.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.Password">
            <summary>
            Gets or sets the password of the user identity for the COM+ application.
            </summary>
            <value>Sets the password used by the server process to log on under the identity. Not required if the Identity property is set to "Interactive User".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.ShutdownAfter">
            <summary>
            Gets or sets the delay before shutting down a server process after it becomes idle.
            </summary>
            <value>The delay, in minutes, before the process shutsdown after becoming idle. Shutdown latency ranges from 0 to 1440 minutes (24 hours). If RunForever is set to True, this property is ignored. ShutdownAfter is not enabled for library (in-process) applications.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.ActivationString">
            <summary>
            Gets or sets the type of activation for the application.
            </summary>
            <value>"Local" - local activation indicates that objects within the application run within a dedicated local server process (server application). 
            "Inproc" - in-process activation indicates that objects run in their creator's process (library application). 
            Defaults to "Local".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.EnforceAccessChecks">
            <summary>
            Gets or sets a value indicating whether access checks are performed for the application when clients make calls into it.
            </summary>
            <value>Set to true if access checks are to be performed.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.Update.RunForever">
            <summary>
            Gets or sets a value indicating whether a server process should continue if an application is idle. 
            </summary>
            <value>If set to True, the server process does not shut down when left idle. If set to False, the process shuts down according to the value set by the ShutdownAfter property. RunForever is not enabled for library (in-process) applications.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CompileTestSummary">
            <summary>
            This task compiles the test results xml file into a summary and produces an xml document.
            </summary>
            <remarks>
            <code><![CDATA[<CompileTestSummary Categories="categories" TestPass="testPass" TestFail="testFail" TestNoRun="testNoRun" TestTotal="testTotal" TestTimeTaken="testTimeTaken" OutputXmlFilename="outputXmlFilename" XsltFilename="xsltFilename" >
                                <Output TaskParameter="TotalTestFailures" ItemName="TotalTestFailuresItem" />
                            </CompileTestSummary>
            ]]></code>
            <para>where:</para>
            <para><i>categories (Required)</i></para>
            List of the names of the test categories to be summarised.
            <para>
            </para>
            <para><i>testPass (Required)</i></para>
            <para>
            List of the number of passed tests for each of the categories specified in <i>categories</i>. This will probably come from running the NUnit test <see cref="T:Microsoft.Sdc.Tasks.Tools.NUnit"/>.
            </para>
            <para><i>testFail (Required)</i></para>
            <para>
            List of the number of failed tests for each of the categories specified in <i>categories</i>. This will probably come from running the NUnit test <see cref="T:Microsoft.Sdc.Tasks.Tools.NUnit"/>.
            </para>
            <para><i>testNoRun (Required)</i></para>
            <para>
            List of the number of tests not run for each of the categories specified in <i>categories</i>. This will probably come from running the NUnit test <see cref="T:Microsoft.Sdc.Tasks.Tools.NUnit"/>.
            </para>
            <para><i>testTotal (Required)</i></para>
            <para>
            List of the total number of tests for each of the categories specified in <i>categories</i>. This will probably come from running the NUnit test <see cref="T:Microsoft.Sdc.Tasks.Tools.NUnit"/>.
            </para>
            <para><i>testTimeTaken (Required)</i></para>
            <para>
            List of the times taken for the tests for each of the categories specified in <i>categories</i>. This will probably come from running the NUnit test <see cref="T:Microsoft.Sdc.Tasks.Tools.NUnit"/>.
            </para>
            <para><i>outputXmlFilename</i></para>
            <para>The name of the xml filename to contain the test summary. Defaults to "testsummary.xml"
            </para>
            <para><i>xsltFilename</i></para>
            <para>The name of the Xsl stylesheet to use to transform the Xml summary into Html, if desrired.
            </para>
            <para><i>outputHtmlFilename</i></para>
            <para>The name of the file in which the transformed Xml summary is to be stored. Defaults to "Output\testsummary.html"
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                            <CompileTestSummary Categories="Category1; Category2; Category3; Category4" TestPass="2; 1; 1; 2" TestFail="0; 0; 0; 1" TestNoRun="1; 0; 0; 0" TestTotal="3; 1; 1; 2" TestTimeTaken="12; 10; 5; 9" OutputXmlFilename="C:\Output\Output.xml" XsltFilename="C:\Output\Output.xsl" OutputHtmlFilename="C:\Output\MyResults.htm">
                                <Output TaskParameter="TotalTestFailures" ItemName="TotalTestFailuresItem" />
                            </CompileTestSummary>    
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CompileTestSummary.#ctor">
            <summary>
            Initializes a new instance of the CompileTestSummary class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CompileTestSummary.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CompileTestSummary.AddCategoriesToList(System.String[])">
            <summary>
            Builds our master category list with no duplicates
            </summary>
            <param name="categories"></param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CompileTestSummary.GetCategoryIndex(System.String)">
            <summary>
            detemines the location of a category in the main array list
            </summary>
            <param name="category"></param>
            <returns>index of the category</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties">
            <summary>
            Installs an MSI package.
            </summary>
            <remarks>
            <code><![CDATA[<Msi.Install MsiPath="msiPath" ProductCode="productCode" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" PropertyFiles="propertyFiles" Properties="properties" Features="features" />]]></code>
            <para>where:</para>
            <para><i>msiPath (Required*)</i></para>
            <para>
            The path to the MSI to install.
            </para>
            <para><i>productCode (Required*)</i></para>
            <para>
            The GUID product code of the product to install.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the installation. The recommended file name is the name of the MSI
            with the extension *.install.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom installation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>propertyFiles</i></para>
            <para>
            A delimited list of XML property files that provide installation properties for the MSI. 
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </para>
            <para><i>properties</i></para>
            <para>
            A delimited list of installation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </para>
            <para><i>features</i></para>
            <para>
            A delimited list of the names of features to be installed. This is not necessary if the MSI does not
            have features configured, or you wish all features to be installed.
            </para>
            <para>
            <b>*</b> - Either <i>msiPath</i> or <i>productCode</i> must be provided. If both are provided then 
            <i>msiPath</i> takes precedence and <i>productCode</i> is ignored. If neither are provided then the
            task will throw an exception when it executes.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Msi.EmbedInstallProperties 
                        MsiPath="C:\Build\Msi\Packages\MyPackage.msi" 
                        ProductCode="b6b6f41c-fd3e-4b5b-8a73-c59494974990" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.install.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        PropertyFiles="C:\Build\Properties\Global.xml;C:\Build\Properties\Rig4.xml" 
                        Properties="INSTALLDIR=C:\Install;DOMAIN=rig4;MACHINE=r4app01" 
                        Features="MSMQ,BTS2004,WebServices" >
                        <Output TaskParameter="ExecArguments" PropertyName="ExecArguments" />
                    </Msi.EmbedInstallProperties>
                </Target>
            </Project>
            ]]></code>  
            A sample property file is shown below. Note that you must include the namespace for the file to
            be parsed correctly.
            <code><![CDATA[
            <Properties xmlns="urn:sdc-microsoft-com:deployment:properties:v2.0">
                <Property Name="MY_PROPERTY" Value="some value" />
                <Property Name="ANOTHER_PROPERTY" Value="some other value" />
                <Property Name="SOMETHING_ELSE" Value="hello world" />
                ... etc ...
            </Properties>
            ]]></code>
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.features">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.embedProperties">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.msiExecArguments">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.#ctor">
            <summary>
            Initializes a new instance of the EmbedInstallProperties class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.InternalExecute">
            <summary>
            Executes the task to embed the properties into the MSI.
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.Features">
            <summary>
            Gets or sets the features selected to be installed from the MSI. This may be <b>null</b>.
            </summary>
            <remarks>
            This property is not necessary if either the MSI does not have any features, or if you want all features in the
            MSI to be installed. If you do wish to select particular features then this is a list of the names.
            </remarks>
            <value>
            A list of features selected to be installed from the MSI.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.EmbedProperties">
            <summary>
            Specifies if Properties should be embedded into the MSI before installation.
            </summary>
            <remarks>
            When this property is set to true all properties specified in a property file will 
            be embedded into the MSI unless they have an additional attribute <b>Embed</b> set to false.
            All properties with an Embed attribute set to false will be included on the command-line.
            </remarks>
            <value>
            True or False.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.EmbedInstallProperties.ExecArguments">
            <summary>
            The argument string to use with the MSI file
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.Checkin">
            <summary>
            Checks in the speicied file or folder
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.Checkin Path="Path" Comments="Comments" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory" Override="overrideText"/>]]></code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>File Spec of file or folder to checkin.</para>
            <para><i>Comments (Required)</i></para>
            <para>Comments to go into the changeset</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            <para><i>overrideText</i></para>
            <para>Text to use when overriding checkin policies. Using override may cause a warning.</para>   
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.Checkin
                        Path="$/Depot/Main/Working/test.txt" 
                        Comments="Auto update of test.txt"
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Checkin.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkin.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkin.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkin.Override">
            <summary>
            Gets or sets the override.
            </summary>
            <value>The override.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkin.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Checkin.Path">
            <summary>
            Gets or sets the folder or file to be checked in
            </summary>
            <value>FilesSpec</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.Add">
            <summary>
            Checks in the speicied file or folder
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.Checkin Path="Path" Comments="Comments" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory" OverrideText="overrideText"/>]]></code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>File Spec of file or folder to checkin.</para>
            <para><i>Comments (Required)</i></para>
            <para>Comments to go into the changeset</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            <para><i>overrideText</i></para>
            <para>Text to use when overriding checkin policies. Using override may cause a warning.</para>   
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.Checkin
                        Path="$/Depot/Main/Working/test.txt" 
                        Comments="Auto update of test.txt"
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Add.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Add.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Add.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Add.Path">
            <summary>
            Gets or sets the folder or file to be checked in
            </summary>
            <value>FilesSpec</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ActiveDirectory.User.GrantPrivilege">
            <summary>
            Grants the specified privilege to the Active Directory user.
            </summary>
            <remarks>
            <code><![CDATA[<ActiveDirectory.User.GrantPrivilege UserName="userName" Privilege="privilege" DomainName="domainName" />]]></code>
            <para>where:</para>
            <para><i>userName (Required)</i></para>
            <para>The groupname to create.</para>
            <para><i>privilege (Required)</i></para>
            <para>The privilege to be granted to the user.</para>
            <para><i>domainName</i></para>
            <para>The domain the group is to be added to. If not specified it defaults to the local machine.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ActiveDirectory.User.GrantPrivilege
                        UserName="user"
                        Privilege="SeNetworkLogonRight"  />
                        DomainName="mydomain"
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.User.GrantPrivilege.#ctor">
            <summary>
            Initializes a new instance of the GrantPrivilege class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ActiveDirectory.User.GrantPrivilege.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.GrantPrivilege.UserName">
            <summary>
            The username of the Active Directory user that is to aquire the privilege
            </summary>
            <value>The username to grant the privilege to</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.GrantPrivilege.Privilege">
            <summary>
            The privilege to grant the user
            </summary>
            <value>Any one of the following: 
                
                "SeInteractiveLogonRight", 
                "SeNetworkLogonRight",  
                "SeBatchLogonRight", 
                "SeServiceLogonRight", 
                "SeDenyInteractiveLogonRight",
                "SeDenyNetworkLogonRight", 
                "SeDenyBatchLogonRight", 
                "SeDenyServiceLogonRight", 
                "SeRemoteInteractiveLogonRight", 
                "SeDenyRemoteInteractiveLogonRight", 
                "SeIncreaseQuotaPrivilege",
                "SeAuditPrivilege", 
                "SeAssignPrimaryTokenPrivilege"
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ActiveDirectory.User.GrantPrivilege.DomainName">
            <summary>The domain the user belongs to. If not specified it defaults to the local machine.</summary>
            <value>The user's domain.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Xml.ModifyFile">
            <summary>
            Reads in an XML file and modifies the contents based on the XPath and values
            to replace in the file.
            </summary>
            <remarks>
            <code><![CDATA[
            <Xml.ModifyFile
                        Path="path"
                        AttributeName="attributeName"
                        Force="force"
                        Namespace="namespace"
                        NewValue="newValue"
                        XPath="xPath" 
                        RegularExpression="regularExpression" >
                        ShowMatches="showMatchOptionValue" >
            </Xml.ModifyFile>
            ]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The full path and filename of the xml file to be modified.</para>
            <para><i>attributeName</i></para>
            <para>The name of the xml attribute to be modified.</para>
            <para><i>force</i></para>
            <para>If set to true, this will modify the xml file even if it is read-only. Set to false to ignore read-only files. Defaults to false.</para>
            <para><i>namespace</i></para>
            <para>An array of TaskItems specifiying "Prefix" and "Uri" attributes for use with the specified <i>xPath</i>.</para>
            <para><i>newValue</i></para>
            <para>The new value for the specified attribute.</para>
            <para><i>xPath</i></para>
            <para>The XPath to the nodes containing the specified attribute. If the XPath expression includes a prefix, the prefix and namespace URI pair must be added to via the <i>namespace</i> property.</para>
            <para><i>regularExpression</i></para>
            <para>This property allows a regular expression to be provided in preference to an XPath.</para>
            <para><i>showMatchOptionvalue</i></para>
            <para>Specifes whether XPath replacements are logged. Valid values are No, Yes, Masked, and Secure.
            If not specified then this options defaults to No. The Yes option displays the replacement text
            while the Masked and Secure options obscure the replacement text. These options are useful when
            the replacement text is sensitive data such as passwords. The Masked option replaces each character
            of the replacemen text with an asterisk character. The Secure option always displays 8 asterisks
            for the replacement text.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Xml.ModifyFile
                        Path="C:\SourceFiles\file1.xml"
                        XPath="/TestNodes/TestNode"
                        AttributeName="NodeID"
                        NewValue="MODIFIED"
                        ShowMatches="Yes"
                    </Xml.ModifyFile> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Xml.ModifyFile.action">
            <summary>
            The action to be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.ModifyFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.ModifyFile.BuildNewValueForAction(System.String)">
            <summary>
            Builds the new value appropriate for the action to be performed.
            </summary>
            <param name="oldValue">The old value.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.ModifyFile.LogMatches(System.String,System.String,System.String)">
            <summary>
            Display the matched XPath and replacement text according to the ShowMatches option.
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="oldValue">The old value.</param>
            <param name="newVal">The new val.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.Action">
            <summary>
            The action to be performed.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.Path">
            <summary>
            The full path and filename of the xml file to be modified.
            </summary>
            <value>The full path and filename of the xml file to be modified.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.Namespace">
            <summary>
            An array of TaskItems specifiying "Prefix" and "Uri" attributes for use with the specified <i>xPath</i>.
            </summary>
            <value>An array of TaskItems specifiying "Prefix" and "Uri" attributes for use with the specified <i>xPath</i>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.XPath">
            <summary>
            The XPath to the nodes containing the specified attribute.
            </summary>
            <value>The XPath to the nodes containing the specified attribute.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.RegularExpression">
            <summary>
            This property allows a regular expression to be provided in preference to an XPath.
            </summary>
            <value>This property allows a regular expression to be provided in preference to an XPath.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.NewValue">
            <summary>
            Gets or Sets The new value for the specified attribute.
            </summary>
            <value>The new value for the specified attribute.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.AttributeName">
            <summary>
            The name of the xml attribute to be modified.
            </summary>
            <value>The name of the xml attribute to be modified.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.Force">
            <summary>
            If set to true, this will modify the xml file even if it is read-only.
            </summary>
            <value>If set to true, this will modify the xml file even if it is read-only. Set to false to ignore read-only files. Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.TreatNewValueAsXml">
            <summary>
            If set to true, this will insert newValue as Xml rather than as text. Defaults to false.
            </summary>
            <value>If set to true, this will insert newValue as Xml rather than as text. Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.ModifyFile.ShowMatches">
            <summary>
            Gets or Sets whether XPath matches and replacements should be logged. Valid values
            are No (default), Yes, and Secure. When Secure is in effect the replacement text
            is obscured using '*' characters to hide sensitive data.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Xml.ModifyActionOptionValue">
            <summary>
            The action to take when modifying a file.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Xml.ModifyActionOptionValue.Replace">
            <summary>
            Replace the old value with the new value.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Xml.ModifyActionOptionValue.Append">
            <summary>
            Append the new value to the old value.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Wix.Fragment">
            <summary>
            Base class for tasks relating to <b>Wix</b>, the Microsoft tool to build MSI packages from XML 
            source files.
            </summary>
            <remarks>
            <para>
            <b>About Wix:</b> Wix was originally a Microsoft tool that has been released into the open source
            community under the Common Public License. The binaries and source code can be downloaded from
            <a href="http://sourceforge.net/projects/wix">SourceForge</a>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.Fragment.WrapEachFileInAComponent">
            <summary>
            Should each file be wrapped in its own component - handy when wrapping assemblies so that the the compoenent 
            rules are obeyed http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/organizing_applications_into_components.asp
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.Fragment.AssemblyType">
            <summary>
            AssemblyType. Current valid values are: no, win32, .net
            If .net is specified, WrapEachFileInAComponent should be set to true.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.Smtp.Create">
            <summary>
            Create a new SMTP Server.
            </summary>
            <remarks>
            <code><![CDATA[<Web.Smtp.Create
                Description="description"
                IPAddress="ipAddress"
                Port="port"
                AuthFlags="authflags" 
                SmartHost="smartHost"
                MasqueradeDomain="masqueradeDomain"
                FullyQualifiedDomainName="fullyQualifiedDomainName"
                   DefaultDomain="defaultDomain"
                PickupDirectory="pickupDirectory"
                   DropDirectory="dropDirectory"
                   QueueDirectory="queueDirectory"
                   BadMailDirectory="badMailDirectory"
                Identifier="identifier"
                HostName="hostName"  />]]></code>
            <para>where:</para>
            <para><i>description (Required)</i></para>
            <para>A description for the SMTP site to be created.</para>
            <para><i>ipAddress</i></para>
            <para>IP address to listen on. This can be any valid IPV4 address. 
            If this IP address is not bound to a local NIC the SMTP server will not start.
            If this property is not set, the SMTP site will listen on all available 
            addresses on the hosting machine.</para>
            <para><i>port</i></para>
            <para>Port for the FTP site to listen on.</para>
            <para><i>authFlags</i></para>
            <para>Authentication flags for the SMTP site (either "Anonymous", "Basic", "NTLM", or "Digest")</para>
            <para><i>identifier</i></para>
            <para>Any non-existant FTP site identifier.</para>
            <para><i>hostName</i></para>
            <para>Host header to bind to (only valid for non-SSL sites).</para>
            <para><i>smartHost</i></para>
            <para>The smarthost to forward messages to.</para>
            <para><i>masqueradeDomain</i></para>
            <para>The masquerade domain to use.</para>
            <para><i>fullyQualifiedDomainName</i></para>
            <para>The FQDN to use.</para>
            <para><i>defaultDomain</i></para>
            <para>The default domain to use.</para>
            <para><i>pickupDirectory</i></para>
            <para>The folder for the pickup directory.</para>
            <para><i>dropDirectory</i></para>
            <para>The folder for the drop directory.</para>
            <para><i>queueDirectory</i></para>
            <para>The folder for the queue directory.</para>
            <para><i>badMailDirectory</i></para>
            <para>The folder for the bad mail directory.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.Smtp.Create
                        Description="TestSmtp"
                        DropDirectory="c:\smtp\drop"
                           PickupDirectory="c:\smtp\pickup"
                           QueueDirectory="c:\smtp\queue"
                           BadMailDirectory="c:\smtp\badmail"
                        SmartHost="MySmartHost"
                           DefaultDomain="MyDefaultDomain"
                        AuthFlags="Anonymous"
                       />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.Smtp.Create.#ctor">
            <summary>
            Initializes a new instance of the Create class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.Smtp.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Create.Description">
            <summary>
            FTP site description
            </summary>
            <value>Any valid description for the SMTP server</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Create.IPAddress">
            <summary>
            IP address to listen on
            </summary>
            <value>Any valid IPV4 address. 
            If this IP address is not bound to a local
            NIC the SMTP server will not start.
            If this property is not set the ftp site will listen on all available 
            addresses on the hosting machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Create.Port">
            <summary>
            Port for the SMTP site to listen on
            </summary>
            <value>A valid port number.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Create.Identifier">
            <summary>
            SMTP site identifier
            </summary>
            <value>Any non-existant smtp site identifier</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Create.AuthFlags">
            <summary>
            Auth flags for the SMTP site
            </summary>
            <value>Can be:
            "Anonymous"
            "Build"
            "NTLM"
            "Digest"
            These 4 values may be combined.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Create.HostName">
            <summary>
            Host header to bind to (only valid for non-SSL sites).
            </summary>
            <value>Host header to bind to (only valid for non-SSL sites).</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion">
             <summary>
             Loads the file version number from a file.
             </summary>
             <remarks>
             <code><![CDATA[
             <VersionNumber.LoadFileVersion
                 FileName="fileName"
                 VersionNamePath="versionNamePath">
                 <Output TaskParameter="VersionNumber" PropertyName="versionNumber" />
                 <Output TaskParameter="VersionName" PropertyName="versionName" />
                 <Output TaskParameter="MajorNumber" PropertyName="majorNumber" />
                 <Output TaskParameter="MinorNumber" PropertyName="minorNumber" />
                 <Output TaskParameter="BuildNumber" PropertyName="buildNumber" />
                 <Output TaskParameter="RevisionNumber" PropertyName="revisionNumber" />
             </VersionNumber.LoadFileVersion>
             ]]></code>
             <para>where:</para>
             <para><i>fileName (Required)</i></para>
             <para>The file containing the version number.</para>
             <para><i>versionNamePath</i></para>
             <para>The path to the root folder for the current version.</para>
             <para><i>versionNumber (Output)</i></para>
             <para>The full version number containing the major, minor, build and revision numbers.</para>
             <para><i>versionName (Output)</i></para>
             <para>The name of the current version.</para>
             <para><i>majorNumber (Output)</i></para>
             <para>The major number for the version.</para>
             <para><i>minorNumber (Output)</i></para>
             <para>The minor number for the version.</para>
             <para><i>buildNumber (Output)</i></para>
             <para>The build number for the version.</para>
             <para><i>revisionNumber (Output)</i></para>
             <para>The revision number for the version.</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <PropertyGroup>
                     <FileName>$(MSBuildProjectDirectory)\MyAssembly.dll</FileName>
                     <VersionNamePath>$(MSBuildProjectDirectory)\..\..</VersionNamePath>
                 </PropertyGroup>
            
                 <Target Name="Test">
                     <VersionNumber.LoadFileVersion
                         FileName="$(FileName)"
                         VersionNamePath="$(VersionNamePath)">
                         <Output TaskParameter="VersionNumber" PropertyName="VersionNumber" />
                         <Output TaskParameter="VersionName" PropertyName="VersionName" />
                         <Output TaskParameter="MajorNumber" PropertyName="MajorNumber" />
                         <Output TaskParameter="MinorNumber" PropertyName="MinorNumber" />
                         <Output TaskParameter="BuildNumber" PropertyName="BuildNumber" />
                         <Output TaskParameter="RevisionNumber" PropertyName="RevisionNumber" />
                     </VersionNumber.LoadFileVersion>
            
                     <Message Text="FileName: $(FileName)" />
                     <Message Text="VersionNamePath: $(VersionNamePath)" />
            
                     <Message Text="VersionNumber: $(VersionNumber)" Importance="high" />
                     <Message Text="VersionName: $(VersionName)" Importance="high" />
                     <Message Text="MajorNumber: $(MajorNumber)" Importance="high" />
                     <Message Text="MinorNumber: $(MinorNumber)" Importance="high" />
                     <Message Text="BuildNumber: $(BuildNumber)" Importance="high" />
                     <Message Text="RevisionNumber: $(RevisionNumber)" Importance="high" />
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.fileName">
            <summary>
            The file containing the version number.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.version">
            <summary>
            The full version number.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.versionName">
            <summary>
            The name of the current version.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.versionNamePath">
            <summary>
            The path to the root folder for the current version.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.#ctor">
            <summary>
            Initializes a new instance of the LoadFileVersion class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.LoadVersion">
            <summary>
            Loads the file version number from a file.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.BuildNumber">
            <summary>
            Gets the build number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.FileName">
            <summary>
            Gets or sets the file containing the version number.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.MajorNumber">
            <summary>
            Gets the major number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.MinorNumber">
            <summary>
            Gets the minor number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.RevisionNumber">
            <summary>
            Gets the revision number for the version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.VersionName">
            <summary>
            Gets the name of the current version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.VersionNamePath">
            <summary>
            Gets the path to the root folder for the current version.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VersionNumber.LoadFileVersion.VersionNumber">
            <summary>
            Gets the full version number containing the major, minor, build and revision numbers.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.Load">
             <summary>
             Loads the version number properties from the version number file specified.
             </summary>
             <remarks>
             <code><![CDATA[
             <VersionNumber.Load
                         VersionNamePath="versionNamePath"
                         ConfigFileLocation="configFileLocation"
                         ConfigVSSLocation="configVSSLocation"
                         <Output TaskParameter="RevisionNumber" ItemName="revisionNumberItem"></Output>
                         <Output TaskParameter="MajorNumber" ItemName="majorNumberItem"></Output>
                         <Output TaskParameter="MinorNumber" ItemName="minorNumberItem"></Output>
                         <Output TaskParameter="BuildNumber" ItemName="buildNumberItem"></Output>
                         <Output TaskParameter="StartDate" ItemName="startDateItem"></Output>
                         <Output TaskParameter="VersionNumber" ItemName="versionNumberItem"></Output>
                         <Output TaskParameter="VersionName" ItemName="versionNameItem"></Output>
             </VersionNumber.Load>
             ]]></code>
             <para>where:</para>
             <para><i>versionNamePath</i></para>
             <para>The path to the root folder for the current version.</para>
             <para><i>configFileLocation</i></para>
             <para>Fully qualified file name to the xml config file. The file contains, in Xml format, the major, minor, build and revision number.</para>
            
             For example:
             
             <example>
             <code><![CDATA[
             <?xml version="1.0" encoding="utf-8"?>
                 <configuration>
                     <appSettings>
                         <add key="major" value="1" />
                         <add key="minor" value="2" />
                         <add key="build" value="1354" />
                         <add key="revision" value="155" />
                     </appSettings>
                 </configuration>
             ]]></code>    
             </example>
            
             <para><i>configVSSLocation</i></para>
             <para>The path to the config file specified in <i>versionNumberConfigFileLocation</i> inside VSS, using VSS-style notation.</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <VersionNumber.Load>
                           VersionNamePath="$(MSBuildProjectDirectory)\..\.."
                           ConfigFileLocation="@(VersionXmlFile)" 
                           <Output TaskParameter="VersionName" ItemName="VersionName">
                     </VersionNumber.Load> 
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Load.#ctor">
            <summary>
            Initializes a new instance of the LoadVersionNumber class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VersionNumber.Load.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder">
            <summary>
            Calls SandcastleBuilder in order to generate compiled HTML documentation for the specified assemblies.
            SandcastleBuilder is an open-source tool that packages up  Sandcastle toolset to operate in a similar manner to NDoc
            </summary>
            <remarks>
            <code><![CDATA[
            <Tools.SandcastleBuilder Assemblies="assemblies"
                         ProjectFilePath="projectFilePath"
                         OutputPath="outputFilePath"
                         SandcastlePath="sandcastlePath"    
                         PresentationStyle="presentationStyle"
                         OutputPath="outputPath"
                         HelpFileFormat ="helpFileFormat ">
            </Tools.SandcastleBuilder>
            ]]></code>
            <para>where:</para>
            <para><i>assemblies (Required)</i></para>
            <para>The fullpaths to the assemblies to create docs for.</para>
            <para><i>projectFilePath (Required)</i></para>
            <para>This will be the Sandcastle Help File Build Project file that will be used as a template.</para>
            <para><i>outputFilePath (Optional)</i></para>
            <para>The name of the folder to create all the compiled help docs in. The value in the project file will be used if not specified</para>
            <para><i>presentationStyle (Optional)</i></para>
            <para>Defines the presentation style for the help topic pages. Allowed values are Prototype/VS2005</para>
            <para><i>sandcastlePath (Optional)</i></para>
            <para>The name of the folder to where the Sandcastle Toolset is installed. The value defined in the project file will be used if not specified</para>
            <para><i>helpFileFormat (Optional)</i></para>
            <para>Available format are
                    HtmlHelp1x HTML Help 1.x format built with HHC.EXE 
                    HtmlHelp2x HTML Help 2.x format built with HXCOMP.EXE 
                    Website A web site with basic frame set viewer page 
                    Help1xAndWebsite An HTML Help 1.x file and web site 
                    Help2xAndWebsite An HTML Help 2.x file and web site</para>    
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <ItemGroup>
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.dll" />
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.Test.dll" />
                </ItemGroup>
                <Target Name="Test" >
                    <Tools.SandcastleBuilder
                        ProjectFilePath="$(MSBuildProjectDirectory)\SandcastleHelpFileBuilder\Main\Main.shfb" 
                        OutputPath="$(TEMP)\Main\DocOutput" 
                        Assemblies="@(Assemblies->'%(FullPath)')"
                        SandcastlePath="$(MSBuildProjectDirectory)\Tools\Sandcastle\Dec06CTP"
                        HelpFileFormat="Help1xAndWebsite" >    
                    </Tools.SandcastleBuilder>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.CommentsOnlyDefault">
            <summary>
            Default CommentsOnly value if not specified in the metadata
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.assemblies">
            <summary>
            Assemblies Task Item List
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.outputPath">
            <summary>
            Path to output working files and generated help 
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.presentationStyle">
            <summary>
            Defines the presentation style for the help topic pages. Allowed values are Prototype/VS2005
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.projectFilePath">
            <summary>
            Sandcastle Help File Builder Project Path
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.helpFileFormat">
            <summary>
            Help Format to generated
            </summary>
            <remarks>
            Available formats are
                    HtmlHelp1x HTML Help 1.x format built with HHC.EXE 
                    HtmlHelp2x HTML Help 2.x format built with HXCOMP.EXE 
                    Website A web site with basic frame set viewer page 
                    Help1xAndWebsite An HTML Help 1.x file and web site 
                    Help2xAndWebsite An HTML Help 2.x file and web site
            </remarks>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.sandcastlePath">
            <summary>
            Path to Sandcastle tool
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.logBuffer">
            <summary>
            The output is logged to this buffer - and displayed if an error occurs
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.#ctor">
            <summary>
            Initializes a new instance of the NDoc class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.GenerateFullPathToTool">
            <summary>
            Generates Full calculated path to tool including exe name
            </summary>
            <returns>Full calculated path to tool including exe name</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.LogEventsFromTextOutput(System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Log the Sandcastle Faults to raise to higher importance if the tool fails
            </summary>
            <param name="line">Line to log</param>
            <param name="messageImportance">Message Importance</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.GenerateCommandLineCommands">
            <summary>
            Generate Command Line Commands
            </summary>
            <returns>Project File Path</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.SetupSandcastleBuildProject">
            <summary>
            Update the Sandcastle Help Builder Project file
            </summary>
            <returns>True if updated successfully</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.ProjectFilePath">
            <summary>
            Project File Path
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.OutputPath">
            <summary>
            Output Path
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.HelpFileFormat">
            <summary>
            Help File Format
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.SandcastlePath">
            <summary>
            Sandcastle Path
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.PresentationStyle">
            <summary>
            Presentation Style
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.Assemblies">
            <summary>
            Assemblies to document
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.SandcastleBuilder.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.TaskException">
            <summary>
            Generic TaskException used for wrapping other exceptions with more task specific
            information such as properties set on task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskException.#ctor(System.Exception,System.String,System.String[])">
            <summary>
            Initializes a new instance of the TaskException class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the TaskException class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TaskException class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.TaskException.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the TaskException class.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Registry.GetKey">
            <summary>
            Gets a Registry Key Value.
            </summary>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Registry.GetKey MachineName="AMachineName" RegistryHive="LocalMachine" Key="SOFTWARE\Microsoft\Windows\CurrentVersion" Value="ProgramFilesDir">
                        <Output TaskParameter="Data" PropertyName="RegValue"/>
                    </Registry.GetKey>
                    <Message Text="The reg value is $(RegValue)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.GetKey.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.GetKey.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The Key value.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.GetKey.RegistryHive">
            <summary>
            Gets or sets the registry hive.
            </summary>
            <value>The registry hive.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.GetKey.MachineName">
            <summary>
            Gets or sets the name of the machine.
            Defaults to local machine if not specified.
            </summary>
            <value>The name of the machine.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.GetKey.Value">
            <summary>
            Gets or sets the value. If Value is not provided, an attempt will be made to read the Default Value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.GetKey.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceSafe.LabelLatest">
            <summary>
            Labels the latest versions of files in a Visual SourceSafe project.
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceSafe.LabelLatest
                        Database="database"
                        Username="username" 
                        Password="password" 
                        Label="label" 
                        Project="project"
                        SSVersion="ssversion">
            </SourceSafe.LabelLatest>
            ]]></code>
            <para>where:</para>
            <para><i>database</i></para>
            <para>The VSS database location. This database must exist and must be a valid VSS database.</para>
            <para><i>username</i></para>
            <para>The username that will be used when labelling VSS</para>
            <para><i>password</i></para>
            <para>The password for the username specified in <i>username</i></para>
            <para><i>label</i></para>
            <para>Label to apply to the latest versions of all files in the project.</para>
            <para><i>project</i></para>
            <para>The VSS style syntax for project location.</para>
            <para><i>ssversion</i></para>
            <para>The SourceSafe version to use. Default is 6d. Supports 6d and 2005</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceSafe.LabelLatest
                          Database='\\build5\SourceSafe\Pilot\db'
                          Project='$/Projects/Main/$(VersionName)'
                          Username='myDomain\theBuilder' 
                          Password='123$abc'
                          Label='Daily_050625' />
                    </SourceSafe.LabelLatest> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceSafe.LabelLatest.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceSafe.LabelLatest.SSVersion">
            <summary>
            Gets or sets the SourceSafe version.
            </summary>
            <value>The SS version.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetEnvironmentVariable.#ctor">
            <summary>
            Initializes a new instance of the GetEnvironmentVariable class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetEnvironmentVariable.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetEnvironmentVariable.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetEnvironmentVariable.Variable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetEnvironmentVariable.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.Dacl">
            <summary>
            Summary description for Dacl.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.Acl">
            <summary>
            Summary description for Acl.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo">
            <summary>
            Provides all the information necessary to execute a SQL script using the
            class <see cref="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.ServerName">
            <summary>
            The SQL Server name.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.DatabaseName">
            <summary>
            Name of the database that the script will be run against.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.ConnectionString">
            <summary>
            Set this property to define a database connection string. This
            property can be used instead of the combination of <see cref="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.ServerName"/> and
            <see cref="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.DatabaseName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the 
            attempt to execute a command and generating an error.
            </summary>
            <remarks>
            Has a default value of 30 seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.Path">
            <summary>
            The location of the script file to execute. The path can include wild-card
            characters '*' and '?'.
            </summary>
            <remarks>
            This property can only be set if <see cref="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.Sql"/> is not set.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.Sql">
            <summary>
            SQL command text to be executed.
            </summary>
            <remarks>
            This property can only be set if <see cref="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.Path"/> is not set.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.SubstitutionParameters">
            <summary>
            Contains the names of parameters that need to be substituted with 
            their given values before the script is executed.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.Exclusions">
            <summary>
            A hash table of exclusions that are keyed on the path of the script file(s) that are to be
            omitted from execution. The paths can include wild-card characters '*' and '?'. The value
            entries for the corresponding keys are ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.RetryFailures">
            <summary>
            If true, scripts that failed will be retried. Execution will stop
            when there is no improvement in the number of scripts that failed.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo.RollbackOnError">
            <summary>
            If true, scripts will be executed in a transaction and will be
            rolled back if an error occurs.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ShellExecute">
            <summary>
            Summary description for ShellExecute.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ShellExecute.WaitForExit">
            <summary>
            Forces us to wait the specified number of milliseconds for the associated process to exit.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.ShellExecute.WaitExpired">
            <summary>
            Returns true if the process waited for the time specified by WaitForExit and the process hadn't completed.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.BinaryLogicalOperator">
            <summary>
            Logical operator with two operands, such as And or Or.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.Logout">
            <summary>
            Logs out the current security context created by the <see cref="T:Microsoft.Sdc.Tasks.Security.Login"/> task.
            </summary>
            <remarks>
            <code><![CDATA[<Security.Logout/>]]></code>
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.Logout.#ctor">
            <summary>
            Logs out a previous <see cref="T:Microsoft.Sdc.Tasks.Security.Login"/> task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.Logout.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.Logout.NativeMethods">
            <summary>
            Imported Win32 API functions.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.DeleteAttribute">
            <summary>
            Deletes the named attribute from all elements in the specified file
            that match the specified XPath expression.
            Will fail of no matches found for the XPath expression.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.DeleteAttribute Path="path" XPath="xpath" Name="name" Namespaces="namespaces" IgnoreNoMatchFailure="ignoreNoMatchFailure" Force="force"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to modify.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate to find the parent element(s) to remove the attribute from.</para>
            <para><i>Name (Required)</i></para>
            <para>The name of the attribute to delete.</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>IgnoreNoMatchFailure</i></para>
            <para>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</para>
            <para><i>Force</i></para>
            <para>If set to true, this will force the file to be updated even if it is Read Only.  Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.DeleteAttribute 
            			Path="c:\app.config"
            			XPath="/configuration/appSettings/add"
            			Name="key"
            			Namespaces="@(ConfigNamespaces)"
            			IgnoreNoMatchFailure="true"
            			Force="true"
            		/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.DeleteAttribute.#ctor">
            <summary>
            Create a new DeleteAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.DeleteAttribute.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.DeleteAttribute.Name">
            <summary>
            The name of the new element to append to each element matching the XPath Expression.
            </summary>
            <value>The name of the new element to append to each element matching the XPath Expression.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.DeleteAttribute.IgnoreNoMatchFailure">
            <summary>
            If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.
            </summary>
            <value>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.DeleteAttribute.Force">
            <summary>
            If set to true, this will modify the xml file even if it is read-only.  Defaults to false.
            </summary>
            <value>If set to true, this will modify the xml file even if it is read-only.  Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType">
            <summary>
            Adds a new Mime Type to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.AddMimeType 
                Identifier="identifier"
                Description="description"
                FileExtension="FileExtension"
                MimeType="MimeType" />]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description to add the Mime type to</para>
            <para><i>identifier</i></para>
            <para>optional parameter to identify website when 'description' is not used</para>
            <para><i>FileExtension (Required)</i></para>
            <para>File extension for the new type</para>
            <para><i>MimeType (Required)</i></para>
            <para>Mime type string</para>
            <para><i>machineName</i></para>
            <para>Machine to operate on(defaults to localhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.AddMimeType
                        Desciption="mytestsite"
                        FileExtension=".flv"
                        MimeType="video/x-flv"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.FileExtension">
            <summary>
            File extension for mime type
            </summary>
            <value>extension</value>
            <remarks>required</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.MimeType">
            <summary>
            String describing MimeType
            </summary>
            <value>type</value>
            <remarks>required</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.Description">
            <summary>
            Description of web site to which we are adding the filter
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.Identifier">
            <summary>
            web site idenfitier for website to which we are adding the filter
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddMimeType.Description">Description</seealso> 
            </remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VersionNumber.CppCodeDomProvider">
            <summary>
            Summary description for CppCodeDomProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.CreateProject.#ctor">
            <summary>
            Initializes a new instance of the CreateProject class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.CreateProject.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Mithran.CreateProject.Port">
            <summary>
            Only used for Webs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Mithran.CreateProject.AssemblyName">
            <summary>
            Will default based on rootnamespace if not provided (with an approppriate ext)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Mithran.CreateProject.TemplatePath">
            <summary>
            Defaults to the folder we are running from with a Templates suffix
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.MessageQueue.Create">
            <summary>
            Creates a new Message Queue.
            </summary>
            <remarks>
            <code><![CDATA[<MessageQueue.Create QueuePath="queuePath" QueueLabel="queueLabel" TransactionsEnabled="transactionsEnabled" />]]></code>
            <para>where:</para>
            <para><i>queuePath (Required)</i></para>
            <para>
            The path of the queue to create. An exception will be thrown if the queue already exists at the specified path.
            The path must be prefixed by the machine name (or "." to represent the local computer). See <see cref="P:System.Messaging.MessageQueue.Path"/> for more details.
            </para>
            <para><i>queueLabel</i></para>
            <para>
            The label for the message queue. The maximum length of a message queue label is 124 characters.
            </para>
            <para><i>transactionsEnabled</i></para>
            <para>
            True to create a transactional queue; false to create a nontransactional queue. Defaults to false.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <MessageQueue.Create
                        QueuePath=".\\TempQueue"
                        QueueLabel="MyQueueLabel1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageQueue.Create.#ctor">
            <summary>
            Initializes a new instance of the Create class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageQueue.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.Create.QueuePath">
            <summary>
            The path of the queue to create.
            </summary>
            <value>The path of the queue to create. An exception will be thrown if the queue already exists at the specified path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.Create.QueueLabel">
            <summary>
            The label for the message queue. 
            </summary>
            <value>The label for the message queue. The maximum length of a message queue label is 124 characters.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.Create.TransactionsEnabled">
            <summary>
            Determines whether the created queue will support transactions.
            </summary>
            <value>True to create a transactional queue; false to create a nontransactional queue. Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.GlobalAssemblyCache.RemoveAssembly">
            <summary>
            Removes an assembly from the GAC
            </summary>
            <remarks>
            <code><![CDATA[<GlobalAssemblyCache.RemoveAssembly AssemblyName="assemblyName" />]]></code>
            <para>where:</para>
            <para><i>assemblyName (Required)</i></para>
            <para>
            The fully qualified name of the assembly to remove from the GAC
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <GlobalAssemblyCache.RemoveAssembly
                        AssemblyName="sampleAssembly, Version=1.0.1630.33126, Culture=neutral, PublicKeyToken=74b9cb296faeeb25, Custom=null" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.RemoveAssembly.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GlobalAssemblyCache.RemoveAssembly.AssemblyName">
            <summary>
            The fully qualified name of the assembly to remove from the GAC
            </summary>
            <value>The fully qualified name of the assembly to remove from the GAC</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.EventSource.Log">
            <summary>
            Logs an event to a Event Source.  A TaskException will be thrown if the source does not exist.
            </summary>
            <remarks>
            <code><![CDATA[<EventSource.Log Source="source" EventId="eventid" Description="description" RemoteMachine="remotemachine" />]]></code>
            <para>where:</para>
            <para><i>source (Required)</i></para>
            <para>The source name by which the application is registered on the computer being logged against.</para>
            <para><i>eventid (Required)</i></para>
            <para>The event id of the log record.</para>
            <para><i>description (Required)</i></para>
            <para>The description of the log record.</para>
            <para><i>remotemachine (Optional)</i></para>
            <para>The machine to receive the log record.  If not specified, defaults to the local machine. (Optional)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <EventSource.Log
                        Source="MyEventSource"
                        EventId="10000"
                        Description="MyDescription" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.EventSource.Log.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Log.Source">
            <summary>
            The source name by which the application is registered on the local computer (or th remote computer if RemoteMachine is specified).
            </summary>
            <value>The source parameter can be any string, although often it will be the name of your application or a component of your application. The source must be unique on the local computer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Log.EventId">
            <summary>
            The Log Record's event id.
            </summary>
            <value>An integer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Log.Description">
            <summary>
            The Log Record's description.
            </summary>
            <value>A text description of the event.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Log.LogType">
            <summary>
            The Event Log Entry Type.
            </summary>
            <value>The type of the event.  Possible values are: Error, FailureAudit, Information, SuccessAudit, Warning.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Log.RemoteMachine">
            <summary>
            The Remote Machine.
            </summary>
            <value>The machine name where the event log exists.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.HttpErrorCollection">
            <summary>
            Summary description for HttpErrorCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Section">
            <summary>
            Summary description for Section.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent">
            <summary>
            Adds a component to the specified ComponentServices Application.
            </summary>
            <remarks>
            <code><![CDATA[<ComponentServices.Application.AddComponent Path="path" ApplicationName="applicationName" ComponentName="componentName" ConstructorString="constructorString" Identity="identity" Password="password" Runtime="runtime" ShutdownAfter="shutDownAfter" ActivationString="activationString" EnforceAccessChecks="enforceAccessChecks" RunForever="runForever" />]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The valid path to the DLL to be added to application.</para>
            <para><i>applicationName</i></para>
            <para>The name of the COM+ application. This application will be created if it does not exist.</para>
            <para><i>identity</i></para>
            <para>Sets the server process identity for the application. Specify a valid user account or "Interactive User" to have the application assume the identity of the current logged-on user. This is not enabled for library applications, which run in the client process.</para>
            <para><i>password</i></para>
            <para>Sets the password used by the server process to log on under the identity. Password should be set at the same time as Identity, because the password and identity are validated before being saved. If the password and identity get out of sync, the application cannot be launched until they are reset by an administrator.</para>
            <para><i>runtime</i></para>
            <para>Decimal value for version of runtime targeted. Mandatory for .NET components to be registered. Defaults to "2.0"</para>
            <para><i>shutDownAfter</i></para>
            <para>Sets the delay before shutting down a server process after it becomes idle. Shutdown latency ranges from 0 to 1440 minutes (24 hours). If RunForever is set to True, this property is ignored. ShutdownAfter is not enabled for library (in-process) applications.</para>
            <para><i>activationString</i></para>
            <para>Set to "Local" to indicate that objects within the application run within a dedicated local server process (server application). Set to "Inproc" to indicate that objects run in their creator's process (library application). Defaults to local</para>
            <para><i>enforceAccessChecks</i></para>
            <para>Indicates whether access checks are performed for the application when clients make calls into it.</para>
            <para><i>runForever</i></para>
            <para>Enables a server process to continue if an application is idle. If set to True, the server process does not shut down when left idle. If set to False, the process shuts down according to the value set by the ShutdownAfter property. RunForever is not enabled for library (in-process) applications.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Application.AddComponent
                        Path="C:\Soutions\MyNamespace.MyAssembly.dll"
                        ApplicationName="MyApplicationName"
                        Identity="Interactive User"
                        Runtime="1.1"
                        ActivationString="Local"
                        RunForever="true" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.ApplicationName">
            <summary>
            Gets or sets the name of the COM+ Application.
            </summary>
            <value>The COM+ Application name. The application will be created if it doesn't exist</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.Path">
            <summary>
            Gets or sets the path to the DLL to be added to the application
            </summary>
            <value>Defaults to String.Empty</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.Identity">
            <summary>
            Gets or sets the server process identity for the application. 
            </summary>
            <value>Specify a valid user account or "Interactive User" to have the application assume the identity of the current logged-on user.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.Password">
            <summary>
            Gets or sets the password for the supplied identity
            </summary>
            <value>The password for the user account specified in Identity. Not required if the Identity is set to "Interactive User".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.Runtime">
            <summary>
            Gets or sets the Version of the .NET runtime targeted.
            </summary>
            <value>Decimal value for version of runtime targeted. Defaults to "1.0"</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.ShutdownAfter">
            <summary>
            Gets or sets the Time in minutes for an application to wait before shutting.
            </summary>
            <value>Sets the delay before shutting down a server process after it becomes idle. Shutdown latency ranges from 0 to 1440 minutes (24 hours). If RunForever is set to True, this property is ignored. ShutdownAfter is not enabled for library (in-process) applications.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.ActivationString">
            <summary>
            Gets or sets the type of activation for the application.
            </summary>
            <value>"Local" - local activation indicates that objects within the application run within a dedicated local server process (server application). 
            "Inproc" - in-process activation indicates that objects run in their creator's process (library application). 
            Defaults to "Local".</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.EnforceAccessChecks">
            <summary>
            Gets or sets a value indicating whether access checks are performed for the application when clients make calls into it.
            </summary>
            <value>Set to true if access checks are to be performed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.AddComponent.RunForever">
            <summary>
            Gets or sets a value indicating whether a server process should continue if an application is idle. 
            </summary>
            <value>If set to True, the server process does not shut down when left idle. If set to False, the process shuts down according to the value set by the ShutdownAfter property. RunForever is not enabled for library (in-process) applications.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Zip.ExtractFile">
            <summary>
            Extracts the requested file from the specified zip file using J# 2.0.
            </summary>
            <remarks>
            <code><![CDATA[<Zip.Extract PathToZipFile="pathToZipFile" PathToFile="pathToFile" FileToExtract="fileToExtract" />]]></code>
            <para>where:</para>
            <para><i>pathToZipFile (Required)</i></para>
            <para>The path to the zip file to be extracted from.</para>
            <para><i>pathToFile (Required)</i></para>
            <para>The path to where files should be extracted to.</para>
            <para><i>fileToExtract</i></para>
            <para>The file to extract from the zip file.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Zip.Extract
                        PathToZipFile="c:\newzip.zip" 
                        PathToFile="c:\extractedfiles"/
                        FileToExtract="extractme.txt">
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ExtractFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.ExtractFile.PathToFile">
            <summary>
            Path to where files should be extracted
            </summary>
            <value>Path</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.ExtractFile.SkipExisting">
            <summary>
            Set to true in order to skip over files that already exist with the same or newer date
            </summary>
            <value>defaults to true</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.ExtractFile.PathToZipFile">
            <summary>
            Specifies the path to and filename of the zip file the add action is to be performed on.
            </summary>
            <value>The path to and filename of the zip file.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.ExtractFile.FileToExtract">
            <summary>
            Specific filename to extract from the zip file
            </summary>
            <value>File name to extract</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile">
            <summary>
            Add the specified file as a web service extension (IIS6 or later)
            </summary>
            <remarks>
            <code><![CDATA[<Web.ServiceExtension.AddFile
                Path="path"
                Description="description" 
                Deletable="deletable"
                GroupID="groupID" 
                Permission="permission"/>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>Fully specified path to the extension file.</para>
            <para><i>description</i></para>
            <para>A description for this extension.</para>
            <para><i>deletable</i></para>
            <para>Boolean value used to prevent or allow a Web service extension file from being deleted from the Web Service Extension Restriction List.</para>
            <para><i>groupID</i></para>
            <para>A unique text ID associated with one or more ISAPIs or CGIs required for enabling the group.</para>
            <para><i>permission</i></para>
            <para>Boolean value indicating if the web service extension file is disabled (false) or enabled (true) after the Web service is added.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.ServiceExtension.AddFile
                        Path="c:\myweb\myextensionservice.dll"
                        Description="My Extension Service"
                        Deletable="false"
                        GroupID="myext01"
                        Permission="true"
                   />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.Path">
            <summary>
            Path to the web extension service file.
            </summary>
            <value>Fully specified path to the web extension service file</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.Deleteable">
            <summary>
            Permissions flag to control if a Web service extension file can be 
            deleted from the Web Service Extension Restriction List.
            </summary>
            <value>"false" to prevent deletion though the IIS admin tools </value>
            <value>"true" to allow deletion</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.Description">
            <summary>
            Description of the web service extension being added
            </summary>
            <value>A valid web service description</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.GroupID">
            <summary>
            A unique text ID associated with one or more ISAPIs or CGIs required for enabling the group
            </summary>
            <value>A unique, valid group ID</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.ServiceExtension.AddFile.Permission">
            <summary>
            Flag indicating the web service extension start state.
            </summary>
            <value>"false" to start the extension as disabled, "true" to start as enabled</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat">
            <summary>
            Checks if the Virtual Machine's Guest OS has started.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.OS.CheckHeartBeat
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout"
                        Retries="retries" >
                        <Output TaskParameter="IsAlive" ItemName="aliveItem"></Output>
            </VirtualServer.VirtualMachine.OS.CheckHeartBeat>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to check.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the task to wait for a response, in milliseconds. Defaults to 10.</para>
            <para><i>aliveItem</i></para>
            <para>Returns true if the task receives a response from the virtual server within the specified <i>timeout</i> period and within
            the number of retries specified by <i>retries</i>. Otherwise, returns false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.OS.CheckHeartBeat
                        MachineName="myMachine"
                        Timeout="20"
                        <Output TaskParameter="IsAlive" ItemName="AliveItem"></Output>
                    </VirtualServer.VirtualMachine.OS.CheckHeartBeat> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.#ctor">
            <summary>
            Initializes a new instance of the CheckHeartBeat class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.IsAlive">
            <summary>
            Returns true if the task receives a response from the virtual server within the specified <i>timeout</i> period and within
            the number of retries specified by <i>retries</i>. Otherwise, returns false.
            </summary>
            <value>Returns true if the task receives a response from the virtual server within the specified <i>timeout</i> period and within
            the number of retries specified by <i>retries</i>. Otherwise, returns false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.Retries">
            <summary>
            The number of subsequent attempts the task should make to obtain a response from the virtual machine, if no response was obtained within the time specified by the <i>timeout</i>
            property.
            </summary>
            <value>The number of subsequent attempts the task should make to obtain a response from the virtual machine, if no response was obtained within the time specified by the <i>timeout</i>
            property. Defaults to 1.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.Timeout">
            <summary>
            Length of time to wait for the a response from the virtual machine, in seconds.
            </summary>
            <value>Length of time to wait for the a response from the virtual machine, in seconds. Defaults to 10.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.OS.CheckHeartBeat.MachineName">
            <summary>
            The name of the virtual machine to check.
            </summary>
            <value>The name of the virtual machine to check.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Vault.ResultReader">
            <summary>
            <para>Utillity class for reading xml formatted resposnes from the Vault command line client.  May be extended in the future to handle operations that return datasets (such as history, diff, etc).</para>
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.ResultReader.ReadResult(System.String)">
            <summary>
            Parses an xml string into a Result object that represents the error status and message from the Vault command line client.
            </summary>
            <param name="xml">Xml string returned from Vault command line client.</param>
            <returns>Result object.</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Vault.Result">
            <summary>
            Utility class to store return values from Vault command line client.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.Result.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Sdc.Tasks.Vault.Result"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.Result.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.MsTest.#ctor">
            <summary>
            Initializes a new instance of the MsTest class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.MsTest.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.MsTest.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of mstest</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.MsTest.AddQuotesToPath(System.String)">
            <summary>
            Adds the correct quotes to our paths to make sure mstest picks them up ok.
            </summary>
            <param name="pathToQuote">String to quote</param>
            <returns>Quoted string</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.MsTest.ProcessXmlResultsFile(System.String)">
            <summary>
            Processes the mstest results
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.MsTest.GetPathToBinFolder">
            <summary>
            Find the correct path containing the version of mstest specified.
            </summary>
            <returns>mstest bin directory</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.OutputFolder">
            <summary>
            Path and file to save the test results
            </summary>
            <value>Fully qualified path name of the folder to output files to</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.OutputXmlTransformFile">
            <summary>
            The path to the xsl file to transform the final results
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.Version">
            <summary>
            Version of MsTest used for testing
            </summary>
            <value>8.0</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.MetaDataFile">
            <summary>
            The test meta data file to load
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.WorkingDirectory">
            <summary>
            The working directory to find the test assemblies in
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.RunConfigFile">
            <summary>
            The Run Config File to use
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.IncludeTestList">
            <summary>
            The test lists to run
            </summary>
            <value>TestList names i.e. Rig/Smoke;SingleBox/Functional</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.IncludeTests">
            <summary>
            Tests
            </summary>
            <value>List of tests to execute</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.IncludeTestContainers">
            <summary>
            Test Containers
            </summary>
            <value>List of test containers</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.TestLists">
            <summary>
            Test Lists executed
            </summary>
            <value>The test lists executed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.Tests">
            <summary>
            Tests executed
            </summary>
            <value>List of tests executed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.TestContainers">
            <summary>
            Test Containers
            </summary>
            <value>List of test containers</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.Pass">
            <summary>
            Test passed
            </summary>
            <value>A list of tests passed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.Fail">
            <summary>
            Tests failed
            </summary>
            <value>A list of tests failed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.Errors">
            <summary>
            Tests that have errored
            </summary>
            <value>number of tests that have errors</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.FailFullTypeNames">
            <summary>
            TestNames that failed
            </summary>
            <value>The test that failed for each testlist</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.FailMethodNames">
            <summary>
            Test method names that failed
            </summary>
            <value>The test that failed for each testlist</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.NotRun">
            <summary>
            Tests not ran
            </summary>
            <value>A list of tests not ran</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.Total">
            <summary>
            A list of all tests within the specified assembly
            </summary>
            <value>A complete list of tests</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.TimeTaken">
            <summary>
            Time taken to test the specified assembly
            </summary>
            <value>Run time</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.MsTest.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Time.GetTime">
            <summary>
            Returns the current localised time.
            </summary>
            <remarks>
            <code><![CDATA[
            <Time.GetTime Format="yyyyMMdd-HHmmss">
                <Output TaskParameter="Time" PropertyName="ResultsItem" />
            </Time.GetTime>]]></code>
            <para>where:</para>
            <para><i>Format</i></para>
            <para>An optional parameter that is the format to return the date and time in. Default is "T" (Long Time)</para>
            <para><i>Time (Output)</i></para>
            <para>Stores the current time.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Time.GetTime>
                        <Output TaskParameter="Time" PropertyName="ResultsItem" />
                    </Time.GetTime>
                </Target>
            </Project> 
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Time.GetTime.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Time.GetTime.Format">
            <summary>
            Optional parameter for the date format to be returned
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.GetProperty">
            <summary>
            Installs an MSI package.
            </summary>
            <remarks>
            <code><![CDATA[<Msi.Install MsiPath="msiPath" ProductCode="productCode" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" PropertyFiles="propertyFiles" Properties="properties" Features="features" />]]></code>
            <para>where:</para>
            <para><i>msiPath (Required*)</i></para>
            <para>
            The path to the MSI to install.
            </para>
            <para><i>productCode (Required*)</i></para>
            <para>
            The GUID product code of the product to install.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the installation. The recommended file name is the name of the MSI
            with the extension *.install.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom installation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>propertyFiles</i></para>
            <para>
            A delimited list of XML property files that provide installation properties for the MSI. 
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </para>
            <para><i>properties</i></para>
            <para>
            A delimited list of installation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </para>
            <para><i>features</i></para>
            <para>
            A delimited list of the names of features to be installed. This is not necessary if the MSI does not
            have features configured, or you wish all features to be installed.
            </para>
            <para>
            <b>*</b> - Either <i>msiPath</i> or <i>productCode</i> must be provided. If both are provided then 
            <i>msiPath</i> takes precedence and <i>productCode</i> is ignored. If neither are provided then the
            task will throw an exception when it executes.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Msi.Install 
                        MsiPath="C:\Build\Msi\Packages\MyPackage.msi" 
                        ProductCode="b6b6f41c-fd3e-4b5b-8a73-c59494974990" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.install.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        PropertyFiles="C:\Build\Properties\Global.xml;C:\Build\Properties\Rig4.xml" 
                        Properties="INSTALLDIR=C:\Install;DOMAIN=rig4;MACHINE=r4app01" 
                        Features="MSMQ,BTS2004,WebServices" />
                </Target>
            </Project>
            ]]></code>  
            A sample property file is shown below. Note that you must include the namespace for the file to
            be parsed correctly.
            <code><![CDATA[
            <Properties xmlns="urn:sdc-microsoft-com:deployment:properties:v2.0">
                <Property Name="MY_PROPERTY" Value="some value" />
                <Property Name="ANOTHER_PROPERTY" Value="some other value" />
                <Property Name="SOMETHING_ELSE" Value="hello world" />
                ... etc ...
            </Properties>
            ]]></code>
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.GetProperty.#ctor">
            <summary>
            Initializes a new instance of the InstallMsi class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.GetProperty.InternalExecute">
            <summary>
            Executes the task to extract an MSI property.
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.GetProperty.PropertyName">
            <summary>
            Specifies the MSI property to extract
            </summary>
            <value>
            The name of the property
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.GetProperty.MsiPath">
            <summary>
            Gets or sets the full or relative path to the MSI.
            </summary>
            <value>
            The full or relative path to the MSI.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.GetProperty.PropertyValue">
            <summary>
            Returns the value of the MSI property requested
            </summary>
            <value>
            value of the property
            </value>    
        </member>
        <member name="T:Microsoft.Sdc.Tasks.GlobalAssemblyCache.AddAssembly">
            <summary>
            Adds an assembly to the GAC
            </summary>
            <remarks>
            <code><![CDATA[<GlobalAssemblyCache.AddAssembly AssemblyPath="assemblyPath" Force="force"/>]]></code>
            <para>where:</para>
            <para><i>assemblyPath (Required)</i></para>
            <para>
            The path to the assembly to be added the GAC
            </para>
            <para><i>force</i></para>
            <para>        
            Normally if the assembly is already installed in the GAC and the
            file version numbers of the assembly being installed are the same
            or later, the files are replaced. If force is true the files of an
            existing assembly are overwritten regardless of their version
            number.
            </para>
            
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <GlobalAssemblyCache.AddAssembly
                        AssemblyPath="C:\Temp\sampleAssembly.dll" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GlobalAssemblyCache.AddAssembly.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GlobalAssemblyCache.AddAssembly.AssemblyPath">
            <summary>
            The path to the assembly to be added the GAC
            </summary>
            <value>The path to the assembly to be added the GAC</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GlobalAssemblyCache.AddAssembly.Force">
            <summary>
            Normally if the assembly is already installed in the GAC and the
            file version numbers of the assembly being installed are the same
            or later, the files are replaced. If force is true the files of an
            existing assembly are overwritten regardless of their version
            number.
            </summary>
            <value>
            Normally if the assembly is already installed in the GAC and the
            file version numbers of the assembly being installed are the same
            or later, the files are replaced. If force is true the files of an
            existing assembly are overwritten regardless of their version
            number.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.StringComparison.Comparison">
            <summary>
            Supports 'GreaterThan', 'LessThan', 'GreaterThanOrEquals', 'LessThanOrEquals', 'Contains', 'StartsWith', 'EndsWith'
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.DisconnectUsers">
            <summary>
            Kill all processes acting on the specified table
            </summary>
            <remarks>
            <code><![CDATA[<Sql.DisconnectUsers (ServerName="serverName" connectionTimeout="timeout" | ConnectionString="connection") DatabaseName="database" commandTimeout="timeout" />]]></code>
            <para>where:</para>
            <para><i>databaseName (Required)</i></para>
            <para>The database on the specified server to grant access to.</para>
            <para><i>ConnectionString</i></para>
            <para>A valid connection string used to connect the SQL server to run the operation on.</para>
            <para><i>ServerName</i></para>
            <para>The server to disconnect users from (used instead of <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/>)</para>
            <para><i>ConnectionTimeout</i></para>
            <para>Number of seconds to wait before failing a connection attempt. 
            Used if a <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/> is not specified.</para>
            <para><i>CommandTimeout</i></para>
            <para>Number of seconds to wait before failing the kill request. </para>
            <para><b>WARNING: This action will attempt to kill all processes acting on the 
            specified table. This may include DTS and replication queries as well 
            as any active users.</b></para>
            <para><b>This task has not be tested against Yukon and may have unexpected behaviour.</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.DisconnectUsers
                        ServerName="(local)"
                        DatabaseName="testDB"
                        CommandTimeout="60" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.DisconnectUsers.#ctor">
            <summary>
            Initializes a new instance of the DisconnectUsers class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.DisconnectUsers.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.DisconnectUsers.DatabaseName">
            <summary>
            Database to perform the action on
            </summary>
            <value>A valid database name</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.StyleCopSummarySectionGenerator">
            <summary>
            Summary description for StyleCopSummarySectionGenerator.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.StyleCopSummarySectionGenerator.GenerateSection(System.String,System.String,System.String)">
            <summary>
            Create a StyleCopy summary section within the report
            </summary>
            <param name="sourceFolder">Path to folder where output files are</param>
            <param name="fileSpec">e.g. Report*.xml</param>
            <param name="name">Optional name for the section for use by an XSLT</param>
            <returns>New section</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.NUnitSectionGenerator">
            <summary>
            Generates a section based on the *summary* of NUnit tests
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs">
            <summary>
            Provides data for the ScriptFileExecuted event.
            </summary>
            <remarks>
            A ScriptFileEventArgs, which specifies information about the SQL 
            script file that was executed, is passed with each ScriptFileExecuted event.
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the ScriptFileEventArgs class.
            </summary>
            <param name="scriptFileInfo">
            A FileInfo value that represents information about the script 
            file that was executed.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.#ctor(System.Data.SqlClient.SqlErrorCollection)">
            <summary>
            Initializes a new instance of the ScriptFileEventArgs class.
            </summary>
            <param name="sqlInfo">
            A SqlErrorCollection that contains errors or trace information obtained from
            the connection used to execute a script.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.#ctor(System.IO.FileInfo,System.Exception)">
            <summary>
            Initializes a new instance of the ScriptFileEventArgs class.
            </summary>
            <param name="scriptFileInfo">
            A FileInfo value that represents information about the script 
            file that was executed.
            </param>
            <param name="reasonForFailure">
            The exception that was caught when a script execution failed.
            </param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.SqlInfo">
            <summary>
            A collection of SqlErrors.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.ScriptFileInfo">
            <summary>
            Gets the information about a script file that has been executed.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.Succeeded">
            <summary>
            Is true if the script executed successfully, otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs.ExecutionException">
            <summary>
            The exception that was caught when a script execution failed.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.VersionComparisonChecker">
            <summary>
            Enforces version comparison for versions strings separated by "." or ","
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criteria">
            <summary>
            Criteria is a Reverse Polish stack of operators:
            <list type="table">
            <item>
            	<term>IBinaryComparisonChecker</term>
            	<description>provides equality operator and any custom comparison implementation</description>
            </item>
            <item>
            	<term>UnaryLogicalOperator</term>
            	<description>Not or None</description>
            </item>
            <item>
            	<term>BinaryLogicalOperator</term>
            	<description>And, Or</description>
            </item>	
            </list>
            And values:
            <list type="table">
            <item>
            	<term>PropertyInfo</term><description>property of an object that will be checked against</description>
            	<term>Object</term><description>any constant value for the comparison arguments</description>
            </item>
            </list>	
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Criteria.IsMatch(System.Object)">
            <summary>
            Check through all the criterion to see if there is a mismatch otherwise
            return true.
            </summary>
            <param name="product">Object to match against</param>
            <returns>True if all criterion match</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.ComponentList">
            <summary>
            A collection of components
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.Component">
            <summary>
            Summary description for Component.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CodeCoverage.MergeReports">
            <summary>
            Merge separate code coverage reports for the same assembly into a single report.
            </summary>
            <remarks>
            <code><![CDATA[
            <CodeCoverage.MergeReports 
                OutputPath="outputPath" 
                FileSpec="fileSpec" 
                ReportFilenameMatch="reportFilenameMatch" />]]></code>
            <para>where:</para>
            <para><i>outputPath (Required)</i></para>
            <para>The full path to the folder in which the Code Coverage reports can be found.</para>
            <para><i>fileSpec</i></para>
            <para>The search string to match against the names of files in OutputPath. 
            The parameter cannot end in two periods ("..") or contain two periods (".."). 
            The default value is "Report*.xml".</para>
            <para><i>reportFilenameMatch</i></para>
            <para>Regular expression providing additional filtering on the files found in <i>outputPath</i>
            that match the <i>fileSpec</i>. Defaults to all .xml files prefixed by "Report".
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CodeCoverage.MergeReports
                        OutputPath="C:\CoverageEyeOutput"  
                        FileSpec="MyReport*.xml"  />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.MergeReports.#ctor">
            <summary>
            Initializes a new instance of the MergeReports class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.MergeReports.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.MergeReports.OutputPath">
            <summary>
            The full path to the folder in which the Code Coverage reports can be found.
            </summary>
            <value>The full path to the folder in which the Code Coverage reports can be found.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.MergeReports.FileSpec">
            <summary>
            The search string to match against the names of files in OutputPath. 
            The parameter cannot end in two periods ("..") or contain two periods (".."). 
            The default value is "Report*.xml"
            </summary>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare"/>
            <value>The search string to match against the names of files in OutputPath.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.MergeReports.ReportFilenameMatch">
            <summary>
            Regular expression providing additional filtering on the files found in <i>outputPath</i>
            that match the <i>fileSpec</i>. 
            </summary>
            <value><![CDATA[Regular expression providing additional filtering on the files found in <i>outputPath</i>
            that match the <i>fileSpec</i>. Defaults to "Report.{[A-Z0-9-]*}.(?<dll>[a-zA-Z0-9.]+).xml".]]></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.GetEnvironment">
            <summary>
            Retrieves information about the execution environment
            </summary>
            <remarks>
            <code><![CDATA[<GetEnvironment>
                            <Output TaskParameter="CurrentDirectory" PropertyName="out1" />
                            <Output TaskParameter="OSVersion" PropertyName="out2" />
                            <Output TaskParameter="ProcessorCount" PropertyName="out3" />
                            <Output TaskParameter="SystemDirectory" PropertyName="out4" />
                            <Output TaskParameter="UserInteractive" PropertyName="out5" />
                            <Output TaskParameter="LogicalDrives" PropertyName="out6" />
                           </GetEnvironment>]]></code>
            <para>where:</para>
            <para><i>CurrentDirectory</i></para>
            <para>Current working directory</para>
            <para><i>OSVersion</i></para>
            <para>OS Verwsion Number</para>
            <para><i>ProcessorCount</i></para>
            <para>number of processors</para>
            <para><i>SystemDirectory</i></para>
            <para>Full path to system directory</para>
            <para><i>UserInteractive</i></para>
            <para>true if the current process is running in user interactive mode</para>
            <para><i>LogicalDrives</i></para>
            <para>List of names logical drives on the system</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <GetEnvironment>
                            <Output TaskParameter="CurrentDirectory" PropertyName="out1" />
                            <Output TaskParameter="OSVersion" PropertyName="out2" />
                            <Output TaskParameter="ProcessorCount" PropertyName="out3" />
                            <Output TaskParameter="SystemDirectory" PropertyName="out4" />
                            <Output TaskParameter="UserInteractive" PropertyName="out5" />
                            <Output TaskParameter="LogicalDrives" PropertyName="out6" />
                    </GetEnvironment>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.Sync">
            <summary>
            Syncronises with SourceTfs.
            </summary>
            <remarks>
            <code><![CDATA[<SourceTfs.Sync OutputFolder="outputFolder" Label="label" All="all" Overwrite="overwrite" Force="force" TfsVersion="tfsVersion" WorkingDirectory="workingDirectory"/>]]></code>
            <para>where:</para>
            <para><i>outputFolder</i></para>
            <para>The path to the folder to write the sync command output to. If not specified it won't be written to a file.</para>
            <para><i>label</i></para>
            <para>If specified syncs to the label.</para>
            <para><i>all</i></para>
            <para>If specified forces all files to be retrieved, not just those that are out-of-date.</para>
            <para><i>overwrite</i></para>
            <para>If specified overwrites writable files that are not checked out.</para>
            <para><i>force</i></para>
            <para>If specified implies <i>all</i> and <i>overwrite.</i></para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            <para><i>workingDirectory</i></para>
            <para>Specifies the WorkingDirectory to run TF.exe in. This determines the workspace</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.Sync
                        OutputFolder="c:\temp"
                        Label="ConfigMainLatest" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.SourceTfs.Sync.all">
            <summary>
            If specified forces all files to be retrieved, not just those that are out-of-date.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.SourceTfs.Sync.force">
            <summary>
            If specified implies <i>all</i> and <i>overwrite.</i>
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.SourceTfs.Sync.label">
            <summary>
            If specified syncs to the label.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.SourceTfs.Sync.outputFolder">
            <summary>
            The path to the folder to write the sync command output to. If not specified it won't be written to a file.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.SourceTfs.Sync.overwrite">
            <summary>
            If specified overwrites writable files that are not checked out.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.SourceTfs.Sync.path">
            <summary>
            Specifies the path to the file or folder.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.Sync.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.All">
            <summary>
            Gets or sets a value indicating whether to force all files to be retrieved, not just those that are out-of-date.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.Force">
            <summary>
            Gets or sets a value indicating whether to imply <i>all</i> and <i>overwrite.</i>
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.Label">
            <summary>
            Gets or sets the label with which to synchronize
            </summary>
            <value>Label name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.OutputFolder">
            <summary>
            Gets or sets If specified the sync output will be written to this file
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.Overwrite">
            <summary>
            Gets or sets a value indicating whether to overwrite writable files that are not checked out.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.Sync.Path">
            <summary>
            Gets or sets the path to the file or folder.
            </summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.Login">
            <summary>
            Logs in using the specified login name and password
            </summary>
            <remarks>
            <code><![CDATA[<Security.Login UserName="barryd" Password="sekrit" />]]></code>
            <para>where:</para>
            <para><i>UserName (Required)</i></para>
            <para>The username to login as.</para>
            <para><i>Password (Required)</i></para>
            <para>The password for the specified username.</para>
            <para>To logout use the <see cref="T:Microsoft.Sdc.Tasks.Security.Logout"/> task.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.Login.#ctor">
            <summary>
            Initialises a new instance of the Login class. 
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.Login.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.Login.UserName">
            <summary>
            The username to login as.
            </summary>
            <value>The username to login as.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.Login.Password">
            <summary>
            The password for the specified <see cref="P:Microsoft.Sdc.Tasks.Security.Login.UserName"/>
            </summary>
            <value>The password for the specified <see cref="P:Microsoft.Sdc.Tasks.Security.Login.UserName"/></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.Login.Domain">
            <summary>
            The domain to use when logging in.
            </summary>
            <value>The domain to use when logging in.</value>
            <remarks>This defaults to the local machine name.</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.Login.LoginType">
            <summary>
            The <see cref="T:Microsoft.Sdc.Tasks.Security.Login.login32Type"/>  to login as.
            </summary>
            <value>The <see cref="T:Microsoft.Sdc.Tasks.Security.Login.login32Type"/> to login as</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.Login.LoginProvider">
            <summary>
            The <see cref="T:Microsoft.Sdc.Tasks.Security.Login.login32Provider"/> to use.
            </summary>
            <value>The <see cref="T:Microsoft.Sdc.Tasks.Security.Login.login32Provider"/> to use.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.Login.NativeMethods">
            <summary>
            Imported Win32 API functions.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.Login.login32Type">
            <summary>
            Login Types
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.Interactive">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.Network">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.Batch">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.      
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.Service">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.Unlock">
            <summary>
            This logon type is for GINA DLLs that log on users who will be interactively using the computer.
            This logon type can generate a unique audit record that shows when the workstation was unlocked. 
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.NetworkCleartext">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Type.NewCredentials">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported. 
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.Login.login32Provider">
            <summary>
            Login Providers
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Provider.Default">
            <summary>
            Default login provider for the machine
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Provider.WINNT35">
            <summary>
            Windows NT 3.5 login provider
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Provider.WINNT40">
            <summary>
            Windows NT 4.0 login provider
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Security.Login.login32Provider.WINNT50">
            <summary>
            Windows 2000 login provider
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Zip.ZipManager">
            <summary>
            Provides methods for manipulating Zip files
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.Create(System.String)">
            <summary>
            Create the Zip file
            </summary>
            <param name="pathToZipFile">File path for Zip file.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.Extract(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Extract contents
            </summary>
            <param name="pathToZipFile">File path for Zip file.</param>
            <param name="path">Extract path.</param>
            <param name="fileToExtract">File to extract.</param>
            <param name="skipExisting">Skip existing file.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extract contents
            </summary>
            <param name="pathToZipFile">File path for Zip file.</param>
            <param name="pathToFile">Extract path.</param>
            <param name="skipExisting">Skip existing file.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.Extract(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Extract contents
            </summary>
            <param name="pathToZipFile">File path for Zip file.</param>
            <param name="path">Extract path.</param>
            <param name="filesToExtract">Files to extract.</param>
            <param name="skipExisting">Skip existing file.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.Add(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add file to the Zip
            </summary>
            <param name="pathToZipFile">File path for Zip file.</param>
            <param name="pathToFile">Path to file to add.</param>
            <param name="includeFolderPath">Include the file's path in the archive.</param>
            <param name="rootFolder">Folder to use as root for archive.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.Add(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            Add file to the Zip
            </summary>
            <param name="pathToZipFile">File path for Zip file.</param>
            <param name="pathsToFiles">Paths to files to add.</param>
            <param name="includeFolderPath">Include the file's path in the archive.</param>
            <param name="rootFolder">Folder to use as root for archive.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.AddDirectory(System.String,java.util.zip.ZipOutputStream,System.Boolean,System.String)">
            <summary>
            Add directory to the Zip
            </summary>
            <param name="directory">Directory to add.</param>
            <param name="destination">The output destination.</param>
            <param name="includeFolderPath">Include the file's path in the archive.</param>
            <param name="rootFolder">Folder to use as root for archive.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.AddFile(System.String,java.util.zip.ZipOutputStream,System.Boolean,System.String)">
            <summary>
            Add file to the Zip
            </summary>
            <param name="filename">Name of file to add.</param>
            <param name="destination">The output destination.</param>
            <param name="includeFolderPath">Include the file's path in the archive.</param>
            <param name="rootFolder">Folder to use as root for archive.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.ExtractInternal(System.String,System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Extract contents of Zip.
            </summary>
            <param name="pathToZipFile">Pathto the Zip file.</param>
            <param name="pathToDestinationFolder">Destination to extract to.</param>
            <param name="filesToExtract">List of files to extract.</param>
            <param name="extractAll">Extract all files.</param>
            <param name="skipExisting">Skip exisiting files.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.OpenFile(System.String)">
            <summary>
            Open a Zip file.
            </summary>
            <param name="pathToZipFile">Path to the Zip file.</param>
            <returns>The opened Zip file.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.CopyZipEntries(java.util.zip.ZipFile,java.util.zip.ZipOutputStream)">
            <summary>
            Copy contents of Zip.
            </summary>
            <param name="source">Source.</param>
            <param name="destination">Destination.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.ZipManager.CopyStream(java.io.InputStream,java.io.OutputStream)">
            <summary>
            Copy stream.
            </summary>
            <param name="source">Source.</param>
            <param name="destination">Destination.</param>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Xml.CanonicalizeFile">
            <summary>
            Converts a set of Xml files to the canonicalized form, in accordance with the algorithm 
            specified in http://www.w3.org/TR/xml-c14n
            </summary>
            <remarks>
            <code><![CDATA[
            <Xml.CanonicalizeFile
                        SourceFiles="sourceFiles"
                        DestinationFiles="destinationFiles"
                        Timeout="timeout" >
            </Xml.CanonicalizeFile>
            ]]></code>
            <para>where:</para>
            <para><i>sourceFiles (Required)</i></para>
            <para>The full paths to the xml files that are to be transformed to their canonicalized form.</para>
            <para><i>destinationFiles</i></para>
            <para>The full paths to the canonicalized Xml files. These files will be created if they do not already exist.</para>
            </remarks>remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Xml.CanonicalizeFile
                        SourceFiles="C:\SourceFiles\file1.xml;C:\TransformedFiles\file2.xml"
                        DestinationFiles="C:\TransformedFiles\file1.xml;C:\TransformedFiles\file2.xml"
                    </Xml.CanonicalizeFile> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.CanonicalizeFile.#ctor">
            <summary>
            Initializes a new instance of the CanonicalizeFile class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.CanonicalizeFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Xml.CanonicalizeFile.CanonicalizeXmlFromFile(System.String)">
            <summary>
            Converts the Xml in the specified filename to its canonicalized form.
            </summary>
            <param name="filename">The full path to the Xml file</param>
            <returns>A byte array of the canonicalized xml</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.CanonicalizeFile.SourceFiles">
            <summary>
            The full paths to the Xml files that are to be transformed to their canonicalized form.
            </summary>
            <value>The full paths to the xml files that are to be transformed to their canonicalized form.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Xml.CanonicalizeFile.DestinationFiles">
            <summary>
            The full paths to the canonicalized Xml files.
            </summary>
            <value>The full paths to the canonicalized Xml files. These files will be created if they do not already exist.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite">
            <summary>
            Deletes an web site from the local server
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.DeleteWebsite (Description="description"  || 
              Identifier="identifier">)]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>A description for the web site</para>
            <para><i>identifier</i></para>
            <para>A valid web site identifier</para>
            <para><b>You must specify either a description or an identifier</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.DeleteWebsite
                        Description="testwebsite" />
                    <Web.WebSite.DeleteWebsite
                        Identifier="654321" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite.Description">
            <summary>
            Description of web site to delete
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite.Identifier">Identifier</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite.Identifier">
            <summary>
            web site idenfitier to delete
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteWebsite.Description">Description</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.Continue">
            <summary>
            Continues a paused web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.Continue
                (Description="description" || Identifier="identifier"/>]]></code>
            <para>where:</para>
            <para><i>Description</i></para>
            <para>Web site description to continue</para>
            <para><i>Identifier</i></para>
            <para>Web site identifier to continue</para>
            <para><b>Either a <i>description</i> or an <i>identifier</i> must be specified.</b></para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.Continue Desciption="mytestsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.Continue.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Continue.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Continue.Description">
            <summary>
            Description of web site to continue.
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Continue.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.Continue.Identifier">
            <summary>
            Identifier for the web site to continue.
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.Continue.Description">Description</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding">
            <summary>
            Adds a new host/ip binding to the specified web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.AddBinding 
                Port="port"
                HostName="hostname" 
                Description="description"
                Identifier="identifier"
                IPAddress="ipAddress"
                Port="port" 
                Secure="secure"
                MachineName="machineName"
            />]]></code>
            <para>where:</para>
            <para><i>description</i></para>
            <para>Web site description to apply binding to</para>
            <para><i>identifier</i></para>
            <para>Web site identifier to apply binding to</para>
            <para><i>ipaddress</i></para>
            <para>IP address to listen on. Defaults to any </para>
            <para><i>port (Required)</i></para>
            <para>Port number to bind to</para>
            <para><i>hostname</i></para>
            <para>Host header to bind to (only valid for non-SSL sites)</para>
            <para><i>Secure (optional)</i></para>
            <para>true if this is a secure SSL binding. False for non-secure bindings</para>
            <para><i>machineName</i></para>
            <para>Machine to operate on(defaults to localhost)</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.AddBinding
                        Description="mytestsite"
                        IPAddress="10.0.0.1"
                        Port="80"
                        HostName="hostname.example" 
                        Secure="false"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.Description">
            <summary>
            Gets or sets the Description of web site to apply binding to
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.Identifier">Identifier</seealso> 
            for the site you wish to apply the binding to</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.IPAddress">
            <summary>
            Gets or sets the IP address to bind to
            </summary>
            <value>A valid IP address configured on the host machine</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.Port">
            <summary>
            Gets or sets the Port number to bind to
            </summary>
            <value>A valid port number to bind the web site to</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.Secure">
            <summary>
            Gets or sets a value indicating whether the binding is secure
            </summary>
            <value>bool</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.HostName">
            <summary>
            Gets or sets the Host header to bind the web site to
            </summary>
            <value>A valid host name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.Identifier">
            <summary>
            Gets or sets the web site idenfitier to apply binding to
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.AddBinding.Description">Description</seealso> 
            for the site you wish to delete</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.Smtp.Stop">
            <summary>
            Stops an SMTP Server.
            </summary>
            <remarks>
            <code><![CDATA[<Web.Smtp.Stop
                Description="description" />]]></code>
            <para>where:</para>
            <para><i>description (Required)</i></para>
            <para>A description for the SMTP site to be stopped.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.Smtp.Stop
                        Description="TestSMTP"
                       />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.Smtp.Stop.#ctor">
            <summary>
            Initializes a new instance of the Smtp class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.Smtp.Stop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Stop.Description">
            <summary>
            SMTP server description
            </summary>
            <value>Any valid description for the SMTP server</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.GetPublicKeyToken.#ctor">
            <summary>
            Initializes a new instance of the GetPublicKeyToken class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.GetPublicKeyToken.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.GetPublicKeyToken.KeyFile">
            <summary>The path to the public snk file to extract from</summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.GetPublicKeyToken.PublicKeyToken">
            <summary>The public key token</summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.Installshield">
            <summary>
            Builds the specified Installshield project.
            </summary>
            <remarks>
            <code><![CDATA[
            <Tools.Installshield BuildPath="buildPath"
                         ProjectFilePath="projectFilePath"
                         ReleaseName="releaseName"
                         ReleaseConfiguration="releaseConfiguration"
                         WriteableDirectories="writeableDirectories" >
            </Tools.Installshield>
            ]]></code>
            <para>where:</para>
            <para><i>buildPath(Required)</i></para>
            <para>The fully qualified path to the folder where you want the output folders and files to be placed.</para>
            <para><i>projectFilePath</i></para>
            <para>The path to the .ism file that you would like to build. This path can be fully qualified, relative, or just the file name. If only the project file name is passed, the file is retrieved relative to the current working directory.</para>
            <para><i>releaseName</i></para>
            <para>The name of the release.</para>
            <para><i>releaseConfiguration</i></para>
            <para>This parameter allows you to specify whether you would like to have your release compressed into one file or remain uncompressed in multiple files. 
            The valid arguments for this parameter are "COMP" and "UNCOMP". To specify that your release be compressed into one file, use the "COMP" argument. If you do not want your release compressed, use the "UNCOMP" argument.
            This parameter is optional. If the release name already exists, the configuration will be based on what was specified in the IDE. If this is ignored for a new release, the new package will be uncompressed.</para>
            <para><i>writeableDirectories</i></para>
            <para>A list of directories for which all files within them are to be made writeable for use by InstallShield.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Tools.InstallShield
                         BuildPath="C:\InstallShieldOutput"
                         ProjectFilePath="C:\InstallShieldProjects\myProject.ism"
                         ReleaseName="Test"
                         ReleaseConfiguration="COMP" >
                    </Tools.InstallShield> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.Installshield.#ctor">
            <summary>
            Initializes a new instance of the Installshield class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.Installshield.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.Installshield.MakeFilesWritable(System.String[])">
            <summary>
            Makes each file in each specified directory writeable.
            </summary>
            <param name="directories">The directories containing the files that are to be made writeable.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.Installshield.ProjectFilepath">
            <summary>
            The path to the .ism file that you would like to build. 
            </summary>
            <value>This path can be fully qualified, relative, or just the file name. If only the project file name is passed, the file is retrieved relative to the current working directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.Installshield.ReleaseName">
            <summary>
            The name of the release.
            </summary>
            <value>The name of the release.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.Installshield.ReleaseConfiguration">
            <summary>
            This parameter allows you to specify whether you would like to have your release compressed into one file or remain uncompressed in multiple files. 
            </summary>
            <value>The valid arguments for this parameter are "COMP" and "UNCOMP". To specify that your release be compressed into one file, use the "COMP" argument. If you do not want your release compressed, use the "UNCOMP" argument.
            This parameter is optional. If the release name already exists, the configuration will be based on what was specified in the IDE. If this is ignored for a new release, the new package will be uncompressed.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.Installshield.BuildPath">
            <summary>
            The fully qualified path to the folder where you want the output folders and files to be placed.
            </summary>
            <value>The fully qualified path to the folder where you want the output folders and files to be placed.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.Installshield.WriteableDirectories">
            <summary>
            A list of directories for which all files within them are to be made writeable for use by InstallShield.
            </summary>
            <value>A list of directories for which all files within them are to be made writeable for use by InstallShield.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.Access.Grant">
            <summary>
            Grants a login access to the specified SQL server and table
            </summary>
            <remarks>
            <code><![CDATA[<Sql.Access.Grant UserName="userName" ServerName="serverName" DatabaseName="database" />]]></code>
            <para>where:</para>
            <para><i>UserName (Required)</i></para>
            <para>The login name to grant access to.</para>
            <para><i>DatabaseName (Required)</i></para>
            <para>The database on the specified server to grant access to.</para>
            <para><i>ConnectionString</i></para>
            <para>A valid connection string used to connect the SQL server to run the operation on.</para>
            <para><i>ServerName</i></para>
            <para>The server to grant access to (used instead of <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/>)</para>
            <para><i>ConnectionTimeout</i></para>
            <para>Number of seconds to wait before failing a connection attempt. 
            Used if a <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/> is not specified.</para>
            <para><i>CommandTimeout</i></para>
            <para>Number of seconds to wait before failing the grant request. </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.Access.Grant
                        UserName="testUser"
                        ServerName="(local)"
                        DatabaseName="testDB" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Access.Grant.#ctor">
            <summary>
            Initializes a new instance of the CreateSqlUser class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Access.Grant.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Access.Grant.UserName">
            <summary>
            Login account to grant access to
            </summary>
            <value>A valid login account, in the form machine\username</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Access.Grant.DatabaseName">
            <summary>
            Name of the database that the user will be granted access to
            </summary>
            <value>A valid database name for the specified server</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceSafe.LabelGet">
             <summary>
             Increments the version number, labels Visual SourceSafe and does a get against the new label.
             </summary>
             <remarks>
             <code><![CDATA[
             <SourceSafe.LabelGet
                         Database="database"
                         Username="username" 
                         Password="password" 
                         GetParameter="getParameter" 
                         Label="label" 
                         OnlyIncremementRevision="onlyIncrementRevision" 
                         Project="project"
                         VersionNumber="versionNumber"
                         VersionNumberConfigFileLocation="versionNumberConfigFileLocation"
                         VersionNumberConfigVSSLocation="versionNumberConfigVSSLocation"
                         WorkingDirectory="workingDirectory" >
             </SourceSafe.LabelGet>
             ]]></code>
             <para>where:</para>
             <para><i>database</i></para>
             <para>The VSS database location. This database must exist and must be a valid VSS database.</para>
             <para><i>username</i></para>
             <para>The username that will be used when labelling VSS</para>
             <para><i>password</i></para>
             <para>The password for the username specified in <i>username</i></para>
             <para><i>getParameter</i></para>
             <para>Allows a specific version of files/projects to be supplied</para>
             <para><i>label</i></para>
             <para>Label to use when getting a particular version.</para>
             <para><i>onlyIncremementRevision</i></para>
             <para>Force Revision only change. So 2.0.1188.14 would be 2.0.1188.15 on the next automatic label from the source control system.</para>
             <para><i>project</i></para>
             <para>The VSS style syntax for project location.</para>
             <para><i>versionNumber</i></para>
             <para>If specified then $(VersionNumber) is set to this value and replaced as appropriate in the xml config file</para>
             <para><i>versionNumberConfigFileLocation</i></para>
             <para>Fully Qualified file name to the xml config file. The file contains, in Xml format, the major, minor, build and revision number.</para>
            
             For example:
             
             <example>
             <code><![CDATA[
             <?xml version="1.0" encoding="utf-8"?>
                 <configuration>
                     <appSettings>
                         <add key="major" value="1" />
                         <add key="minor" value="2" />
                         <add key="build" value="1354" />
                         <add key="revision" value="155" />
                     </appSettings>
                 </configuration>
             ]]></code>    
             </example>
            
             <para><i>versionNumberConfigVSSLocation</i></para>
             <para>The path to the config file specified in <i>versionNumberConfigFileLocation</i> inside VSS, using VSS-style notation.</para>
             <para><i>workingDirectory</i></para>
             <para>The full path to the working directory on the local machine for the cod</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <SourceSafe.LabelGet
                           Database='\\build5\SourceSafe\Pilot\db'
                           Project='$/Projects/Main/$(VersionName)'
                           Username='myDomain\theBuilder' 
                           Password='123$abc' />
                     </SourceSafe.LabelGet> 
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceSafe.LabelGet.#ctor">
            <summary>
            Initializes a new instance of the LabelGetFromSourceSafe class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceSafe.LabelGet.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SetEnvironmentVariable.#ctor">
            <summary>
            Initializes a new instance of the SetEnvironmentVariable class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SetEnvironmentVariable.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SetEnvironmentVariable.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SetEnvironmentVariable.Variable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SetEnvironmentVariable.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.SecurityDescriptor">
            <summary>
            Summary description for SecurityDescriptor.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.SecurityDescriptor.GetFileSecurity(System.String)">
            <summary>
             Return the security descriptor of a given filename
            </summary>
            <param name="fileName">The filename</param>
            <returns>The security descriptor with DACL, GROUP and OWNER information</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.SecurityDescriptor.GetFileSecurity(System.String,Microsoft.Sdc.Tasks.Configuration.SECURITY_INFORMATION)">
            <summary>
             Return the selected components of the security descriptor of a given filename
            </summary>
            <param name="fileName">The filename</param>
            <param name="secInfo">The components of the security descriptor to return</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.SecurityDescriptor.#ctor(System.IntPtr)">
            <summary>
            Internal: Create a security decriptor from a pointer to unmanged memory
            </summary>
            <param name="secDesc">The pointer to unmanged memory. This instance becomes the owner
             of the memory.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.SecurityDescriptor.#ctor">
            <summary>
             Create an emtpy security descriptor
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly">
            <summary>
            Adds the specified assemblies to the CodeCoverage configuration file.
            </summary>
            <remarks>
            <code><![CDATA[<CodeCoverage.AddAssembly ReportDirectory="reportDirectory" AssemblyName="assemblyName" Assemblies="assemblies" Path="path"/>]]></code>
            <para>where:</para>
            <para><i>reportDirectory (Required)</i></para>
            <para>Full path to directory where reports will be placed. This directory must exist.</para>
            <para><i>assemblyName</i></para>
            <para>The name of the (single) assembly to be added to the CodeCoverage configuration file.</para>
            <para><i>assemblies</i></para>
            <para>The names of the assemblies to be added to the CodeCoverage configuration file.</para>
            <para><i>path</i></para>
            <para>The absolute path to the folder containing the CodeCoverage configuration file. This defaults to being retrieved from the registry.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CodeCoverage.AddAssembly
                        ReportDirectory="C:\ReportDirectory"
                        Assembly="MyNamespace.MyAssembly.dll"
                        Path="C:\CoverageEyeInstallation\Configuration"  />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly.#ctor">
            <summary>
            Initializes a new instance of the AddAssembly class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly.Path">
            <summary>
            The full path to the CoverageEye configuration directory. The assembly/assemblies specified will be added to the "CoverageConfiguration.xml" 
            CoverageEye configuration file. It defaults to the default position stored in the registry.
            </summary>
            <value>The full path containing the CoverageEye executable</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly.AssemblyName">
            <summary>
            The name of the assembly to be added to the CoverageEye configuration file. This property should not be set if the Assemblies property has previously
            been set. 
            </summary>
            <value>The assembly name, not the full path, as CoverageEye works against loaded assemblies in the JIT.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly.Assemblies">
            <summary>
            The list of assembly names to be added to the CoverageEye configuration file. This property should not be set if the AssemblyName property has previously
            been set. 
            </summary>
            <value>The list of assembly names, not their full paths, as CoverageEye works against loaded assemblies in the JIT.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.AddAssembly.ReportDirectory">
            <summary>
            Full path to directory where reports will be placed. This directory must exist.
            </summary>
            <value>Defaults to String.Empty</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Certificates.AddCertificate">
            <summary>
            Imports a certificate (and private key if required) from a pfx or cer file. Note that 
            repeated imports of the same certificate will not result in multiple copies being installed
            (but todo in this name space: FindCertificates, DeleteCertificate ...)
            </summary>
            <remarks>
            <code><![CDATA[<Certificates.AddCertificate 
                FileName="fileName" 
                Password="password"
                StoreName="storeName"
                MachineStore="machineStore"
                Thumbprint="thumbprint" />]]></code>
            <para>where:</para>
            <para><i>storeName</i></para>
            <para>Name of certificate store in which to place new certificate, defaults to "MY" <br />
            Should be one of:- <br />
            AddressBook:          The X509 certificate store for other users. <br />
            AuthRoot:             The X509 certificate store for third-party certificate authorities (CAs). <br />
            CertificateAuthority: The X509 certificate store for intermediate certificate authorities (CAs). <br />
            Disallowed:           The X509 certificate store for revoked certificates. <br />
            My:                   The X509 certificate store for personal certificates. <br />
            Root:                 The X509 certificate store for trusted root certificate authorities (CAs). <br />
            TrustedPeople:        The X509 certificate store for directly trusted people and resources. <br />
            TrustedPublisher:     The X509 certificate store for directly trusted publishers. <br />
            </para>
            <para><i>password</i></para>
            <para>password for the pfx file from which the certificate is to be imported, defaults to blank</para>
            <para><i>machineStore</i></para>
            <para>set to true if the certificate is to be installed in the machine store, false for the user store, defaults to false</para>
            <para><i>fileName</i></para>
            <para>Full path to pfx file for import</para>
            <para><i>thumbprint (Ouput)</i></para>
            <para>outputs the certificate thumbprint. Used to uniquely identify certificate in further tasks.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <AddCertificate
                        FileName=""
                        Password="xyzzy"
                        StorePrivateKey="true"
                        MachineStore="false">
                     <Output TaskParameter="thumbprint" PropertyName="NewCertHash"/>
                    </AddCertificate>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Certificates.AddCertificate.#ctor">
            <summary>
            Initializes a new instance of the AddMimeTypeToWebSite class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Certificates.AddCertificate.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Certificates.AddCertificate.MachineStore">
            <summary>
            MachineStore
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Certificates.AddCertificate.Thumbprint">
            <summary>
            Thumbprint
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Certificates.AddCertificate.StoreName">
            <summary>
            StoreName
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Certificates.AddCertificate.FileName">
            <summary>
            Host name for website we are adding the filter to
            </summary>
            <value>A valid host name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Certificates.AddCertificate.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Cab.Create">
            <summary>
            Creates the CabFile specified.
            </summary>
            <remarks>
            <code><![CDATA[<Cab.Create PathToCabFile="pathToCabFile" />]]></code>
            <para>where:</para>
            <para><i>pathToCabFile (Required)</i></para>
            <para>The path to the cab file that will be created.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Cab.Create
                        PathToCabFile="C:\Archives\CabFile.cab"
                        PathToFile="C:\Assemblies\MyAssembly.dll"
                        Path="C:\CabInstall\Cabarc.exe"  />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Cab.Create.#ctor">
            <summary>
            Initializes a new instance of the Cab.Create class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Cab.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.Create.PathToCabFile">
            <summary>
            The path to the cab file that will be created.
            </summary>
            <value>The path to the cab file that will be created.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.GetValue">
            <summary>
            Gets a value of an element or attribute matching the passed XPath
            expression in the specified XML File.
            Will fail if no match found for the specified XPath expression.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.GetValue Path="path" XPath="xpath" Namespaces="namespaces" IgnoreNoMatchFailure="ignoreNoMatchFailure"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to read.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate to find the element or attribute whose value we want.</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>Value (Output)</i></para>
            <para>The value of the single node matching the XPath expression.</para>
            <para><i>IgnoreNoMatchFailure</i></para>
            <para>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.GetValue 
            				Path="c:\app.config"
            				XPath="/configuration/appSettings/add[@key='myKey']/@value"
            				Namespaces="@(ConfigNamespaces)">
            			<Output TaskParameter="Value" Property="appSettings.myKey.value"/>
            		</XmlFile.GetValue>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.GetValue.#ctor">
            <summary>
            Create a new ChangeValue.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.GetValue.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.GetValue.IgnoreNoMatchFailure">
            <summary>
            If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.
            </summary>
            <value>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.GetValue.Value">
            <summary>
            The value of the requested element or attribute.
            </summary>
            <value>The value of the requested element or attribute.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Start">
            <summary>
            Starts a virtual machine.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Start
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout">
            </VirtualServer.VirtualMachine.Start>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be started.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the start task to complete, in milliseconds. Defaults to 10.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Start
                        MachineName="myMachine"
                        Timeout="20">
                    </VirtualServer.VirtualMachine.Start> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Start.#ctor">
            <summary>
            Initializes a new instance of the VirtualServer.Start class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Start.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Start.Timeout">
            <summary>
            Length of time to wait for the start task to complete, in seconds.
            </summary>
            <value>Length of time to wait for the start task to complete, in seconds. Defaults to 10.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Start.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.Start.MachineName">
            <summary>
            The name of the virtual machine to be started.
            </summary>
            <value>The name of the virtual machine to be started.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.AddNetworkAdapter">
            <summary>
            TODO
            Starts a virtual machine.
            </summary>          
            <remarks>
            <code><![CDATA[
            <VirtualServer.VirtualMachine.Start
                        MachineName="machineName"
                        ServerName="serverName"
                        Timeout="timeout">
            </VirtualServer.VirtualMachine.Start>
            ]]></code>
            <para>where:</para>
            <para><i>machineName (Required)</i></para>
            <para>The name of the virtual machine to be started.</para>
            <para><i>serverName</i></para>
            <para>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</para>
            <para><i>timeout</i></para>
            <para>Length of time to wait for the start task to complete, in milliseconds. Defaults to 10.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <VirtualServer.VirtualMachine.Start
                        MachineName="myMachine"
                        Timeout="20"
                    </VirtualServer.VirtualMachine.Start> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.AddNetworkAdapter.#ctor">
            <summary>
            Initializes a new instance of the VirtualServer.AddNetworkAdapter class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.AddNetworkAdapter.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.AddNetworkAdapter.ServerName">
            <summary>
            Set the <i>serverName</i> property to specify a remote server to connect to.
            </summary>
            <value>Set the <i>serverName</i> property to specify a remote server to connect to. Defaults to connect locally.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.VirtualServer.VirtualMachine.AddNetworkAdapter.MachineName">
            <summary>
            The name of the virtual machine to be started.
            </summary>
            <value>The name of the virtual machine to be started.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Vault.GetLatest">
            <summary>
            Performs a GET from the Sourcegear Vault server specified.  The latest version is retrieved.
            </summary>
            <remarks>
            <code><![CDATA[
            <Vault.GetLatest
                    Server="server" 
                    Repository="repository"
                    Username="username"
                    Password="password"
                    DestinationDirectory="destinationPath"
                    ItemPath="itemPath"
                    VaultClientPath="clientExePath"
                    UseSSL="useSSL"
            />
            ]]></code>
            <para>where:</para>
            <para><i>server</i></para>
            <para>The IP address or hostname of the Vault server to connect to.</para>
            <para><i>username</i></para>
            <para>The Vault username.</para>
            <para><i>password</i></para>
            <para>The password for the username specified in <i>username</i></para>
            <para><i>destinationPath</i></para>
            <para>The full path to download repository files to.</para>
            <para><i>itemPath</i></para>
            <para>The full repository path to the item to perform the get operation on.</para>
            <para><i>clientExePath</i></para>
            <para>Optional - the path to vault.exe.  If the Vault registry keys exist or the path to vault.exe is set in your enviroment path, this does not need to be used.</para>
            <para><i>useSSL</i></para>
            <para>Optional (default False) - if set SSL will be used to communicate with the Vault server.  If enabled the Vault server specified in <i>server</i> must support SSL.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Vault.GetLatest
                            Server="192.168.1.100" 
                            Repository="MyCode"
                            Username="username"
                            Password="password"
                            DestinationDirectory="c:\ItemSource"
                            ItemPath="$/Repos/Item"
                    />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.GetLatest.InternalExecute">
            <summary>
            This is the main execute method that all tasks should implement
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Vault.GetLatest.VaultGetLatest(Microsoft.Sdc.Tasks.Configuration.ShellExecute)">
            <summary>
            Gets the latest.
            </summary>
            <param name="shell">The shell.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.ItemPath">
            <summary>
            Gets or sets the item path.
            </summary>
            <value>The item path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.DestinationDirectory">
            <summary>
            Gets or sets the destination directory.
            </summary>
            <value>The destination directory.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.UseSSL">
            <summary>
            Gets or sets a value indicating whether [use SSL].
            </summary>
            <value><c>true</c> if [use SSL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Vault.GetLatest.VaultClientPath">
            <summary>
            Gets or sets the vault client path.
            </summary>
            <value>The vault client path.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.NDoc">
            <summary>
            Calls NDoc in order to generate compiled HTML documentation for the specified assemblies.
            </summary>
            <remarks>
            <code><![CDATA[
            <Tools.NDoc Assemblies="assemblies"
                         ProjectFilePath="projectFilePath"
                         OutputFilePath="outputFilePath"
                         Documenter="documenter">
            </Tools.NDoc>
            ]]></code>
            <para>where:</para>
            <para><i>assemblies (Required)</i></para>
            <para>The fullpaths to the assemblies to create docs for.</para>
            <para><i>projectFilePath (Required)</i></para>
            <para>This will be the NDoc file that will be used as a template.</para>
            <para><i>outputFilePath (Required)</i></para>
            <para>The name of the folder to create all the compiled help docs in.</para>
            <para><i>documenter (Optional)</i></para>
            <para>The NDoc documenter to use. Available documenters are VS.NET_2003, JavaDoc, LaTeX, LinearHtml, MSDN, XML.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <ItemGroup>
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.dll" />
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.Test.dll" />
                </ItemGroup>
                <Target Name="Test" >
                    <Tools.NDoc
                        ProjectFilePath="$(MSBuildProjectDirectory)\NDoc\Microsoft.Sdc.Tasks.Configuration.NDoc" 
                        OutputFilePath="$(TEMP)\Main\NDocOutput" 
                        Assemblies="@(Assemblies->'%(FullPath)')"
                        Documenter="MSDN">
                    </Tools.NDoc>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NDoc.#ctor">
            <summary>
            Initializes a new instance of the NDoc class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NDoc.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of FxCop</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NDoc.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NDoc.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NDoc.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NDoc.Documenter">
            <summary>
            This propertypasses through to the NDoc command line, setting the "documenter" command line switch. As such valid values for this attribute are VS.NET_2003, JavaDoc, LaTeX, LinearHtml, MSDN, XML.
            Leaving the property unset will default the value to "MSDN".
            </summary>
            <value>The NDoc documenter to use. Available documenters are VS.NET_2003, JavaDoc, LaTeX, LinearHtml, MSDN, XML.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Sql.Role.AddUser">
            <summary>
            Adds a login to the specified SQL role
            </summary>
            <remarks>
            <code><![CDATA[<Sql.Role.AddUser UserName="userName" ServerName="serverName" DatabaseName="database" roleName="role" />]]></code>
            <para>where:</para>
            <para><i>userName (Required)</i></para>
            <para>The login name to grant access to.</para>
            <para><i>databaseName (Required)</i></para>
            <para>The database containing the specified role.</para>
            <para><i>roleName (Required)</i></para>
            <para>The role to assign the user to.</para>
            <para><i>ConnectionString</i></para>
            <para>A valid connection string used to connect the SQL server to run the operation on.</para>
            <para><i>ServerName</i></para>
            <para>The server to connect to (used instead of <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/>)</para>
            <para><i>ConnectionTimeout</i></para>
            <para>Number of seconds to wait before failing a connection attempt. 
            Used if a <see cref="P:Microsoft.Sdc.Tasks.Sql.SqlBase.ConnectionString"/> is not specified.</para>
            <para><i>CommandTimeout</i></para>
            <para>Number of seconds to wait before failing the role request. </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Sql.Role.AddUser
                        UserName="testUser"
                        ServerName="(local)"
                        DatabaseName="testDB"
                        RoleName="myRole" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Role.AddUser.#ctor">
            <summary>
            Initializes a new instance of the AddSqlUserToRole class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Sql.Role.AddUser.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Role.AddUser.DatabaseName">
            <summary>
            Database to perform the action on
            </summary>
            <value>A valid database name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Role.AddUser.RoleName">
            <summary>
            Role to add login into
            </summary>
            <value>A valid SQL role</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Sql.Role.AddUser.UserName">
            <summary>
            Login account to admit to the specified role
            </summary>
            <value>A valid login account, in the form machine\username</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.GetInstalledComponents">
            <summary>
            Gets a list of installed products on the specified machine
            </summary>
            <remarks>
            <code><![CDATA[ <GetInstalledComponents>
                                <Output TaskParameter="InstalledComponentsXml" ItemName="InstalledComponentsXmlItem" /> /> 
                            </GetInstalledComponents> />]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <GetInstalledComponents>
                        <Output TaskParameter="InstalledComponentsXml" ItemName="InstalledComponentsXmlItem" >
                    </GetInstalledComponents>            
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetInstalledComponents.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.GetInstalledComponents.#ctor">
            <summary>
            Initializes a new instance of the GetInstalledComponents class.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.GetInstalledComponents.InstalledComponentsXml">
            <summary>
            The list of components installed on the specified machine.
            </summary>
            <value>The list of components installed on the specified machine</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.AddBuildEvent.#ctor">
            <summary>
            Initializes a new instance of the AddBuildEvent class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.AddBuildEvent.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Mithran.AddBuildEvent.BuildEventPosition">
            <summary>
            Defaults to 'End'
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions">
            <summary>
            Sets permissions on the specified MessageQueue.
            </summary>
            <remarks>
            <code><![CDATA[<MessageQueue.SetPermissions QueuePath="queuePath" DenyPermission="denyPermission" UserName="userName" AccessRight="accessRight" />]]></code>
            <para>where:</para>
            <para><i>queuePath (Required)</i></para>
            <para>
            The message queue that the permissions changes will apply to. The path must be prefixed by the machine name (or "." to represent the local computer). 
            See <see cref="P:System.Messaging.MessageQueue.Path"/> for more details.
            </para>
            <para><i>denyPermission</i></para>
            <para>
            Allows the specified access right to either be granted (if set to "false") or revoked (if set to "true") for the specified user. Defaults to "true".
            </para>
            <para><i>userName</i></para>
            <para>
            The individual, group, or computer that is to get additional rights to the queue or have rights to the queue removed.
            </para>
            <para><i>accessRight</i></para>
            <para>
            The specific access right to be granted or revoked for the specified user. See <see cref="P:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.AccessRight"/> for valid values.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <MessageQueue.SetPermissions
                        QueuePath=".\\TempQueue" 
                        UserName="myUser"
                        AccessRight="GenericRead" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.#ctor">
            <summary>
            Initializes a new instance of the SetPermissions class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.QueuePath">
            <summary>
            The message queue that the permissions changes will apply to.
            </summary>
            <value>The path must be prefixed by the machine name (or "." to represent the local computer). 
            See <see cref="P:System.Messaging.MessageQueue.Path"/> for more details.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.DenyPermission">
            <summary>
            Allows the specified access right to either be granted or revoked for the specified user.
            </summary>
            <value>Set to true to revoke the specified access right, or false to grant the specified access right. Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.UserName">
            <summary>
            The individual, group, or computer that gets additional rights to the queue or has them revoked (depending on the value of DenyPermission).
            </summary>
            <value>The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format DOMAIN\ user for the user parameter. You can specify "." for the user parameter to indicate the local computer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.MessageQueue.SetPermissions.AccessRight">
            <summary>
            The access right to grant the specified user on the specified queue. If the DenyPermission property is set to true,
            this access right will be revoked from the specified user, otherwise it will be granted.
            </summary>
            <value>Can be any of the following:
            "ChangeQueuePermissions"    - The right to modify queue permissions
            "DeleteJournalMessage"        - The right to delete messages from the journal queue
            "DeleteMessage"                - The right to delete messages from the queue 
            "DeleteQueue"                - The right to delete the queue 
            "FullControl"                - Full rights to the queue. A union of all other rights in the enumeration. 
            "GenericRead"                - A combination of GetQueueProperties, GetQueuePermissions, ReceiveMessage, and ReceiveJournalMessage. 
            "GenericWrite"                - A combination of GetQueueProperties, GetQueuePermissions, and WriteMessage. 
            "GetQueuePermissions"        - The right to read queue permissions. 
            "GetQueueProperties"        - The right to read properties of the queue. 
            "PeekMessage"                - The right to peek messages from the queue. 
            "ReceiveJournalMessage"        - The right to receive messages from the journal queue. This includes the rights to delete and peek messages from the journal queue. 
            "ReceiveMessage"            - The right to receive messages from the queue. This includes the rights to delete and peek messages. 
            "SetQueueProperties"        - The right to modify properties of the queue 
            "TakeQueueOwnership"        - The right to take ownership of the queue. 
            "WriteMessage"                - The right to send messages to the queue. 
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.InsertParent">
            <summary>
            Inserts a node inot a hhc project.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.CreateProject SourceFolder="folder" />
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertParent.#ctor">
            <summary>
            Initializes a new instance of the InsertParent class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.InsertParent.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertParent.EndNodeName">
            <summary>
            The Name of the Node to insert the parent around
            </summary>
            <value>Must be a valid Node Name. Use -1 to specify the last node name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.InsertParent.EndNodeLocal">
            <summary>
            The Name of the Node to insert the parent around
            </summary>
            <value>Must be a valid Node Local value.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.CopyFolder">
            <summary>
            Copies a folder from one directory to another. All files and sub-directories of the source folder will be copied.
            </summary>
            <remarks>
            <code><![CDATA[<Folder.CopyFolder Source="source" Destination="destination" />]]></code>
            <para>where:</para>
            <para><i>source (Required)</i></para>
            <para>
            The full path to the source folder that will be copied. This folder must exist.
            </para>
            <para><i>destination (Required)</i></para>
            <para>
            The full path to the destination folder that will recieve the copy of Source. This folder will be created if it does not exist.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Folder.CopyFolder
                        Source="C:\SourceCopy"
                        Destination="C:\DestinationFolder" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.CopyFolder.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.CopyFolder.CopyDirectory(System.String,System.String,System.Collections.IList)">
            <summary>
            Copies the contents (folders and files) of a source folder to a destination folder.
            </summary>
            <param name="sourceFolderName">The folder whose files and directories will be copied. This folder must exist.</param>
            <param name="destinationFolderName">The folder where the copy will be made. This folder will be created if it does not exist.</param>
            <param name="fileTypes">List of file types to be copied</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.CopyFolder.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the contents (folders and files) of a source folder to a destination folder.
            </summary>
            <param name="sourceFolderName">The folder whose files and directories will be copied. This folder must exist.</param>
            <param name="destinationFolderName">The folder where the copy will be made. This folder will be created if it does not exist.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.CopyFolder.CopyDirectory(System.String,System.String,System.String)">
            <summary>
            Copies the contents (folders and files) of a source folder to a destination folder.
            </summary>
            <param name="sourceFolderName">The folder whose files and directories will be copied. This folder must exist.</param>
            <param name="destinationFolderName">The folder where the copy will be made. This folder will be created if it does not exist.</param>
            <param name="fileSearchPattern">The search pattern specifying the files to copy, for example "*.txt".</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.CopyFolder.Source">
            <summary>
            The full path to the source directory to be copied. 
            </summary>
            <value>The full path to the source directory to be copied. This folder must exist or an exception will be thrown.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.CopyFolder.Destination">
            <summary>
            The full path to the folder that will recieve the copy of Source.
            </summary>
            <value>The full path to the folder that will recieve the copy of Source. This folder will be created if it does not exist.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.GetInfo">
            <summary>
            Returns information about the folder specified
            </summary>
            <remarks>
            <code><![CDATA[<Folder.GetInfo ConnectAsDomain="connectAsDomain" ConnectAsPassword="connectAsPassword" ConnectAsUser="connectAsUser" MaximumDepth="maximumDepth" NewestDirectoryPathCreated="newestDirectoryPathCreated" NewestDirectoryPathCreationTime="newestDirectoryPathCreationTime" NewestDirectoryPathLastWriteTime="newestDirectoryPathLastWriteTime" NewestDirectoryPathModified="newestDirectoryPathModified" NewestFileCreated="newestFileCreated" NewestFileCreationTime="newestFileCreationTime" NewestFileLastWriteTime="newestFileLastWriteTime" NewestFileModified="newestFileModified" OldestDirectoryPathCreated="oldestDirectoryPathCreated" OldestDirectoryPathCreationTime="oldestDirectoryPathCreationTime" OldestDirectoryPathLastWriteTime="oldestDirectoryPathLastWriteTime" OldestDirectoryPathModified="oldestDirectoryPathModified" OldestFileCreated="oldestFileCreated" OldestFileCreationTime="oldestFileCreationTime" OldestFileLastWriteTime="oldestFileLastWriteTime" OldestFileModified="oldestFileModified" Path="path" Size="size" />]]></code>
            <para>where:</para>
            <para><i>connectAsDomain</i></para>
            <para>
            The domain for the impersonated user when a user is to be impersonated.
            </para>
            <para><i>connectAsPassword</i></para>
            <para>
            The password for the impersonated user when a user is to be impersonated.
            </para>
            <para><i>connectAsUser</i></para>
            <para>
            The name of the impersonated user when a user is to be impersonated.
            </para>
            <para><i>maximumDepth</i></para>
            <para>
            The maximum depth of the directory tree to be examined. There is no maximum depth by default.
            </para>
            <para><i>newestDirectoryPathCreated (Output)</i></para>
            <para>
            The full path to the directory with the newest creation date and time.
            </para>
            <para><i>newestDirectoryPathCreationTime (Output)</i></para>
            <para>
            The date and time of the directory with the newest creation date and time.
            </para>
            <para><i>newestDirectoryPathLastWriteTime (Output)</i></para>
            <para>
            The date and time of the directory with the newest modification date and time.
            </para>
            <para><i>newestDirectoryPathModified (Output)</i></para>
            <para>
            The full path to the directory with the newest modification date and time.
            </para>
            <para><i>newestFileCreated (Output)</i></para>
            <para>
            The full path to the file with the newest creation date and time.
            </para>
            <para><i>newestFileCreationTime (Output)</i></para>
            <para>
            The date and time of the file with the newest creation date and time.
            </para>
            <para><i>newestFileLastWriteTime (Output)</i></para>
            <para>
            The date and time of the file with the newest modification date and time.
            </para>
            <para><i>newestFileModified (Output)</i></para>
            <para>
            The full path to the file with the newest modification date and time.
            </para>
            <para><i>oldestDirectoryPathCreated (Output)</i></para>
            <para>
            The full path to the directory with the oldest creation date and time.
            </para>
            <para><i>oldestDirectoryPathCreationTime (Output)</i></para>
            <para>
            The date and time of the directory with the oldest creation date and time.
            </para>
            <para><i>oldestDirectoryPathLastWriteTime (Output)</i></para>
            <para>
            The date and time of the directory with the oldest modification date and time.
            </para>
            <para><i>oldestDirectoryPathModified (Output)</i></para>
            <para>
            The full path to the directory with the oldest modification date and time.
            </para>
            <para><i>oldestFileCreated (Output)</i></para>
            <para>
            The full path to the file with the oldest creation date and time.
            </para>
            <para><i>oldestFileCreationTime (Output)</i></para>
            <para>
            The date and time of the file with the oldest creation date and time.
            </para>
            <para><i>oldestFileLastWriteTime (Output)</i></para>
            <para>
            The date and time of the file with the oldest modification date and time.
            </para>
            <para><i>oldestFileModified (Output)</i></para>
            <para>
            The full path to the file with the oldest modification date and time.
            </para>
            <para><i>path (Required)</i></para>
            <para>
            The full path to the folder to return information for.
            </para>
            <para><i>size (Output)</i></para>
            <para>
            The total size of all files that were examined.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Folder.GetInfo
                        Path="C:\SourceCopy">
                      <Output TaskParameter="Size" PropertyName="ActualSize" />   
                    </Folder.GetInfo>
                    <Message Text="The size is $(ActualSize)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.connectAsDomain">
            <summary>
            The domain for the impersonated user when a user is to be impersonated.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.connectAsPassword">
            <summary>
            The password for the impersonated user when a user is to be impersonated.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.connectAsUser">
            <summary>
            The name of the impersonated user when a user is to be impersonated.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.impersonationContext">
            <summary>
            The impersonation context when a user is to be impersonated.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.impersonateUser">
            <summary>
            When set, impersonates a user during the action of the task.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.maximumDepth">
            <summary>
            The maximum depth of the directory tree to be examined.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.maximumDepthSpecified">
            <summary>
            When set, applies the maximum depth of the directory tree to be examined.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestDirectoryPathCreated">
            <summary>
            The full path to the directory with the newest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestDirectoryPathCreationTime">
            <summary>
            The date and time of the directory with the newest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestDirectoryPathLastWriteTime">
            <summary>
            The date and time of the directory with the newest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestDirectoryPathModified">
            <summary>
            The full path to the directory with the newest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestFileCreated">
            <summary>
            The full path to the file with the newest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestFileCreationTime">
            <summary>
            The date and time of the file with the newest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestFileLastWriteTime">
            <summary>
            The date and time of the file with the newest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.newestFileModified">
            <summary>
            The full path to the file with the newest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestDirectoryPathCreated">
            <summary>
            The full path to the directory with the oldest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestDirectoryPathCreationTime">
            <summary>
            The date and time of the directory with the oldest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestDirectoryPathLastWriteTime">
            <summary>
            The date and time of the directory with the oldest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestDirectoryPathModified">
            <summary>
            The full path to the directory with the oldest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestFileCreated">
            <summary>
            The full path to the file with the oldest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestFileCreationTime">
            <summary>
            The date and time of the file with the oldest creation date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestFileLastWriteTime">
            <summary>
            The date and time of the file with the oldest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.oldestFileModified">
            <summary>
            The full path to the file with the oldest modification date and time.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.path">
            <summary>
            The full path to the folder to return information for.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.fullPathIncludingDriveLetter">
            <summary>
            The full path including the drive letter to the folder to return information for
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Folder.GetInfo.size">
            <summary>
            The total size of all files that were examined.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.#ctor">
            <summary>
            Initializes a new instance of the GetInfo class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.ImpersonateUser(System.String,System.String,System.String)">
            <summary>
            Impersonates a user during the action of the task.
            </summary>
            <param name="userName">The name of the user to be impersonated.</param>
            <param name="domain">The domain for the user to be impersonated.</param>
            <param name="password">The password for the user to be impersonated.</param>
            <returns>The impersonation context for the user.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.ImpersonateIfRequired">
            <summary>
            Impersonates a user when impersonation has been configured.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.ImpersonateUndo">
            <summary>
            Stops impersonation of a user.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.UpdatePath(System.IO.DirectoryInfo)">
            <summary>
            Examines a directory to determine if it is newer or older than any other directories.
            </summary>
            <param name="directoryInfo">The directory to be examined.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.UpdateFile(System.IO.FileInfo)">
            <summary>
            Examines a file to determine if it is newer or older than any other files.
            </summary>
            <param name="fileInfo">The file to be examined.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.GetInfo.ProcessDirectory(System.IO.DirectoryInfo,System.Int32)">
            <summary>
            Recursively examines directories and files to determine the newest and oldest directories and files.
            </summary>
            <param name="directoryInfo">The directory to examine.</param>
            <param name="depth">The current depth within the directory tree.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.ConnectAsDomain">
            <summary>
            Gets or sets the domain for the impersonated user when a user is to be impersonated.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.ConnectAsPassword">
            <summary>
            Gets or sets the password for the impersonated user when a user is to be impersonated.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.ConnectAsUser">
            <summary>
            Gets or sets the name of the impersonated user when a user is to be impersonated.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.MaximumDepth">
            <summary>
            Gets or sets the maximum depth of the directory tree to be examined.
            </summary>
            <remarks>
            There is no maximum depth by default.
            </remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestFileCreated">
            <summary>
            Gets the full path to the file with the newest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestFileCreationTime">
            <summary>
            Gets the date and time of the file with the newest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestFileLastWriteTime">
            <summary>
            Gets the date and time of the file with the newest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestFileModified">
            <summary>
            Gets the full path to the file with the newest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestDirectoryPathCreated">
            <summary>
            The full path to the directory with the newest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestDirectoryPathCreationTime">
            <summary>
            The date and time of the directory with the newest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestDirectoryPathLastWriteTime">
            <summary>
            The date and time of the directory with the newest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.NewestDirectoryPathModified">
            <summary>
            The full path to the directory with the newest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestFileCreated">
            <summary>
            Gets the full path to the file with the oldest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestFileCreationTime">
            <summary>
            Gets the date and time of the file with the oldest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestFileLastWriteTime">
            <summary>
            Gets the date and time of the file with the oldest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestFileModified">
            <summary>
            Gets the full path to the file with the oldest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestDirectoryPathCreated">
            <summary>
            The full path to the directory with the oldest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestDirectoryPathCreationTime">
            <summary>
            The date and time of the directory with the oldest creation date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestDirectoryPathLastWriteTime">
            <summary>
            The date and time of the directory with the oldest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.OldestDirectoryPathModified">
            <summary>
            The full path to the directory with the oldest modification date and time.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.Path">
            <summary>
            Gets or sets the full path to the directory. 
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Folder.GetInfo.Size">
            <summary>
            Gets the total size of all files that were examined.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccess">
            <summary>
             Abstract base class for AceAccessAllowed and AceAccessDenied.
             This class relies on the fact that the ACCESS_ALLOWED_ACE and ACCESS_DENIED_ACE
             are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccess.GetNativeACE">
            <summary>
             The native (Win32) representation of this Ace as an managed array of bytes.
             The array can be pinned using unsafe code to pass it to a Win32 function requiring
             a pointer to an ACE structure.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccessAllowed">
            <summary>
             An access allowed ACE
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccessAllowed.#ctor(Microsoft.Sdc.Tasks.Configuration.Win32Security.MemoryMarshaler)">
            <summary>
             Internal: Create an ACE from a given memory marshaler
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccessAllowed.#ctor(Microsoft.Sdc.Tasks.Configuration.Win32Security.Sid,Microsoft.Sdc.Tasks.Configuration.AccessTypeInternal,Microsoft.Sdc.Tasks.Configuration.AceFlagsInternal)">
            <summary>
             Create a new Ace given a Sid, an access type and an set of flags
            </summary>
            <param name="sid">The sid (must be valid)</param>
            <param name="accessType">The access accessMask</param>
            <param name="flags">The list of flags</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccessAllowed.#ctor(Microsoft.Sdc.Tasks.Configuration.Win32Security.Sid,Microsoft.Sdc.Tasks.Configuration.AccessTypeInternal)">
            <summary>
             Create a new Ace given a Sid, an access type and a default set of flags
            </summary>
            <param name="sid">The sid (must be valid)</param>
            <param name="accessType">The access accessMask</param>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Win32Security.AceAccessDenied">
            <summary>
             An access denied ACE
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.Recycling">
            <summary>
            Summary description for Recycling.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Recycling.RestartTime">
            <summary>
            This is 'Recycle worker processes (in minutes)'.Default is 1740 minutes. Set to 0 to disable.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Recycling.RestartRequests">
            <summary>
            This is 'Recycle worker processes (number of requests)'.Default is 35000 requests. Set to 0 to disable.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Recycling.RestartSchedule">
            <summary>
            An array of times when the worker process will be restarted.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Recycling.MaximumVirtualMemory">
            <summary>
            The maximum virtual memory (in megabytes). 0 to disable
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Recycling.MaximumUsedMemory">
            <summary>
            The maximum used memory (in megabytes). 0 to disable
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.StringComparisonChecker">
            <summary>
            Compares string values together. Supports equals, contains, startswith and endswith BinaryComparisonOperators.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Constants">
            <summary>
            Provides all the constants for this assembly
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.ComponentServices.ComponentCollection">
            <summary>
            Summary description for ComponentCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Component.Update">
            <summary>
            Updates the specified ComponentServices Component.
            </summary>
            <remarks>
            <code><![CDATA[
            <ComponentServices.Component.Update
                    ApplicationName="applicationName" 
                    ComponentName="componentName" 
                    ConstructorString="componentName" />
            ]]></code>
            <para>where:</para>
            <para><i>applicationName (Required)</i></para>
            <para>The name of the COM+ application. This application will be created if it does not exist.</para>
            <para><i>componentName (Required)</i></para>
            <para>The name of the COM+ component to update.</para>
            <para><i>constructorString</i></para>
            <para>The constructor string for the specified COM+ component.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Component.Update
                        ApplicationName="IIS Out-Of-Process Pooled Applications"
                        ComponentName="IISWAM.OutofProcessPool"
                        ConstructorString="bob" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Component.Update.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Component.Update.ApplicationName">
            <summary>
            Gets or sets the name of the COM+ application.
            </summary>
            <value>The name of the COM+ application. This application will be created if it does not exist.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Component.Update.ComponentName">
            <summary>
            Gets or sets the name of the COM+ component to update.
            </summary>
            <value>The name of the COM+ component to update.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Component.Update.ConstructorString">
            <summary>
            Gets or sets the constructor string for the specified COM+ component.
            </summary>
            <value>The constructor string for the specified COM+ component.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CodeCoverage.Stop">
            <summary>
            Ends code coverage analysis using CoverageEye
            </summary>
            <remarks>
            <code><![CDATA[<CodeCoverage.Stop />]]></code>
            <para>There are no properties associated with this task.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CodeCoverage.Stop />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.Stop.#ctor">
            <summary>
            Initializes a new instance of the Stop class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.Stop.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CheckInstalled">
            <summary>
            Gets a list of installed products on the specified machine
            </summary>
            <remarks>
            <code><![CDATA[ <GetInstalledProducts MachineName="machineName" Username="username" Password="password" InstalledProductsXml="installedProductsXml">
                                <Output TaskParameter="InstalledProductsXml" ItemName="InstalledProductsXmlItem" /> /> 
                            </GetInstalledProducts> />]]></code>
            <para>where:</para>
            <para><i>machineName</i></para>
            <para>The name of the remote machine or "." for local machine. Defaults to "."</para>
            <para><i>username</i></para>
            <para>The username to be used for the connection operation.</para>
            <para><i>password</i></para>
            <para>The password to be used for the connection operation.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <GetInstalledProducts
                        MachineName="remote"
                        Username="myDomain\myAuthorisedUser"
                        Password="123$abc>
                        <Output TaskParameter="InstalledProductsXml" ItemName="InstalledProductsXmlItem" >
                    </GetInstalledProducts>            
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CheckInstalled.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CheckInstalled.#ctor">
            <summary>
            Initializes a new instance of the CheckInstalled class.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Network.CheckHostNameExists">
            <summary>
            Returns the IP addresses of a given hostname
            </summary>
            <remarks>
            <code><![CDATA[ 
            <Network.CheckHostNameExists HostName="www.microsoft.com">
                   <Output TaskParameter="HostExists" PropertyName="existsFlag" />    
            </Network.CheckHostNameExists>
            ]]></code>
            
            <para>where:</para>
            <para><i>HostName (Required)</i></para>
            <para>hostname to resolve
            </para>
            <para>HostExists</para>
            <para> boolean. True if hostname is resolvable to an IP address
            </para>   
            </remarks>
            <example>
            <code><![CDATA[ 
            <Network.CheckHostNameExists HostName="www.microsoft.com">
                   <Output TaskParameter="HostExists" PropertyName="existsFlag" />    
            </Network.CheckHostNameExists>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.hostName">
            <summary>
            host name
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.hostExists">
            <summary>
            hostExists
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.treatErrorsAsWarnings">
            <summary>
            Treat Errors As Warnings
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.#ctor">
            <summary>
            Initializes a new instance of the GetIPByName class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.HostName">
            <summary>
            The host name to resolve
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.TreatErrorsAsWarnings">
            <summary>
            Treat Errors As Warnings
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Network.CheckHostNameExists.HostExists">
            <summary>
            HostExists
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists">
            <summary>
            Returns a list of users between two changelist numbers for a Team Source filespec.
            </summary>
            <remarks>
            <code><![CDATA[<SourceTfs.GetUsersForChangelists Path="path" Start="start" End="end" ExcludedUsers="excludedUsers" TfsVersion="tfsVersion"/>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The depot path to check under.</para>
            <para><i>start (Required)</i></para>
            <para>The start changelist number.</para>
            <para><i>end (Required)</i></para>
            <para>The end changelist number.</para>
            <para><i>excludedUsers</i></para>
            <para>The list of users to exclude from the returning list.</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.GetUsersForChangelists
                        Path="//depot/Office/Main/Src/..."
                        Start="1056"
                        End="1067" >
                         <Output TaskParameter="Users" PropertyName="Users" />
                    </SourceTfs.GetUsersForChangelists>
                    <Message Text="The users with changes in the depot between those changelist numbers are @(Users)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.Users">
            <summary>
            Gets or sets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.ExcludedUsers">
            <summary>
            Gets or sets the User names not to include in the mailing list
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.Path">
            <summary>
            Gets or sets the depot path.
            </summary>
            <value>The full path for the depot.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.Start">
            <summary>
            Gets or sets the changelist number to start from
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetUsersForChangelists.End">
            <summary>
            Gets or sets the changelist number to end at
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromLabel">
            <summary>
            Returns a Changelist number for a given label and Team Source filespec.
            </summary>
            <remarks>
            <code><![CDATA[
            <SourceTfs.GetChangelistFromLabel Path="path" Label="label" Culture="culture" TfsVersion="tfsVersion"/>]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The full path to the file or folder.</para>
            <para><i>label (Required)</i></para>
            <para>The label to list changes from.</para>
            <para><i>tfsVersion</i></para>
            <para>Version of TFS to use. Supports 2005 and 2008. Default is 2005</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <SourceTfs.GetChangelistFromLabel
                        path="hum.c"
                        label="Beta" >
                        <Output TaskParameter="ChangeList" PropertyName="ChangeListItem" />
                    </SourceTfs.GetChangelistFromLabel>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromLabel.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromLabel.TfsVersion">
            <summary>
            Gets or sets the TFS version.
            </summary>
            <value>The TFS version.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromLabel.Changelist">
            <summary>
            Gets or sets the changelist.
            </summary>
            <value>The changelist.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromLabel.Path">
            <summary>
            Gets or sets the path to the file or folder.
            </summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.SourceTfs.GetChangelistFromLabel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Zip.AddFile">
            <summary>
            Adds a file to an existing zip file using J# 2.0.
            </summary>
            <remarks>
            <code><![CDATA[<Zip.AddFile PathToZipFile="pathToZipFile" Path="path"/>]]></code>
            <para>where:</para>
            <para><i>pathToZipFile (Required)</i></para>
            <para>The path to the zip file to be added into.</para>
            <para><i>path (Required)</i></para>
            <para>The path to the file or folder (recursive) to be added.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Zip.AddFile
                        pathToZipFile="c:\test.zip"
                        pathToFile="C:\FileToAddToZipFile.txt" />
                </Target>
                <Target Name="Test" >
                    <Zip.AddFile
                        pathToZipFile="c:\test.zip"
                        pathToFile="C:\TestFiles" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Zip.AddFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.AddFile.PathToFile">
            <summary>
            Specifies the path to the file, or folder (recursive) to be added to the specified zip
            </summary>
            <value>The full path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.AddFile.PathToZipFile">
            <summary>
            Specifies the path to and filename of the zip file the add action is to be performed on.
            </summary>
            <value>The path to and filename of the zip file.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.AddFile.IncludeFolderPath">
            <summary>
            Specifies if the folders should be created 1:1 inside the ZIP file. If you specify false
            only the file names will be added to the ZIP archive
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Zip.AddFile.RootFolder">
            <summary>
            Specifies the root of the ZIP archive from the original location. All files contained in the root
            of this folder will be added flat into the ZIP file any subfolder will be added correctly to the root of the zip.
            <example>
                rootFolder = C:\Dev\folderToZip (folder contains file 1.txt, 2.txt and sub folder 'subfolder' with the file 3.txt)
                ZIP-Archive will contain: 
                1.txt
                2.txt
                subfolder\3.txt
            </example>
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.SetAttribute">
            <summary>
            Writes an attribute to every element that matches the specified XPath expression.
            Will fail if no matches are found for the XPath expression.
            Unlike SetValue, if the element is found, but the attribute does not already exist 
            the task will not fail.  Instead the attribute will be added.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.SetAttribute Path="path" XPath="xpath" Name="name" Value="value" Namespaces="namespaces" IgnoreNoMatchFailure="ignoreNoMatchFailure" Force="force"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to read.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate for the element(s) on which to set the attribute.</para>
            <para><i>Name</i></para>
            <para>The name of the attribute to set.</para>
            <para><i>Value</i></para>
            <para>The value to assign to the attribute.</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>IgnoreNoMatchFailure</i></para>
            <para>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</para>
            <para><i>Force</i></para>
            <para>If set to true, this will force the file to be updated even if it is Read Only.  Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.SetAttribute 
            				Path="c:\app.config"
            				XPath="/configuration/appSettings/add[@key='myKey']"
            				Name="value"
            				Value="my data value"
            				Namespaces="@(ConfigNamespaces)"
            				IgnoreNoMatchFailure="true"
            				Force="true"
            		/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.SetAttribute.#ctor">
            <summary>
            Create a new ChangeValue.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.SetAttribute.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetAttribute.Name">
            <summary>
            Name of the Attribute to update.  If not specified the element's value will be updated.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetAttribute.Value">
            <summary>
            The new value to assign to the element or attribute.
            </summary>
            <value>The new value to assign to the element or attribute.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetAttribute.IgnoreNoMatchFailure">
            <summary>
            If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.
            </summary>
            <value>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetAttribute.Force">
            <summary>
            If set to true, this will modify the xml file even if it is read-only.  Defaults to false.
            </summary>
            <value>If set to true, this will modify the xml file even if it is read-only.  Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode">
            <summary>
            Enable or disable CRL checking on a website
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.description">
            <summary>
            The description of the web site to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.identifier">
            <summary>
            The identifier of thw website to locate
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.enable">
            <summary>
            enable the CRL
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.originalEnable">
            <summary>
            the original CRL value
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.InternalExecute">
            <summary>
            Set the CertCheckMode mode property
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.Enable">
            <summary>
            Enable the CRL - sets CertCheckMode to 0
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.OriginalEnable">
            <summary>
            Enable the CRL - sets CertCheckMode to 0
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.Description">
            <summary>
            Description of web site to modify
            </summary>
            <value>A valid web site description</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.Identifier">Identifier</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.Identifier">
            <summary>
            web site idenfitier to modify
            </summary>
            <value>A valid web site identifier</value>
            <remarks>If this parameter is not specified you must specify the site <seealso cref="P:Microsoft.Sdc.Tasks.Web.WebSite.CertCheckMode.Description">Description</seealso> 
            for the site you wish to start</remarks>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.Smtp.Start">
            <summary>
            Starts an SMTP Server.
            </summary>
            <remarks>
            <code><![CDATA[<Web.Smtp.Start
                Description="description" />]]></code>
            <para>where:</para>
            <para><i>description (Required)</i></para>
            <para>A description for the SMTP site to be started.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.Smtp.Start
                        Description="TestSMTP"
                       />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.Smtp.Start.#ctor">
            <summary>
            Initializes a new instance of the Smtp class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.Smtp.Start.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.Smtp.Start.Description">
            <summary>
            SMTP server description
            </summary>
            <value>Any valid description for the SMTP server</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign">
            <summary>
            Adds a strong name to the specified assemblies.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Tools.StrongName.ReSign   Assemblies="assemblies"
                        Runtime="runtime"
                        Key="key">
            </Tools.StrongName.ReSign>
            ]]></code>
            <para>where:</para>
            <para><i>assemblies (Required)</i></para>
            <para>The fullpaths to the assemblies to add the strong name to. These assemblies must exist or an exception will be thrown.</para>
            <para><i>runtime</i></para>
            <para>The runtime version to use for the signing. Valid values are "1.0", "1.1" or "2.0".</para>
            <para><i>key</i></para>
            <para>The path to the .snk file to be used to re-sign.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <ItemGroup>
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.dll" />
                    <Assemblies Include="Microsoft.Sdc.Tasks.Configuration.Tasks.Test.dll" />
                </ItemGroup>
                <Target Name="Test" >
                    <Tools.StrongName.ReSign
                        ContinueOnError="true"
                        Assemblies="@(Assemblies->'%(FullPath)')" 
                        Runtime="2.0"
                        KeyFile="$(CurrentFolder)\secret\PrivateKey.snk" /> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of Sn.exe</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign.KeyFile">
            <summary>The path to the snk file to be used to re-sign</summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign.Runtime">
            <summary>The runtime version to use for the signing i.e. 1.0, 1.1 or 2.0 </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign.Assemblies">
            <summary> Property for String array variable Assemblies. </summary>
            <returns> Returns a String array value. </returns>
            <value> Accepts a String array value. </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.ReSign.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.StrongName.RemoveAllSkipVerification">
            <summary>
            Removes all verification skipping entries.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.RemoveAllSkipVerification.#ctor">
            <summary>
            Initializes a new instance of the RemoveAllSkipVerification class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.RemoveAllSkipVerification.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of Sn.exe</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.RemoveAllSkipVerification.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.RemoveAllSkipVerification.Runtime">
            <summary>The runtime version to use for the signing i.e. 1.0, 1.1 or 2.0 </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.RemoveAllSkipVerification.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Tools.NUnit">
            <summary>
            <para>Runs Nunit, creates a summary file and returns test statistics.</para>
            <para>Testcases must be written according to the Nunit documentation.</para>
            <para>For more information and a copy of Nunit please visit
            <seealso href="http://www.nunit.org">http://www.nunit.org</seealso></para>     
            <para>Originally written for Nunit Version 2.0</para>
            <para>Updated to support Nunit version 2.1</para>
            </summary>
            <remarks>
            <code><![CDATA[
            <Tools.Nunit AssemblyName="assemblyname" 
                               Version="version"
                            Fixture="fixture"
                            IncludeCategory="includecategory"
                            ExcludeCategory="excludecategory"
                            OutputXmlFileName="outputxmlfilename"
                            OutputXmlTransformFile="outputxmltransformfile">
                <Output TaskParameter="Category" ItemName="itemName" />
                <Output TaskParameter="Pass" ItemName="itemName" />
                <Output TaskParameter="Fail" ItemName="itemName" />
                <Output TaskParameter="TimeTaken" ItemName="itemName" />
            </Tools.Nunit>
            ]]></code>
            <para>where:</para>
            <para><i>version</i></para>
            <para>Version of Nunit to run</para>
            <para><i>fixture</i></para>
            <para>Fully qualified fixture name if required</para>
            <para><i>includecategory</i></para>
            <para>List of test Categories to run ';' separated</para>
            <para><i>excludecategory</i></para>
            <para>List of test Categories to ignore ';' separated</para>
            <para><i>outputxmlfilename</i></para>
            <para>File name to write the results to</para>
            <para><i>outputxmltransformfile</i></para>
            <para>File name of transform file if required</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Tools.Nunit AssemblyName="MyTestAssembly.dll" 
                               Version="2.2"
                            Fixture=""
                            IncludeCategory="bvt"
                            ExcludeCategory="stress"
                            OutputXmlFileName="MyTestAssemblyResults.xml">
                               <Output TaskParameter="Pass" ItemName="TestPass"></Output>
                               <Output TaskParameter="Fail" ItemName="TestFail"></Output>
                               <Output TaskParameter="NotRun" ItemName="TestNoRun"></Output>
                               <Output TaskParameter="Total" ItemName="TestTotal"></Output>
                               <Output TaskParameter="TimeTaken" ItemName="TestTimeTaken"></Output>
                    </Tools.Nunit> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NUnit.#ctor">
            <summary>
            Initializes a new instance of the NUnit class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NUnit.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NUnit.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of Nunit</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NUnit.GenerateCommandLineCommands(Microsoft.Build.Utilities.CommandLineBuilder,System.String,System.String)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <param name="assembly"></param>
            <param name="outputXmlFilename"></param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NUnit.ProcessXmlResultsFile(System.String,System.String)">
            <summary>
            Processes the nunit results
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.NUnit.GetPathToBinFolder">
            <summary>
            Find the correct path containing the version of nunit specified.
            </summary>
            <returns>nUnit bin directory</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.OutputFolder">
            <summary>
            Path and file to save the test results
            </summary>
            <value>Fully qualified path name of the folder to output files to</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.OutputXmlTransformFile">
            <summary>
            The path to the xsl file to transform the final results
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.Version">
            <summary>
            Version of nUnit used for testing
            </summary>
            <value>2.0 | 2.1 | 2.2</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.Fixture">
            <summary>
            The fixture to run in the assembly specified
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.IncludeCategory">
            <summary>
            Testing category to include
            </summary>
            <value>Category Name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.ExcludeCategory">
            <summary>
            Testing category to exclude
            </summary>
            <value>Category Name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.Category">
            <summary>
            Test categories performed
            </summary>
            <value>A list of test categories performed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.Pass">
            <summary>
            Test passed
            </summary>
            <value>A list of tests passed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.Fail">
            <summary>
            Tests failed
            </summary>
            <value>A list of tests failed</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.NotRun">
            <summary>
            Tests not ran
            </summary>
            <value>A list of tests not ran</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.Total">
            <summary>
            A list of all tests within the specified assembly
            </summary>
            <value>A complete list of tests</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.TimeTaken">
            <summary>
            Time taken to test the specified assembly
            </summary>
            <value>Run time</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.NUnit.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.#ctor">
            <summary>
            Initializes a new instance of the AddSkipVerification class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.GenerateFullPathToTool">
            <summary>
            Full calculated path to tool including exe name
            </summary>
            <returns>Defaults to default install location of Sn.exe</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension)">
            <summary>
            Builds the commandline for this tool
            </summary>
            <param name="commandLine">The object to append the args to.</param>
            <returns>True if successfully added args.</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.Assembly">
            <summary>
            The assembly to add skip entries for
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.PublicKeyToken">
            <summary>
            The public key token to skip
            </summary>
            <value></value>        
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.Users">
            <summary>
            The users to add for skipping
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.Runtime">
            <summary>The runtime version to use for the signing i.e. 1.0, 1.1 or 2.0 </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Tools.StrongName.AddSkipVerification.ToolName">
            <summary>
            The name of the exe we call.
            </summary>
            <value>The name of the exe we call.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Summary.AddToReport">
             <summary>
             Add a section to a summary report
             </summary>
             <remarks>
             <code><![CDATA[<Summary.AddToReport SectionGenerator="sectionGenerator" ReportFile="reportFile" SourceFolder="sourceFolder" FileSpec="fileSpec" Name="name" />]]></code>
             <para>where:</para>
             <para><i>sectionGenerator (Required)</i></para>
             <para>Fully qualified type name for the section generator class. Can be any of the following:
            
             "Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.CodeCoverageSectionGenerator"
             "Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.NUnitSectionGenerator"
             "Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.SolutionSectionGenerator"
             "Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.StyleCopSectionGenerator"
             </para>
             <para><i>reportFile (Required)</i></para>
             <para>The full path and filename to the file that will contain the summary report.</para>
             <para><i>sourceFolder</i></para>
             <para>The full path to the folder that contains the specified section's xml files to be summarised.</para>
             <para><i>fileSpec</i></para>
             <para>The search string specifying the file(s) to be summarised, for example "Report*.dll"</para>
             <para><i>name</i></para>
             <para>Optional name to identify one section from another</para>
             </remarks>
             <example>
             <code><![CDATA[
             <Project>
                 <Target Name="Test" >
                     <Summary.AddToReport 
                             SourceFolder="$(MSBuildProjectDirectory)\Output" 
                             FileSpec="testsummary.xml" 
                             ReportFile="$(MSBuildProjectDirectory)\Output\BuildReport.xml" 
                             SectionGenerator="Microsoft.Sdc.Tasks.Configuration.SummaryGeneration.Generators.NUnitSectionGenerator"
                             Name="Test"
                     </Summary.AddToReport>
                 </Target>
             </Project>
             ]]></code>    
             </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Summary.AddToReport.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Summary.AddToReport.#ctor">
            <summary>
            Initializes a new instance of the AddToReport class.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Summary.AddToReport.SourceFolder">
            <summary>
            The full path to the folder that contains the specified section's xml files to be summarised.
            </summary>
            <value>The full path to the folder that contains the specified section's xml files to be summarised.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Summary.AddToReport.FileSpec">
            <summary>
            The search string specifying the file(s) to be summarised.
            </summary>
            <value>The search string specifying the file(s) to be summarised, for example "Report*.dll"</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Summary.AddToReport.ReportFile">
            <summary>
            The full path and filename to the file that will contain the summary report.
            </summary>
            <value>The full path and filename to the file that will contain the summary report.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Summary.AddToReport.SectionGenerator">
            <summary>
            Name of the class that will generate this section
            </summary>
            <value>TODO</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Summary.AddToReport.Name">
            <summary>
            Optional name to identify one section from another (especially if they
            are the same type)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare">
            <summary>
            Deletes a share on either the local or a remote machine.
            </summary>
            <remarks>
            <code><![CDATA[<Share.DeleteShare ShareName="shareName" Machine="machine" UserName="userName" Password="password" />]]></code>
            <para>where:</para>
            <para><i>shareName (Required)</i></para>
            <para>
            The name of the share to delete.
            </para>
            <para><i>machine</i></para>
            <para>
            The name or IP address of the machine to delete the share from. The default is the local machine.
            </para>
            <para><i>userName</i></para>
            <para>
            If different credentials are needed to connect to a remote machine, this is the user name in the form 
            DOMAIN\Username. This must not be supplied for the local machine. The default is to use the same
            credentials as the user the task is running as.
            </para>
            <para><i>password</i></para>
            <para>
            The password for the user account specified by <i>userName</i>. The default is no password.
            </para>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Create"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Connect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Disconnect"/>
            <seealso cref="T:Microsoft.Sdc.Tasks.Folder.Share.Exists"/>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Share.DeleteShare
                        ShareName="Software"
                        Machine="MyMachine" 
                        UserName="domain\username" 
                        Password="password1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Folder.Share.DeleteShare.InternalExecute">
            <summary>
            Executes the task
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.StringToItemList">
            <summary>
            Splits a string into an item list. Useful where parameters that are passed on the command line (or in an MSI property etc.)
            are required to have multiple values. 
            </summary>
            <remarks>
            <code><![CDATA[<StringToItemList InputString="inputString" Separator="separator">
                            <Output TaskParameter="OutputList" ItemName="outputList" />
                           </StringToItemList>]]></code>
            <para>where:</para>
            <para><i>inputString (Required)</i></para>
            <para>The the string containing multiple values.</para>
            <para><i>separator (Optional)</i></para>
            <para>separtor that the string uses to distinguish values, default to " ", can also be an item list in order to specify multiple separators</para>
            <para><i>outputList (Required)</i></para>
            <para>the resulting item list</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <StringToItemList
                        InputString="one,two,three"
                        Separator="," >
                            <Output TaskParameter="OutputList" ItemName="MyList" />
                    </StringToItemList>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ConsoleReadLine">
            <summary>
            Forces the command line to read a newline.
            </summary>
            <remarks>
            <code><![CDATA[<ConsoleReadLine Message="message">
                               <Output TaskParameter="Response" ItemName="response" />
                           </ConsoleReadLine>
            ]]></code>
            <para>where:</para>
            <para><i>message (Optional)</i></para>
            <para>The optional message to explain the response required from the user.</para>
            <para><i>response (Output)</i></para>
            <para>The response from the user.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <ConsoleReadLine Message="Press Enter to continue or Ctrl-C to abort.">
                        <Output TaskParameter="Response" ItemName="UserResponse" />
                    </ConsoleReadLine>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.ConsoleReadLine.message">
            <summary>
            The optional message to explain the response required from the user.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.ConsoleReadLine.response">
            <summary>
            The response from the user.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ConsoleReadLine.#ctor">
            <summary>
            Initializes a new instance of the ConsoleReadLine class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ConsoleReadLine.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ConsoleReadLine.Message">
            <summary>
            Gets or sets the optional message to explain the response required from the user.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ConsoleReadLine.Response">
            <summary>
            The response from the user.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.AppPoolIdentityType">
            <summary>
            Summary description for AppPoolIdentityType.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.AccessFlags">
            <summary>
            Summary description for AccessFlags.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.File.Replace">
            <summary>
            Reads in a text file and modifies the contents by searching for
            and replacing a text string or text satisfying a regular expression pattern.
            
            Supports unicode files and case-insensitive searches.
            </summary>
            <remarks>
            <code><![CDATA[
            <File.Replace
                        Path="path"
                        Force="force"
                        NewValue="newValue"
                        TextEncoding="textEncoding"
                        RegularExpression="regularExpression"
                        OldValue="oldValue"
                        IgnoreCase="ignoreCase" >
            </File.Replace>
            ]]></code>
            <para>where:</para>
            <para><i>path (required)</i></para>
            <para>The full path and filename of the text file to be modified.</para>
            <para><i>force</i></para>
            <para>If set to true, this will modify the text file even if it is read-only. Set to false to ignore read-only files. Defaults to false.</para>
            <para><i>newValue (required)</i></para>
            <para>The new value for the specified text to search for.</para>
            <para><i>regularExpression (required if oldValue not specified)</i></para>
            <para>The regular expression pattern to match.</para>
            <para><i>oldValue (required if regularExpression not specified)</i></para>
            <para>The text string to search for.</para>
            <para><i>textEncoding (Optional)</i></para>
            <para>Default behaviour is to auto detect the encoding. Specify a valid encoding to force a particular encoding.</para>
            <para><i>ignoreCase (optional)</i></para>
            <para>If set to true, search will be case-insensitive. Set to false for case-sensitive searches. Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <!-- Replaces all instances of the text string "Test" in file1.txt 
                     with the text string "MODIFIED".
                -->
                <Target Name="Test" >
                    <File.Replace
                        Path="C:\SourceFiles\file1.txt"
                        OldValue="Test"
                        NewValue="MODIFIED" /> 
                </Target>
                <!-- Replaces runs of white space in file2.txt with a
                     comma and a blank.
                -->
                <Target Name="TestWithRegularExpression" >
                    <File.Replace
                        Path="C:\SourceFiles\file2.txt"
                        RegularExpression="\s+"
                        NewValue=", " /> 
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.File.Replace.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.File.Replace.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replaces using ignored case.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>Replaced string content</returns>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.Path">
            <summary>
            The full path and filename of the text file to be modified.
            </summary>
            <value>The full path and filename of the text file to be modified.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.RegularExpression">
            <summary>
            Either the RegularExpression or OldValue attribute is required
            
            The regular expression pattern to match.
            </summary>
            <value>The regular expression pattern to match.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.OldValue">
            <summary>
            Either the RegularExpression or OldValue attribute is required
            
            The text string to match when searching.
            </summary>
            <value>The text string to match when searching.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.NewValue">
            <summary>
            The new replacement value.
            </summary>
            <value>The new replacement value</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.Force">
            <summary>
            If set to true, this will modify the text file even if it is read-only.
            </summary>
            <value>If set to true, this will modify the text file even if it is read-only. Set to false to ignore read-only files. Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.IgnoreCase">
            <summary>
            If set to true, search will be case-insensitive.
            </summary>
            <value>If set to true, search will be case-insensitive. Set to false for case-sensitive searches. Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.File.Replace.TextEncoding">
            <summary>
            If set, file will be written with that encoding
            </summary>
            <value>System.Text.Encoding value. If set, file will be written in that encoding.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.XmlFile.SetValue">
            <summary>
            Writes the specified value to the element(s) or attribute(s) that 
            match the passed XPath expression.  
            Will fail if no match found for the XPath expression.
            </summary>
            <remarks>
            <code>
            <![CDATA[<XmlFile.SetValue Path="path" XPath="xpath" Value="value" Namespaces="namespaces" IgnoreNoMatchFailure="ignoreNoMatchFailure" Force="force"/>]]>
            </code>
            <para>where:</para>
            <para><i>Path (Required)</i></para>
            <para>The path of the XML file to read.</para>
            <para><i>XPath (Required)</i></para>
            <para>The XPath expression to evaluate for the element(s) or attribute(s) whose value to set.</para>
            <para><i>Value</i></para>
            <para>The value to assign.</para>
            <para><i>Namespaces</i></para>
            <para>
            Optional TaskItems array detailing each of the namespace declarations required to read/maintain the target document.
            Each TaskItem should have 2 elements &lt;Prefix&gt; and &lt;Uri&gt;.
            </para>
            <para><i>IgnoreNoMatchFailure</i></para>
            <para>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</para>
            <para><i>Force</i></para>
            <para>If set to true, this will force the file to be updated even if it is Read Only.  Defaults to false.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <XmlFile.SetValue 
            				Path="c:\app.config"
            				XPath="/configuration/appSettings/add[@key='myKey']/@value"
            				Value="my data value"
            				Namespaces="@(ConfigNamespaces)"
            				IgnoreNoMatchFailure="true"
            				Force="true"
            		/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.SetValue.#ctor">
            <summary>
            Create a new ChangeValue.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.XmlFile.SetValue.InternalExecute">
            <summary>
            Carry out this task's action.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetValue.Value">
            <summary>
            The new value to assign to the element or attribute.
            </summary>
            <value>The new value to assign to the element or attribute.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetValue.IgnoreNoMatchFailure">
            <summary>
            If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.
            </summary>
            <value>If set to true, no Exception will be thrown if no matches made for the supplied XPath.  Defaults to false.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.XmlFile.SetValue.Force">
            <summary>
            If set to true, this will modify the xml file even if it is read-only.  Defaults to false.
            </summary>
            <value>If set to true, this will modify the xml file even if it is read-only.  Defaults to false.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Wix.LinkMsi">
            <summary>
            Links intermediate <b>*.wixobj</b> files to build a complete MSI. The 
            <see cref="T:Microsoft.Sdc.Tasks.Wix.CompileMsi"/> task can be used to create the
            intermediate files that this task expects as input.
            </summary>
            <remarks>
            <para>
            <b>About Wix:</b> Wix was originally a Microsoft tool that has been released into the open source
            community under the Common Public License. The binaries and source code can be downloaded from
            <a href="http://sourceforge.net/projects/wix">SourceForge</a>.
            </para>
            <code><![CDATA[<LinkMsi SourceFiles="sourceFiles" OutputFile="outputFile" WixPath="wixPath" BasePath="basePath" InformationLevel="informationLevel" WarningLevel="warningLevel" TreatWarningsAsErrors="treatWarningsAsErrors" KeepTemporaryFiles="keepTemporaryFiles" />]]></code>
            <para>where:</para>
            <para><i>sourceFiles (Required)</i></para>
            <para>
            A delimited list of the source files to generate the MSI from. These should have the extension *.wixobj.
            </para>
            <para><i>outputFile (Required)</i></para>
            <para>
            The path to the MSI to produce. This should have the extension *.msi.
            </para>
            <para><i>wixPath (Required)</i></para>
            <para>
            The path to the directory that the Wix executables reside in.
            </para>
            <para><i>basePath</i></para>
            <para>
            The base path used to locate all files if they are provided as a relative path. The default
            is the current directory.
            </para>
            <para><i>informationLevel</i></para>
            <para>
            An integer between zero (verbose information) and three (no information). The default is zero.
            </para>
            <para><i>warningLevel</i></para>
            <para>
            An integer between zero (all warnings) and three (no warnings). The default is zero.
            </para>
            <para><i>treatWarningsAsErrors</i></para>
            <para>
            <b>true</b> if warnings are treated as errors, or <b>false</b> otherwise. The default is <b>false</b>.
            </para>
            <para><i>keepTemporaryFiles</i></para>
            <para>
            <b>true</b> if temporary files should be kept, or <b>false</b> otherwise. Keeping the temporary files
            can be useful for debugging purposes. The default is <b>false</b>.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <LinkMsi 
                        SourceFiles="IntermediateFile1.wixobj;IntermediateFile2.wixobj" 
                        OutputFile="MyPackage.msi" 
                        WixPath="C:\Program Files\Wix" 
                        BasePath="C:\Build\Msi\ObjectFiles" 
                        InformationLevel="1" 
                        WarningLevel="2" 
                        TreatWarningsAsErrors="true" 
                        KeepTemporaryFiles="false" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Wix.LinkMsi.InternalExecute">
            <summary>
            Executes the task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.LinkMsi.BasePath">
            <summary>
            Gets or sets the base path used to locate all files if they are provided as a relative path.
            </summary>
            <value>
            The base path used to locate all files if they are provided as a relative path.
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Wix.LinkMsi.KeepTemporaryFiles">
            <summary>
            Gets or sets a value indicating whether temporary files are kept during the linking process. This can be useful
            for debugging purposes.
            </summary>
            <value>
            <b>true</b> if temporary files should be kept, or <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.WebSite.DeleteVirtualDirectory">
            <summary>
            Deletes the specified virtual directory from the specified server and web site
            </summary>
            <remarks>
            <code><![CDATA[<Web.WebSite.DeleteVirtualDirectory
                VirtualDirectoryName="virtualDirectoryName"
                MachineName="machineName"
                WebSiteName="webSiteName" /> ]]></code>
            <para>where:</para>
            <para><i>virtualDirectoryName (required)</i></para>
            <para>The virtual directory to delete</para>
            <para><i>machineName</i></para>
            <para>Machine to perform delete on</para>
            <para><i>webSiteName</i></para>
            <para>Web site to delete the virtual directory from</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.WebSite.DeleteVirtualDirectory
                        VirtualDirectoryName="/test"
                        Description="testwebsite" />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.WebSite.DeleteVirtualDirectory.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteVirtualDirectory.VirtualDirectoryName">
            <summary>
            Virtual directory to delete
            </summary>
            <value>A valid, existing virtual directory</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteVirtualDirectory.MachineName">
            <summary>
            Machine to perform the delete action on
            </summary>
            <value>A valid machine name. If this value is not set the delete will 
            target on the local machine.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.WebSite.DeleteVirtualDirectory.WebSiteName">
            <summary>
            Web site to delete the virtual directory from
            </summary>
            <value>A value web site name. If this value is not set the delete will
            target against "Default Web Site"</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Web.AppPool.Create">
            <summary>
            Creates a new Applcation Pool (IIS6 or later).
            </summary>
            <remarks>
            <code><![CDATA[<Web.AppPool.Create AppPoolName="appPoolName" IdentityType="identityType" 
            Identity="identity" Password="password" IdleTimeout="idletimeout" PeriodicRestartTime="periodicRestartTime" WorkerProcesses="workerProcesses" />]]></code>
            <para>where:</para>
            <para><i>appPoolName (Required)</i></para>
            <para>Any valid IIS pool name</para>
            <para><i>identityType (Required)</i></para>
            <para>One of LocalSystem, LocalService, NetworkService, SpecifiedUserAccount</para>
            <para><i>identity (Required if identitytype is set to "SpecifiedUserAccount")</i></para>
            <para>Username to run the application pool as</para>
            <para><i>password (Required if identitytype is set to "SpecifiedUserAccount")</i></para>
            <para>Password for the application pool identity</para>
            <para><i>idletimeout</i></para>
            <para>The idle timeout (in minutes) for the application pool</para>
            <para><i>periodicRestartTime</i></para>
            <para>The periodic restart time (in minutes) for the application pool</para>
            <para><i>workerProcesses</i></para>
            <para>The number of worker processes for the application pool</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Web.AppPool.Create
                        AppPoolName="New Application Pool"
                        IdentityType="SpecifiedUserAccount"
                        Identity="pooluser"
                        Password="pool$1234"
                        IdleTimeout="40"
                        PeriodicRestartTime="60"
                        WorkerProcesses="1"
                       />
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.name">
            <summary>
            The name of the application pool to create.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.pipelineMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.identityType">
            <summary>
            The identity type for this application pool.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.identity">
            <summary>
            Username to run identity pool as. 
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.password">
            <summary>
            Password for the Application Pool <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.Identity">identity</see>
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.idleTimeout">
            <summary>
            The IdleTimeout metabase value in minutes, set to 0 to disable the idle time-out.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.periodicRestartTime">
            <summary>
            The PeriodicRestartTime metabase value in minutes, set to 0 to disable periodic restart.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.workerProcesses">
            <summary>
            The MaxProcesses metabase value. Default is 1.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.restartSchedule">
            <summary>
            A semicolon-delimited list of restart times specified in hh:mm fomat.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Web.AppPool.Create.requestQueueLimit">
            <summary>
            Sets the request queue limit.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Web.AppPool.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.MachineName">
            <summary>
            Machine to operate on
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.AppPoolName">
            <summary>
            Name of the application pool to create
            </summary>
            <value>Any valid IIS application pool name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.IdentityType">
            <summary>
            Identity type for this application pool
            </summary>
            <value>One of:
            LocalSystem 
            LocalService
            NetworkService
            SpecifiedUserAccount</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.Identity">
            <summary>
            Username to run identity pool as. 
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
            <value>A valid, existing AD/NT username</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.Password">
            <summary>
            Password for the Application Pool <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.Identity">identity</see>
            Only used if <see cref="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.IdentityType">IdentityType</see> is SpecifiedUserAccount
            </summary>
            <value>A valid password for the identity account</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.IdleTimeout">
            <summary>
            Used to configure the IdleTimeout metabase property
            </summary>
            <value>The IdleTimeout value in minutes, set to 0 to disable IdleTimeout</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.PeriodicRestartTime">
            <summary>
            Gets or sets the PeriodicRestartTime metabase property.
            </summary>
            <value>The PeriodicRestartTime value in minutes, set to 0 to disable periodic restart.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.WorkerProcesses">
            <summary>
            Gets or sets the MaxProcesses metabase value. Default is 1.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.RestartSchedule">
            <summary>
            A semicolon-delimited list of restart times specified in hh:mm fomat.
            </summary>
            <value>semicolon-delimited list of times in hh:mm format</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Web.AppPool.Create.RequestQueueLimit">
            <summary>
            Sets the request queue limit.  Set to 0 to disable.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Resources">
            <summary>
            Provides Resources to all the tasks.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Resources.#cctor">
            <summary>
            Creates a static ResourceManager for this assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Resources.#ctor">
            <summary>
            Prevents a new instance of the Resources class being instantiated.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Resources.GetResourceManager">
            <summary>
            Returns a ResourceManager for this assembly.
            </summary>
            <returns>An instance of a ResourceManager class.</returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ServiceProcess.Start">
            <summary>
            Starts a Win32 Service on the local computer.
            </summary>
            <remarks>
            <code><![CDATA[<ServiceProcess.Start ServiceName="serviceName" />]]></code>
            <para>where:</para>
            <para><i>serviceName (Required)</i></para>
            <para>The short name that identifies the service to the system.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ServiceProcess.Start
                        ServiceName="W3SVC" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.Start.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Start.Timeout">
            <summary>
            Time to wait for start to complete. 0 to not wait. Set in seconds. If timeout is non-zero and it hasn't started by then it throws an error.
            </summary>
            <value>int</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.Start.ServiceName">
            <summary>
            The short name that identifies the service to the system
            </summary>
            <value>The short name that identifies the service to the system, e.g. "W3SVC".</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Security.RemoveAcl">
            <summary>
            Removes an Access Control List Entry from the specified path.
            </summary>
            <remarks>
            <code><![CDATA[<Security.RemoveAcl Path="path" UserOrGroup="userOrGroup" />]]></code>
            <para>where:</para>
            <para><i>path (Required)</i></para>
            <para>The path to the file or folder.</para>
            <para><i>userOrGroup (Required)</i></para>
            <para>A domain user or group e.g. mydomain\user1.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Security.RemoveAcl
                        Path="c:\temp"
                        UserOrGroup="mydomain\user1" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.RemoveAcl.#ctor">
            <summary>
            Initializes a new instance of the RemoveAcl class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Security.RemoveAcl.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.RemoveAcl.Path">
            <summary>
            The path to the file or folder.
            </summary>
            <value>The path to the file or folder.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Security.RemoveAcl.UserOrGroup">
            <summary>
            A domain user or group.
            </summary>
            <value>A domain user or group e.g. mydomain\user1.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Registry.DeleteKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.DeleteKey.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Registry.DeleteKey.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.DeleteKey.MachineName">
            <summary>
            Defaults to local machine if not specified.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Registry.DeleteKey.Value">
            <summary>
            If not specified then the default for the key is returned.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Msi.Install">
            <summary>
            Installs an MSI package.
            </summary>
            <remarks>
            <code><![CDATA[<Msi.Install MsiPath="msiPath" ProductCode="productCode" LogFile="logFile" LogOptions="logOptions" UserInterfaceLevel="userInterfaceLevel" LoadUserProfile="loadUserProfile" PropertyFiles="propertyFiles" Properties="properties" Features="features" />]]></code>
            <para>where:</para>
            <para><i>msiPath (Required*)</i></para>
            <para>
            The path to the MSI to install.
            </para>
            <para><i>productCode (Required*)</i></para>
            <para>
            The GUID product code of the product to install.
            </para>
            <para><i>logFile (Required)</i></para>
            <para>
            The path to the log file for the installation. The recommended file name is the name of the MSI
            with the extension *.install.log.
            </para>
            <para><i>logOptions</i></para>
            <para>
            A delimited list of logging options. Possible values are: Default, StatusMessages, Warnings, Errors,
            ActionStart, ActionSpecificRequests, UserRequests, InitialParameters, OutOfMemory, TerminalProperties,
            Verbose, AppendLog, FlushEachLine, AllInformation. The default is Default. Please see the
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiLoggingOptions"/> documentation for
            further information.
            </para>
            <para><i>userInterfaceLevel</i></para>
            <para>
            The user interface level displayed by MsiExec during the installation. Possible values are: 
            None, Basic, ReducedWithModalDialog, FullWithModalDialog, NoneWithModalDialog, BasicWithModalDialog,
            BasicWithNoModalDialogs. The default is None. Please see the 
            <see cref="T:Microsoft.Sdc.Tasks.Msi.MsiTaskBase.MsiExecUILevel"/> documentation for
            further information.
            </para>
            <para><i>loadUserProfile</i></para>
            <para>
            <b>true</b> if the user's profile is loaded during the processing of the MSI, or <b>false</b> otherwise.
            This may be needed for some custom installation actions such as configuring ports and channels in 
            Microsoft BizTalk Server. The default is <b>false</b>.
            </para>
            <para><i>propertyFiles</i></para>
            <para>
            A delimited list of XML property files that provide installation properties for the MSI. 
            Multiple property files are allowed so that you can have a hierarchy - the first file provides a base set of properties
            (e.g. environmental properties for a particular rig) and subsequent files can override these to provide a more
            specific property or add new properties (e.g. properties for a machine, then properties for an individual MSI).
            </para>
            <para><i>properties</i></para>
            <para>
            A delimited list of installation properties in the format Name=Value. If any property files have been 
            specified, then the properties specified here are seen as the most significant and can overwrite 
            any of the property values specified in the files.
            </para>
            <para><i>features</i></para>
            <para>
            A delimited list of the names of features to be installed. This is not necessary if the MSI does not
            have features configured, or you wish all features to be installed.
            </para>
            <para>
            <b>*</b> - Either <i>msiPath</i> or <i>productCode</i> must be provided. If both are provided then 
            <i>msiPath</i> takes precedence and <i>productCode</i> is ignored. If neither are provided then the
            task will throw an exception when it executes.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <Msi.Install 
                        MsiPath="C:\Build\Msi\Packages\MyPackage.msi" 
                        ProductCode="b6b6f41c-fd3e-4b5b-8a73-c59494974990" 
                        LogFile="C:\Build\Msi\Packages\MyPackage.install.log" 
                        LogOptions="Default;Verbose" 
                        UserInterfaceLevel="None" 
                        LoadUserProfile="true" 
                        PropertyFiles="C:\Build\Properties\Global.xml;C:\Build\Properties\Rig4.xml" 
                        Properties="INSTALLDIR=C:\Install;DOMAIN=rig4;MACHINE=r4app01" 
                        Features="MSMQ,BTS2004,WebServices" />
                </Target>
            </Project>
            ]]></code>  
            A sample property file is shown below. Note that you must include the namespace for the file to
            be parsed correctly.
            <code><![CDATA[
            <Properties xmlns="urn:sdc-microsoft-com:deployment:properties:v2.0">
                <Property Name="MY_PROPERTY" Value="some value" />
                <Property Name="ANOTHER_PROPERTY" Value="some other value" />
                <Property Name="SOMETHING_ELSE" Value="hello world" />
                ... etc ...
            </Properties>
            ]]></code>
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.Msi.Install.embedProperties">
            <summary>
            internal variable
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Install.#ctor">
            <summary>
            Initializes a new instance of the InstallMsi class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Msi.Install.InternalExecute">
            <summary>
            Executes the task to install the MSI.
            </summary>
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Msi.Install.EmbedProperties">
            <summary>
            Specifies if Properties should be embedded into the MSI before installation.
            </summary>
            <remarks>
            When this property is set to true all properties specified in a property file will 
            be embedded into the MSI unless they have an additional attribute <b>Embed</b> set to false.
            All properties with an Embed attribute set to false will be included on the command-line.
            </remarks>
            <value>
            True or False.
            </value>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.CreateSolution.#ctor">
            <summary>
            Initializes a new instance of the CreateSolution class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Mithran.CreateSolution.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Mithran.CreateSolution.TemplatePath">
            <summary>
            Defaults to the folder we are running from with a Templates suffix
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Help.CreateProject">
            <summary>
            Creates a hhp project file from a given decompiled help project folder.
            </summary>          
            <remarks>
            <code><![CDATA[
            <Help.CreateProject SourceFolder="folder" />
            ]]></code>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.CreateProject.#ctor">
            <summary>
            Initializes a new instance of the CreateProject class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Help.CreateProject.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.CreateProject.SourceFolder">
            <summary>
            The folder where the decompiled help is located.
            </summary>
            <value>Must be a full path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.CreateProject.ContentsFilename">
            <summary>
            The filename of the hhc file holding the contents
            </summary>
            <value>Must be a filename i.e. documentation.hhc.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.CreateProject.ChmFilename">
            <summary>
            Chm filename
            </summary>
            <value>Must be a filename i.e. test.chm.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.CreateProject.Title">
            <summary>
            Title of the help
            </summary>
            <value>A valid help title string</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.CreateProject.StartPage">
            <summary>
            The start page for the help
            </summary>
            <value>A valid help htm page name</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Help.CreateProject.ProjectFilename">
            <summary>
            Project file filename
            </summary>
            <value>A valid hhp filename</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.EventSource.Create">
            <summary>
            Creates a new Event Source for Event logging. A TaskException will be thrown if the source already exists.
            </summary>
            <remarks>
            <code><![CDATA[<EventSource.Create Source="source" LogName="logName" />]]></code>
            <para>where:</para>
            <para><i>source (Required)</i></para>
            <para>The source name by which the application is registered on the local computer.</para>
            <para><i>logName (Required)</i></para>
            <para>The name of the log the source's entries are written to. Possible values include: Application, Security, System, or a custom event log.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <EventSource.Create
                        Source="MyEventSource"
                        LogName="Application" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.EventSource.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Create.Source">
            <summary>
            The source name by which the application is registered on the local computer
            </summary>
            <value>The source parameter can be any string, although often it will be the name of your application or a component of your application. The source must be unique on the local computer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Create.LogName">
            <summary>
            The name of the log the source's entries are written to.
            </summary>
            <value>Possible values include: Application, Security, System, or a custom event log.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.SmtpService">
            <summary>
            Summary description for SmtpService.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.RestartTime">
            <summary>
            Summary description for RestartTime.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.Web.RestartTime.#ctor(System.String)">
            <summary>
            Initialize a RestartTime type at the time specified
            </summary>
            <param name="time">A time in the format hh:mm</param>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.Identity">
            <summary>
            Summary description for Identity.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Configuration.Web.Identity.Type">
             <summary>
            Default to NetworkService
             </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor">
            <summary>
            Responsible for executing SQL scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.Execute(Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo)">
            <summary>
            Executes a SQL script.
            </summary>
            <param name="executionInfo">
            Information about the script or scripts to be executed.
            </param>
            <remarks>
            <para>The input will be validated before the script is executed.
            If an incorrect combination of input has been supplied, an
            ApplicationException is raised. Valid inputs are defined below.</para>
            <para>ServerName - mandatory if ConnectionString is not specified.</para>
            <para>DatabaseName - mandatory if ConnectionString is not specified.</para>
            <para>ConnectionString - mandatory if ServerName and DatabaseName are not specified.</para>
            <para>CommandTimeout - optional and will default to 30 seconds if not specified.</para>
            <para>Path - mandatory if Sql is not specified.</para>
            <para>Sql - mandatory if Path is not specified.</para>
            <para>SubstitutionParameters - optional.</para>
            <para>Exclusions - only valid if Path is specified, wildcard characters are 
            not supported for exclusions.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.IsEmpty(System.String)">
            <summary>
            Can be used to determine if a string is empty.
            </summary>
            <param name="valueToEvaluate">
            The string to evaluate.
            </param>
            <returns>
            Returns true if the string is null or empty. Otherwise, returns false.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ValidateInput(Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo)">
            <summary>
            Validates the input script information. If validation fails, an
            ApplicationException is thrown.
            </summary>
            <param name="executionInfo">
            Input parameter to the Excute method that needs to be evaluated.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ExecuteExistsScript(System.String,System.String,System.String,System.String[])">
            <summary>
            Executes a SQL statement and returns true if an item is found in the
            resulting result-set.
            </summary>
            <param name="databaseName">
            Name of the database that the script will be run against.
            </param>
            <param name="serverName">
            The SQL Server name.
            </param>
            <param name="sqlFormatScript">
            A string containing the SQL script to execute. The script may contain
            zero or more format items.
            </param>
            <param name="itemArgs">
            A string array containing zero or more items to format.
            </param>
            <returns>
            Returns true if an item exists in the resultant result-set, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ExecuteExistsScriptSpecifyConnection(System.String,System.String,System.String[])">
            <summary>
            Executes a SQL statement and returns true if an item is found in the
            resulting result-set.
            </summary>
            <param name="connectionString">
            Database connection string.
            </param>
            <param name="sqlFormatScript">
            A string containing the SQL script to execute. The script may contain
            zero or more format items.
            </param>
            <param name="itemArgs">
            A string array containing zero or more items to format.
            </param>
            <returns>
            Returns true if an item exists in the resultant result-set, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ExecuteActionScript(System.String,System.String,System.String,System.String[])">
            <summary>
            Executes a SQL statement.
            </summary>
            <param name="databaseName">
            Name of the database that the script will be run against.
            </param>
            <param name="serverName">
            The SQL Server name.
            </param>
            <param name="sqlFormatScript">
            A string containing the SQL script to execute. The script may contain
            zero or more format items.
            </param>
            <param name="itemArgs">
            A string array containing zero or more items to format.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ExecuteActionScript(System.String,System.String,System.Int32,System.String,System.String[])">
            <summary>
            Executes a SQL statement with a command timeout period.
            </summary>
            <param name="databaseName">
            Name of the database that the script will be run against.
            </param>
            <param name="serverName">
            The SQL Server name.
            </param>
            <param name="commandTimeout">
            The wait time in seconds before terminating the attempt to execute 
            a command and generating an error.
            </param>
            <param name="sqlFormatScript">
            A string containing the SQL script to execute. The script may contain
            zero or more format items.
            </param>
            <param name="itemArgs">
            A string array containing zero or more items to format.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ExecuteActionScriptSpecifyConnection(System.String,System.String,System.String[])">
            <summary>
            Executes a SQL statement given a connection string.
            </summary>
            <param name="connectionString">
            Database connection string.
            </param>
            <param name="sqlFormatScript">
            A string containing the SQL script to execute. The script may contain
            zero or more format items.
            </param>
            <param name="itemArgs">
            A string array containing zero or more items to format.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ExecuteActionScriptSpecifyConnection(System.String,System.Int32,System.String,System.String[])">
            <summary>
            Executes a SQL statement given a connection string and a command timeout period.
            </summary>
            <param name="connectionString">
            Database connection string.
            </param>
            <param name="commandTimeout">
            The wait time in seconds before terminating the attempt to execute 
            a command and generating an error.
            </param>
            <param name="sqlFormatScript">
            A string containing the SQL script to execute. The script may contain
            zero or more format items.
            </param>
            <param name="itemArgs">
            A string array containing zero or more items to format.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.DetermineConnectionString(System.String,System.String)">
            <summary>
            Determines the connection string to use to connect to a SQL server
            database given the server name and the database name. Assumes
            Windows authentication.
            </summary>
            <param name="databaseName">
            Name of database to connect to.
            </param>
            <param name="serverName">
            Name of server to connect to.
            </param>
            <returns>
            Connection string that can be used to connect to a SQL Server database using a SqlConnection object.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.DetermineConnectionString(System.String,System.String,System.Int32)">
            <summary>
            Determines the connection string to use to connect to a SQL server
            database given the server name and the database name. Assumes
            Windows authentication.
            </summary>
            <param name="databaseName">
            Name of database to connect to.
            </param>
            <param name="serverName">
            Name of server to connect to.
            </param>
            <param name="timeout">
            Timeout value to apply to the connection attempt
            </param>
            <returns>
            Connection string that can be used to connect to a SQL Server database using a SqlConnection object.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.DetermineConnectionString(Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo)">
            <summary>
            Constructs a database connection string based on the script execution
            information provided.
            </summary>
            <param name="executionInfo">
            The script information that requires a database connection to be executed.
            </param>
            <returns>
            A database connection string that can be passed to the SqlConnection constructor.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.SubstituteParameters(System.String,System.Collections.Hashtable)">
            <summary>
            Finds paramters in the SQL script and replaces them with their
            corresponding values.
            </summary>
            <param name="sqlCommandText">
            The SQL command statement.
            </param>
            <param name="parameters">
            A hashtable of name value pairs where the key corresponds to the name
            of the parameter and where the value corresponds to the paramer's value.
            </param>
            <returns>
            SQL command text where the paramters found in the text have
            been replaced by their corresponding values.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.GetFiles(System.String)">
            <summary>
            Gets a list of files in the given path.
            </summary>
            <param name="path">
            The path to search which could contain the wildcard characters '*' and '?'.
            </param>
            <returns>
            Returns a file list from the path searched.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.LoadScript(System.String)">
            <summary>
            Loads a SQL script from a text file.
            </summary>
            <param name="fileName">
            The name of the file that contains the SQL script.
            </param>
            <returns>
            The SQL script found in the text file.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ShouldExecuteScript(System.IO.FileSystemInfo,Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo)">
            <summary>
            Decides whether to execute a script or not by checking the exclusions list.
            </summary>
            <param name="scriptFile">
            Script file that needs to be checked.
            </param>
            <param name="executionInfo">
            Hashtable of file exclusions
            </param>
            <returns>
            Returns true if the script should be executed, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.FormatErrorString(System.String,Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutionInfo)">
            <summary>
            Fromats an error string with extra execution information.
            </summary>
            <param name="errorMessage">
            The error message to report.
            </param>
            <param name="executionInfo">
            Information about the scipt that caused the error.
            </param>
            <returns>
            Formatted error string.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.OnScriptFileExecuted(Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptFileEventArgs)">
            <summary>
            Called after a script file has finished executing to raise 
            ScriptFileExecuted events.
            </summary>
            <param name="scriptFileExecuted">
            Contains information about the script file that was executed.
            </param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.CreateConnection(System.String)">
            <summary>
            Creates a SqlConnection with tracing enabled on the connection.
            </summary>
            <param name="connectionString">
            The database connection string.
            </param>
            <returns>
            A SqlConnection with tracing enabled on the connection.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.TraceMessageEventHandler(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            The SqlConnecion.InfoMessage event handler.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="E:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ScriptFileExecuted">
            <summary>
            An event that clients can use to be notified when a SQL script 
            file has been executed.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.ScriptExecutor.ScriptExecutionHandler">
            <summary>
            A delegate type for hooking up to script file execution notifications.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database">
            <summary>
            Utility class that can be used to determine if a database exists. 
            Also provides a means of disconnecting current users connected 
            to a database.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.Exists(System.String)">
            <summary>
            Determines whether a database exists on the local machine.
            </summary>
            <param name="databaseName">
            The name of a database whose existence needs to be determined.
            </param>
            <returns>
            Returns true if the datbase exist, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.Exists(System.String,System.String)">
            <summary>
            Determines whether a database exists on a specified server.
            </summary>
            <param name="databaseName">
            The name of a database whose existence needs to be determined.
            </param>
            <param name="serverName">
            The name of the SQL server to check on.
            </param>
            <returns>
            Returns true if the datbase exist, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.DisconnectUserProcesses(System.String)">
            <summary>
            Disconnects user processes connected to a SQL Server database on 
            the local machine.
            </summary>
            <param name="databaseName">
            The database to disconnect the user processes from.
            </param>
            <returns>
            The number of users disconnected.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.DisconnectUserProcesses(System.String,System.Int32)">
            <summary>
            Disconnects user processes connected to a SQL Server database 
            specifying the time allowed for the operation to take before an 
            error is reported.
            </summary>
            <param name="databaseName">
            The database to disconnect the user processes from.
            </param>
            <param name="commandTimeout">
            The time in seconds for the operation to take before raising an
            error.
            </param>
            <returns>
            The number of users disconnected.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.DisconnectUserProcesses(System.String,System.String)">
            <summary>
            Disconnects user processes connected to a SQL Server database on a specific server.
            </summary>
            <param name="databaseName">
            The database to disconnect the user processes from.
            </param>
            <param name="serverName">
            The name of the server that the database exists on.
            </param>
            <returns>
            The number of users disconnected.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.DisconnectUserProcesses(System.String,System.String,System.Int32)">
            <summary>
            Disconnects user processes connected to a SQL Server database on 
            a specific server, specifying the time allowed for the operation 
            to take before an error is reported.
            </summary>
            <param name="databaseName">
            The database to disconnect the user processes from.
            </param>
            <param name="serverName">
            The name of the server that the database exists on.
            </param>
            <param name="commandTimeout">
            The time in seconds for the operation to take before raising an
            error.
            </param>
            <returns>
            The number of users disconnected.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.DisconnectUserProcessesWithConnectionString(System.String,System.String,System.Int32)">
            <summary>
            Disconnects user processes connected to a SQL Server database on 
            a specific server, specifying the time allowed for the operation 
            to take before an error is reported.
            </summary>
            <param name="connectionString">
            A valid OLE/DB connection string to build the connection from.
            </param>
            <param name="databaseName">
            The database to disconnect the user processes from.
            </param>
            <param name="commandTimeout">
            The time in seconds for the operation to take before raising an
            error.
            </param>
            <returns>
            The number of users disconnected.
            </returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Configuration.SqlServer.Database.DoDisconnect(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Internal helper to actually do the disconnect
            </summary>
            <param name="sqlConnection">A valid, preopulated SqlConnection object</param>
            <param name="databaseName">
            The database to disconnect the user processes from.
            </param>
            <param name="commandTimeout">
            The time in seconds for the operation to take before raising an
            error.
            </param>
            <returns>
            The number of users disconnected.
            </returns>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Application.DeleteApplication">
            <summary>
            Deletes the specified ComponentServices Application and all its components.
            </summary>
            <remarks>
            <code><![CDATA[<ComponentServices.Application.DeleteApplication ApplicationName="applicationName" />]]></code>
            <para>where:</para>
            <para><i>applicationName (Required)</i></para>
            <para>The name of the COM+ application to be deleted. If the application name exists multiple times then all matches will all be deleted.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Application.DeleteApplication
                        ApplicationName="MyApplicationName" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Application.DeleteApplication.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.DeleteApplication.ApplicationName">
            <summary>
            Gets or sets the name of the COM+ application to be deleted
            </summary>
            <value>The name of the application to be deleted. If the application name exists multiple times then all matches will all be deleted.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CodeCoverage.Create">
            <summary>
            Creates a new CodeCoverage configuration file. The created file will be called "CoverageConfiguration.xml" and will be located in the
            "Configuration" folder of the CoverageEye executable, unless an alternate path is specified.
            </summary>
            <remarks>
            <code><![CDATA[<CodeCoverage.Create Path="path"/>]]></code>
            <para>where:</para>
            <para><i>path</i></para>
            <para>The absolute path to the folder for the CodeCoverage configuration file. This defaults to the default location retrieved from the registry.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CodeCoverage.Create
                        Path="C:\CoverageEyeInstallation\Configuration"  />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.Create.#ctor">
            <summary>
            Initializes a new instance of the Create class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CodeCoverage.Create.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CodeCoverage.Create.Path">
            <summary>
            The absolute path to the folder containing the CodeCoverage configuration file. This defaults to the default location retrieved from the registry.
            </summary>
            <value>The absolute path to the folder containing the CodeCoverage configuration file.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CheckComponentInstalled">
            <summary>
            Check that a windows component is installed such as IIS
            </summary>
            <remarks>
            <code><![CDATA[
            <CheckComponentInstalled Ids="ids" IdComparisonOperators="idsComparisonOperators" UnaryOperators="unaryOperators" 
                                     InstalledComponentsXml="installedComponentsXml">
                <Output TaskParameter="Summary" ItemName="SummaryItem" />
                <Output TaskParameter="Success" ItemName="SuccessItem" />
            </CheckComponentInstalled>
            ]]></code>
            <para>where:</para>
            <para><i>ids (Required)</i></para>
            <para>Ids of the components to check for as found in:
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\OC Manager\Subcomponents
            For example, "iis_www"
            </para>
            <para><i>idsComparisonOperators (Required)</i></para>
            <para>Name comparison operators for each of the component ids speciifed in <i>ids</i>. Can be any of:
                    "Equals",
                    "Contains"
                    "LessThan"
                    "GreaterThan"
                    "LessThanOrEquals"
                    "GreaterThanOrEquals"
            </para>
            <para><i>unaryOperators (Required)</i></para>
            <para>Unary operators for the respective <i>idsComparisonOperators</i>, allowing (for example) "Not Equals" to be created. Can be "None" or "Not".</para>
            <para><i>installedComponentsXml (Required)</i></para>
            <para>A list of the components installed on the local machine. This will typically be generated by the <seealso cref="T:Microsoft.Sdc.Tasks.GetInstalledComponents">GetInstalledComponents</seealso> task</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CheckComponentInstalled
                        Ids="aspnet" IdComparisonOperators="Equals" UnaryOperators="None", InstalledComponentsXml="$(InstalledComponentsXmlItem)">
                                <Output TaskParameter="Summary" ItemName="SummaryItem" />
                                <Output TaskParameter="Success" ItemName="SuccessItem" />
                    </CheckComponentInstalled>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CheckComponentInstalled.#ctor">
            <summary>
            Initializes a new instance of the CheckComponentInstalled class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.CheckComponentInstalled.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.SuppressWarnings">
            <summary>
            Set to true in order to suppress warnings reported by this task 
            </summary>
            <value>true or false (defaults to false)</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.Summary">
            <summary>
            Textual summary of components found and components not found
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.Success">
            <summary>
            Success of the checking after execution.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.Ids">
            <summary>
            Ids of the components to check for as found in:
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\OC Manager\Subcomponents
            </summary>
            <example>iis_www</example>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.IdComparisonOperators">
            <summary>
            Name comparison operators taken from BinaryComparisonOperator enumeration.
            </summary>
            <seealso cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.BinaryComparisonOperator"/>
            <value> Can be any of:
                    "Equals",
                    "Contains"
                    "LessThan"
                    "GreaterThan"
                    "LessThanOrEquals"
                    "GreaterThanOrEquals"
            </value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.UnaryOperators">
            <summary>
            Unary operators taken from UnaryLogicalOperator enumeration.
            </summary>
            <example>Not or None</example>
            <seealso cref="T:Microsoft.Sdc.Tasks.Configuration.InstalledProducts.UnaryLogicalOperator"/>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CheckComponentInstalled.InstalledComponentsXml">
            <summary>
            Generated by GetInstalledComponents task
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Cab.ExtractFile">
            <summary>
            Extracts the file from the CabFile specified.
            </summary>
            <remarks>
            <code><![CDATA[<Cab.ExtractFile PathToCabFile="pathToCabFile" PathToFiles="pathToFile" FileToExtract="fileToExtract" Path="path" Overwrite="overwrite"/>]]></code>
            <para>where:</para>
            <para><i>pathToCabFile (Required)</i></para>
            <para>The path to the cab file from which the files are to be extracted.</para>
            <para><i>pathToFiles (Required)</i></para>
            <para>The path to the folder that the files are to be extracted to. If this directory does not exist, it will be created.</para>
            <para><i>fileToExtract</i></para>
            <para>The specific file to extract from the specified cab file</para>
            <para><i>path</i></para>
            <para>The path to CabArc.exe. This will default to "C:\Program Files\CabArc\CabArc.exe" if not otherwise specified.</para>
            <para><i>overwrite</i></para>
            <para>Set to true to overwrite files of the same name without asking.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Cab.ExtractFile
                        PathToCabFile="C:\Archives\CabFile.cab"
                        PathToFiles="C:\Temp"
                        Path="C:\CabInstall\Cabarc.exe"  />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Cab.ExtractFile.#ctor">
            <summary>
            Initializes a new instance of the ExtractFile class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Cab.ExtractFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.ExtractFile.Overwrite">
            <summary>
            Set to true to overwrite files of the same name without asking.
            </summary>
            <value>True to overwrite without asking.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.ExtractFile.Path">
            <summary>
            The path to CabArc.exe.
            </summary>
            <value>The path to CabArc.exe. This will default to "C:\Program Files\CabArc\CabArc.exe" if not otherwise specified.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.ExtractFile.PathToCabFile">
            <summary>
            The path to the cab file from which the files are to be extracted.
            </summary>
            <value>The path to the cab file from which the files are to be extracted.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.ExtractFile.PathToFiles">
            <summary>
            The path to the folder that the files are to be extracted to.
            </summary>
            <value>The path to the folder that the files are to be extracted to. If this directory does not exist, it will be created.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Cab.ExtractFile.FileToExtract">
            <summary>
            The specific file to extract from the specified cab file.
            </summary>
            <value>The specific file to extract from the specified cab file.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Math.Sum">
            <summary>
            Returns the sum of the ItemList
            </summary>
            <remarks>
            <code><![CDATA[ 
            <Math.Sum Numbers="numbers">
                   <Output TaskParameter="Result" PropertyName="result" />
            </Math.Sum>
            ]]></code>
            
            <para>where:</para>
            <para><i>numbers (Required)</i></para>
            <para>ItemList of the numbers to total
            </para>
            <para>result</para>
            <para> The total of the numbers 
            </para>   
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <Math.Sum Numbers="2;3;4;5;">
                        <Output TaskParameter="Result" PropertyName="MyResult" />
                    </Math.Sum>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Math.Sum.#ctor">
            <summary>
            Initializes a new instance of the Sum class.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.Math.Sum.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Math.Sum.Numbers">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.Math.Sum.Result">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ServiceProcess.ControlService">
            <summary>
            Controls a Win32 Service on the local computer
            </summary>
            <remarks>
            <code><![CDATA[
            <ControlService Action="action" ServiceName="servicename"/>
            
            <ControlService Action="Uninstall" ServiceName="servicename" ServiceExePath="serviceexepath"/>
            
            <ControlService Action="Install" ServiceName="servicename" User="user" Password="password" ServiceExePath="serviceexepath"/>
            
            ]]></code>
            <para>where:</para>
            <para><i>action (Required)</i></para>
            <para>The action to perform on the service. Supported actions are: Install, Uninstall, Start, Stop, Disabled, Manual, Automatic</para>
            <para><i>servicename (Required)</i></para>
            <para>The name of the local Win32 service to control</para>
            <para><i>serviceexepath</i></para>
            <para>The path to the service executable</para>
            <para><i>user</i></para>
            <para>The name of the user to run the service under</para>
            <para><i>password</i></para>
            <para>The password of the user to run the service under</para>
            </remarks>
            <example>
            <code><![CDATA[
            
            <ControlService Action="Start" ServiceName="W3SVC"/>
            
            <ControlService Action="Disabled" ServiceName="aspnet_state"/>
            
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.GetInstallUtilPath">
            <summary>
            Gets the install util path.
            </summary>
            <returns>a string value</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.CheckExists">
            <summary>
            Checks the service exists.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.SetStartupType(System.String)">
            <summary>
            Sets the type of the startup.
            </summary>
            <param name="startup">The startup.</param>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.StartService">
            <summary>
            Starts Service.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.UninstallService">
            <summary>
            Uninstalls Service.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.StopService">
            <summary>
            Stops Service.
            </summary>
            <returns>a boolean value</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.ServiceDoesExist">
            <summary>
            Services the exists.
            </summary>
            <returns>a boolean value</returns>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.InstallService">
            <summary>
            Installs Service.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.ServiceExists">
            <summary>
            Gets or sets the service exists.
            </summary>
            <value>The service exists.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.MachineName">
            <summary>
            Gets or sets the name of the machine.
            </summary>
            <value>The name of the machine.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.ServiceName">
            <summary>
            Gets or sets the name of Service.
            </summary>
            <value>The name of Service.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.ServiceExePath">
            <summary>
            Gets or sets Service exe path.
            </summary>
            <value>Service exe path.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ServiceProcess.ControlService.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.CreateSequenceMetadata">
            <summary>
            Adds a metadata item containing a sequence number to each item in the itemlist passed.
            </summary>
            <remarks>
            <code>
            <![CDATA[<CreateSequenceMetadata
                ItemList="itemList"
                MetadataName="metadataName"
                FormatString="formatString"
                [Start="startNumber"]
                [Increment="incrementNumber"]
                >
                <Output TaskParameter="ItemList" ItemName="outputList" />
            </CreateSequenceMetadata>]]>
            </code>
            <para>where:</para>
            <para><i>ItemList (Required)</i></para>
            <para>The itemlist that the metadata is to be added to. This is also the output itemlist.</para>
            <para><i>MetadataName (Required)</i></para>
            <para>The name of the metadata to be created for each item.</para>
            <para><i>FormatString (Required)</i></para>
            <para>A format string for the sequence number. This is a String.Format() type format string and should include the {0} placeholder for the sequence number.</para>
            <para><i>Start (optional)</i></para>
            <para>An optional numeric value to start the sequence number at. This defaults to 1 if not specified.</para>
            <para><i>Increment (Optional)</i></para>
            <para>An optional numeric value used to increment the sequence number by. This defaults to 1 if not specified.</para>
            </remarks>
            <example>
            This example will output an itemlist called IndexedNames based on the Names itemlist with
            an additional metadata item called Index. Each value in Index will be a unique sequential
            number of three digits with leading zeroes.
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CreateSequenceMetadata
                        MetadataItem="Index"
                        FormatString="{0:000}"
                        ItemList="@(Names)">
                            <Output TaskParameter="ItemList" ItemName="IndexedNames" />
                    </CreateSequenceMetadata>
                </Target>
            </Project>
            ]]></code>    
            </example>
                /// <example>
            The second example is similar to the previous one but demonstrates how the FormatString parameter
            may be used to create string values that are more than just a sequence number. Also, Start 
            and Increment values are used to set values other than 1 for these parameters. The metadata
            values created will be NAME1000, NAME1010, etc. 
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <CreateSequenceMetadata
                        MetadataItem="Index"
                        FormatString="NAME{0:0000}"
                        ItemList="@(Names)"
                        Start="1000"
                        Increment="10">
                            <Output TaskParameter="ItemList" ItemName="IndexedNames" />
                    </CreateSequenceMetadata>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateSequenceMetadata.FormatString">
            <summary>
            A format string for the sequence number. This is a String.Format() type format string and should include the {0} placeholder for the sequence number.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateSequenceMetadata.MetadataName">
            <summary>
            The name of the metadata to be created for each item.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateSequenceMetadata.Start">
            <summary>
            An optional numeric value to start the sequence number at. This defaults to 1 if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateSequenceMetadata.Increment">
            <summary>
            An optional numeric value used to increment the sequence number by. This defaults to 1 if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.CreateSequenceMetadata.ItemList">
            <summary>
            The itemlist that the metadata is to be added to. This is also the output itemlist.
            </summary>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.EventSource.Exists">
            <summary>
            Checks whether an event source exists.
            </summary>
            <remarks>
            <code><![CDATA[<EventSource.Exists Source="source" LogName="logName" />]]></code>
            <para>where:</para>
            <para><i>source (Required)</i></para>
            <para>The source name by which the application is registered on the local computer.</para>
            <para><i>logName (Required)</i></para>
            <para>The name of the log the source's entries are written to. Possible values include: Application, Security, System, or a custom event log.</para>
            <para><i>DoesExist (Output)</i></para>
            <para><b>true</b> if the event source does exist, or <b>false</b> otherwise.</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test">
                    <EventSource.Exists
                        Source="MyEventSource"
                        LogName="Application">
                        <Output TaskParameter="DoesExist" PropertyName="MyEventSourceExists" />
                    </EventSource.Exists>
                    <EventSource.Create
                        Condition="'$(MyEventSourceExists)' == 'false'"
                        Source="MyEventSource"
                        LogName="Application" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.EventSource.Exists.doesExist">
            <summary>
            States whether the event source exists.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.EventSource.Exists.source">
            <summary>
            The source name by which the application is registered on the local computer.
            </summary>
        </member>
        <member name="F:Microsoft.Sdc.Tasks.EventSource.Exists.logName">
            <summary>
            The name of the log the source's entries are written to.
            </summary>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.EventSource.Exists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Exists.DoesExist">
            <summary>
            Gets or sets a value indicating whether the event source [does exist].
            </summary>
            <value><c>true</c> if the event source [does exist]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Exists.Source">
            <summary>
            The source name by which the application is registered on the local computer.
            </summary>
            <value>The source parameter can be any string, although often it will be the name of your application or a component of your application. The source must be unique on the local computer.</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.EventSource.Exists.LogName">
            <summary>
            The name of the log the source's entries are written to.
            </summary>
            <value>Possible values include: Application, Security, System, or a custom event log.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.ComponentServices.Application.CheckExists">
            <summary>
            Checks if the specified ComponentServices Application exists
            </summary>
            <remarks>
            <code><![CDATA[<ComponentServices.Application.CheckExists ApplicationName="applicationName"/>]]></code>
            <para>where:</para>
            <para><i>applicationName (Required)</i></para>
            <para>The name of the COM+ application to be shutdown. If the application name exists multiple times then all matches will all be deleted.</para>
            <para><i>Exists (output)</i></para>
            <para>Boolean indicating whether the Application exists</para>
            </remarks>
            <example>
            <code><![CDATA[
            <Project>
                <Target Name="Test" >
                    <ComponentServices.Application.Shutdown ApplicationName="MyApplicationName" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="M:Microsoft.Sdc.Tasks.ComponentServices.Application.CheckExists.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.CheckExists.ApplicationName">
            <summary>
            Gets or sets the name of the COM+ application to be shutdown
            </summary>
            <value>The name of the application that will be shutdown</value>
        </member>
        <member name="P:Microsoft.Sdc.Tasks.ComponentServices.Application.CheckExists.Exists">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Sdc.Tasks.ComponentServices.Application.CheckExists"/> is exists.
            </summary>
            <value><c>true</c> if exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Sdc.Tasks.Configuration.Web.AppPoolManagedPipelineMode">
            <summary>
            Summary description for AppPoolStatee.
            </summary>
        </member>
    </members>
</doc>
